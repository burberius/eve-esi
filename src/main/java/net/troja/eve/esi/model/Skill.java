/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * skill object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Skill implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ACTIVE_SKILL_LEVEL = "active_skill_level";
    @SerializedName(SERIALIZED_NAME_ACTIVE_SKILL_LEVEL)
    private Integer activeSkillLevel;

    public static final String SERIALIZED_NAME_SKILL_ID = "skill_id";
    @SerializedName(SERIALIZED_NAME_SKILL_ID)
    private Integer skillId;

    public static final String SERIALIZED_NAME_SKILLPOINTS_IN_SKILL = "skillpoints_in_skill";
    @SerializedName(SERIALIZED_NAME_SKILLPOINTS_IN_SKILL)
    private Long skillpointsInSkill;

    public static final String SERIALIZED_NAME_TRAINED_SKILL_LEVEL = "trained_skill_level";
    @SerializedName(SERIALIZED_NAME_TRAINED_SKILL_LEVEL)
    private Integer trainedSkillLevel;

    public Skill() {
    }

    public Skill activeSkillLevel(Integer activeSkillLevel) {

        this.activeSkillLevel = activeSkillLevel;
        return this;
    }

    /**
     * active_skill_level integer
     * 
     * @return activeSkillLevel
     **/
    @javax.annotation.Nonnull
    public Integer getActiveSkillLevel() {
        return activeSkillLevel;
    }

    public void setActiveSkillLevel(Integer activeSkillLevel) {
        this.activeSkillLevel = activeSkillLevel;
    }

    public Skill skillId(Integer skillId) {

        this.skillId = skillId;
        return this;
    }

    /**
     * skill_id integer
     * 
     * @return skillId
     **/
    @javax.annotation.Nonnull
    public Integer getSkillId() {
        return skillId;
    }

    public void setSkillId(Integer skillId) {
        this.skillId = skillId;
    }

    public Skill skillpointsInSkill(Long skillpointsInSkill) {

        this.skillpointsInSkill = skillpointsInSkill;
        return this;
    }

    /**
     * skillpoints_in_skill integer
     * 
     * @return skillpointsInSkill
     **/
    @javax.annotation.Nonnull
    public Long getSkillpointsInSkill() {
        return skillpointsInSkill;
    }

    public void setSkillpointsInSkill(Long skillpointsInSkill) {
        this.skillpointsInSkill = skillpointsInSkill;
    }

    public Skill trainedSkillLevel(Integer trainedSkillLevel) {

        this.trainedSkillLevel = trainedSkillLevel;
        return this;
    }

    /**
     * trained_skill_level integer
     * 
     * @return trainedSkillLevel
     **/
    @javax.annotation.Nonnull
    public Integer getTrainedSkillLevel() {
        return trainedSkillLevel;
    }

    public void setTrainedSkillLevel(Integer trainedSkillLevel) {
        this.trainedSkillLevel = trainedSkillLevel;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Skill skill = (Skill) o;
        return Objects.equals(this.activeSkillLevel, skill.activeSkillLevel)
                && Objects.equals(this.skillId, skill.skillId)
                && Objects.equals(this.skillpointsInSkill, skill.skillpointsInSkill)
                && Objects.equals(this.trainedSkillLevel, skill.trainedSkillLevel);
    }

    @Override
    public int hashCode() {
        return Objects.hash(activeSkillLevel, skillId, skillpointsInSkill, trainedSkillLevel);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Skill {\n");
        sb.append("    activeSkillLevel: ").append(toIndentedString(activeSkillLevel)).append("\n");
        sb.append("    skillId: ").append(toIndentedString(skillId)).append("\n");
        sb.append("    skillpointsInSkill: ").append(toIndentedString(skillpointsInSkill)).append("\n");
        sb.append("    trainedSkillLevel: ").append(toIndentedString(trainedSkillLevel)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("active_skill_level");
        openapiFields.add("skill_id");
        openapiFields.add("skillpoints_in_skill");
        openapiFields.add("trained_skill_level");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("active_skill_level");
        openapiRequiredFields.add("skill_id");
        openapiRequiredFields.add("skillpoints_in_skill");
        openapiRequiredFields.add("trained_skill_level");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to Skill
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!Skill.openapiRequiredFields.isEmpty()) { // has required fields
                                                          // but JSON object is
                                                          // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in Skill is not found in the empty JSON string",
                        Skill.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!Skill.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format(
                        "The field `%s` in the JSON string is not defined in the `Skill` properties. JSON: %s",
                        entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : Skill.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Skill.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Skill' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Skill> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(Skill.class));

            return (TypeAdapter<T>) new TypeAdapter<Skill>() {
                @Override
                public void write(JsonWriter out, Skill value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public Skill read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of Skill given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of Skill
     * @throws IOException
     *             if the JSON string is invalid with respect to Skill
     */
    public static Skill fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Skill.class);
    }

    /**
     * Convert an instance of Skill to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
