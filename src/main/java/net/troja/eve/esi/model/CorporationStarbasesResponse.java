/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CorporationStarbasesResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_MOON_ID = "moon_id";
    @SerializedName(SERIALIZED_NAME_MOON_ID)
    private Integer moonId;

    public static final String SERIALIZED_NAME_ONLINED_SINCE = "onlined_since";
    @SerializedName(SERIALIZED_NAME_ONLINED_SINCE)
    private OffsetDateTime onlinedSince;

    public static final String SERIALIZED_NAME_REINFORCED_UNTIL = "reinforced_until";
    @SerializedName(SERIALIZED_NAME_REINFORCED_UNTIL)
    private OffsetDateTime reinforcedUntil;

    public static final String SERIALIZED_NAME_STARBASE_ID = "starbase_id";
    @SerializedName(SERIALIZED_NAME_STARBASE_ID)
    private Long starbaseId;

    /**
     * state string
     */
    @JsonAdapter(StateEnum.Adapter.class)
    public enum StateEnum {
        OFFLINE("offline"),

        ONLINE("online"),

        ONLINING("onlining"),

        REINFORCED("reinforced"),

        UNANCHORING("unanchoring");

        private String value;

        StateEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StateEnum fromValue(String value) {
            for (StateEnum b : StateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<StateEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StateEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StateEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_STATE = "state";
    @SerializedName(SERIALIZED_NAME_STATE)
    private String state;
    private StateEnum stateEnum;

    public static final String SERIALIZED_NAME_SYSTEM_ID = "system_id";
    @SerializedName(SERIALIZED_NAME_SYSTEM_ID)
    private Integer systemId;

    public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
    @SerializedName(SERIALIZED_NAME_TYPE_ID)
    private Integer typeId;

    public static final String SERIALIZED_NAME_UNANCHOR_AT = "unanchor_at";
    @SerializedName(SERIALIZED_NAME_UNANCHOR_AT)
    private OffsetDateTime unanchorAt;

    public CorporationStarbasesResponse() {
    }

    public CorporationStarbasesResponse moonId(Integer moonId) {

        this.moonId = moonId;
        return this;
    }

    /**
     * The moon this starbase (POS) is anchored on, unanchored POSes do not have
     * this information
     * 
     * @return moonId
     **/
    @javax.annotation.Nullable
    public Integer getMoonId() {
        return moonId;
    }

    public void setMoonId(Integer moonId) {
        this.moonId = moonId;
    }

    public CorporationStarbasesResponse onlinedSince(OffsetDateTime onlinedSince) {

        this.onlinedSince = onlinedSince;
        return this;
    }

    /**
     * When the POS onlined, for starbases (POSes) in online state
     * 
     * @return onlinedSince
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getOnlinedSince() {
        return onlinedSince;
    }

    public void setOnlinedSince(OffsetDateTime onlinedSince) {
        this.onlinedSince = onlinedSince;
    }

    public CorporationStarbasesResponse reinforcedUntil(OffsetDateTime reinforcedUntil) {

        this.reinforcedUntil = reinforcedUntil;
        return this;
    }

    /**
     * When the POS will be out of reinforcement, for starbases (POSes) in
     * reinforced state
     * 
     * @return reinforcedUntil
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getReinforcedUntil() {
        return reinforcedUntil;
    }

    public void setReinforcedUntil(OffsetDateTime reinforcedUntil) {
        this.reinforcedUntil = reinforcedUntil;
    }

    public CorporationStarbasesResponse starbaseId(Long starbaseId) {

        this.starbaseId = starbaseId;
        return this;
    }

    /**
     * Unique ID for this starbase (POS)
     * 
     * @return starbaseId
     **/
    @javax.annotation.Nonnull
    public Long getStarbaseId() {
        return starbaseId;
    }

    public void setStarbaseId(Long starbaseId) {
        this.starbaseId = starbaseId;
    }

    public CorporationStarbasesResponse stateString(String state) {

        this.state = state;
        return this;
    }

    public CorporationStarbasesResponse state(StateEnum stateEnum) {

        this.stateEnum = stateEnum;
        return this;
    }

    /**
     * state string
     * 
     * @return state
     **/
    @javax.annotation.Nullable
    public StateEnum getState() {
        if (stateEnum == null) {
            stateEnum = StateEnum.fromValue(state);
        }
        return stateEnum;
    }

    public String getStateString() {
        return state;
    }

    public void setState(StateEnum stateEnum) {
        this.stateEnum = stateEnum;
    }

    public void setStateString(String state) {
        this.state = state;
    }

    public CorporationStarbasesResponse systemId(Integer systemId) {

        this.systemId = systemId;
        return this;
    }

    /**
     * The solar system this starbase (POS) is in, unanchored POSes have this
     * information
     * 
     * @return systemId
     **/
    @javax.annotation.Nonnull
    public Integer getSystemId() {
        return systemId;
    }

    public void setSystemId(Integer systemId) {
        this.systemId = systemId;
    }

    public CorporationStarbasesResponse typeId(Integer typeId) {

        this.typeId = typeId;
        return this;
    }

    /**
     * Starbase (POS) type
     * 
     * @return typeId
     **/
    @javax.annotation.Nonnull
    public Integer getTypeId() {
        return typeId;
    }

    public void setTypeId(Integer typeId) {
        this.typeId = typeId;
    }

    public CorporationStarbasesResponse unanchorAt(OffsetDateTime unanchorAt) {

        this.unanchorAt = unanchorAt;
        return this;
    }

    /**
     * When the POS started unanchoring, for starbases (POSes) in unanchoring
     * state
     * 
     * @return unanchorAt
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getUnanchorAt() {
        return unanchorAt;
    }

    public void setUnanchorAt(OffsetDateTime unanchorAt) {
        this.unanchorAt = unanchorAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationStarbasesResponse corporationStarbasesResponse = (CorporationStarbasesResponse) o;
        return Objects.equals(this.moonId, corporationStarbasesResponse.moonId)
                && Objects.equals(this.onlinedSince, corporationStarbasesResponse.onlinedSince)
                && Objects.equals(this.reinforcedUntil, corporationStarbasesResponse.reinforcedUntil)
                && Objects.equals(this.starbaseId, corporationStarbasesResponse.starbaseId)
                && Objects.equals(this.state, corporationStarbasesResponse.state)
                && Objects.equals(this.systemId, corporationStarbasesResponse.systemId)
                && Objects.equals(this.typeId, corporationStarbasesResponse.typeId)
                && Objects.equals(this.unanchorAt, corporationStarbasesResponse.unanchorAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(moonId, onlinedSince, reinforcedUntil, starbaseId, state, systemId, typeId, unanchorAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationStarbasesResponse {\n");
        sb.append("    moonId: ").append(toIndentedString(moonId)).append("\n");
        sb.append("    onlinedSince: ").append(toIndentedString(onlinedSince)).append("\n");
        sb.append("    reinforcedUntil: ").append(toIndentedString(reinforcedUntil)).append("\n");
        sb.append("    starbaseId: ").append(toIndentedString(starbaseId)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    systemId: ").append(toIndentedString(systemId)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("    unanchorAt: ").append(toIndentedString(unanchorAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("moon_id");
        openapiFields.add("onlined_since");
        openapiFields.add("reinforced_until");
        openapiFields.add("starbase_id");
        openapiFields.add("state");
        openapiFields.add("system_id");
        openapiFields.add("type_id");
        openapiFields.add("unanchor_at");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("starbase_id");
        openapiRequiredFields.add("system_id");
        openapiRequiredFields.add("type_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CorporationStarbasesResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CorporationStarbasesResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                 // required
                                                                                 // fields
                                                                                 // but
                                                                                 // JSON
                                                                                 // object
                                                                                 // is
                                                                                 // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CorporationStarbasesResponse is not found in the empty JSON string",
                                CorporationStarbasesResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CorporationStarbasesResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationStarbasesResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CorporationStarbasesResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull())
                && !jsonObj.get("state").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `state` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("state").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationStarbasesResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationStarbasesResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationStarbasesResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationStarbasesResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationStarbasesResponse>() {
                @Override
                public void write(JsonWriter out, CorporationStarbasesResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationStarbasesResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationStarbasesResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationStarbasesResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationStarbasesResponse
     */
    public static CorporationStarbasesResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationStarbasesResponse.class);
    }

    /**
     * Convert an instance of CorporationStarbasesResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
