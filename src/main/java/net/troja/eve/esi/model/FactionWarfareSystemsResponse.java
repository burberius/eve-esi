/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FactionWarfareSystemsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    /**
     * contested string
     */
    @JsonAdapter(ContestedEnum.Adapter.class)
    public enum ContestedEnum {
        CAPTURED("captured"),

        CONTESTED("contested"),

        UNCONTESTED("uncontested"),

        VULNERABLE("vulnerable");

        private String value;

        ContestedEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ContestedEnum fromValue(String value) {
            for (ContestedEnum b : ContestedEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ContestedEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ContestedEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ContestedEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ContestedEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_CONTESTED = "contested";
    @SerializedName(SERIALIZED_NAME_CONTESTED)
    private String contested;
    private ContestedEnum contestedEnum;

    public static final String SERIALIZED_NAME_OCCUPIER_FACTION_ID = "occupier_faction_id";
    @SerializedName(SERIALIZED_NAME_OCCUPIER_FACTION_ID)
    private Integer occupierFactionId;

    public static final String SERIALIZED_NAME_OWNER_FACTION_ID = "owner_faction_id";
    @SerializedName(SERIALIZED_NAME_OWNER_FACTION_ID)
    private Integer ownerFactionId;

    public static final String SERIALIZED_NAME_SOLAR_SYSTEM_ID = "solar_system_id";
    @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM_ID)
    private Integer solarSystemId;

    public static final String SERIALIZED_NAME_VICTORY_POINTS = "victory_points";
    @SerializedName(SERIALIZED_NAME_VICTORY_POINTS)
    private Integer victoryPoints;

    public static final String SERIALIZED_NAME_VICTORY_POINTS_THRESHOLD = "victory_points_threshold";
    @SerializedName(SERIALIZED_NAME_VICTORY_POINTS_THRESHOLD)
    private Integer victoryPointsThreshold;

    public FactionWarfareSystemsResponse() {
    }

    public FactionWarfareSystemsResponse contestedString(String contested) {

        this.contested = contested;
        return this;
    }

    public FactionWarfareSystemsResponse contested(ContestedEnum contestedEnum) {

        this.contestedEnum = contestedEnum;
        return this;
    }

    /**
     * contested string
     * 
     * @return contested
     **/
    @javax.annotation.Nonnull
    public ContestedEnum getContested() {
        if (contestedEnum == null) {
            contestedEnum = ContestedEnum.fromValue(contested);
        }
        return contestedEnum;
    }

    public String getContestedString() {
        return contested;
    }

    public void setContested(ContestedEnum contestedEnum) {
        this.contestedEnum = contestedEnum;
    }

    public void setContestedString(String contested) {
        this.contested = contested;
    }

    public FactionWarfareSystemsResponse occupierFactionId(Integer occupierFactionId) {

        this.occupierFactionId = occupierFactionId;
        return this;
    }

    /**
     * occupier_faction_id integer
     * 
     * @return occupierFactionId
     **/
    @javax.annotation.Nonnull
    public Integer getOccupierFactionId() {
        return occupierFactionId;
    }

    public void setOccupierFactionId(Integer occupierFactionId) {
        this.occupierFactionId = occupierFactionId;
    }

    public FactionWarfareSystemsResponse ownerFactionId(Integer ownerFactionId) {

        this.ownerFactionId = ownerFactionId;
        return this;
    }

    /**
     * owner_faction_id integer
     * 
     * @return ownerFactionId
     **/
    @javax.annotation.Nonnull
    public Integer getOwnerFactionId() {
        return ownerFactionId;
    }

    public void setOwnerFactionId(Integer ownerFactionId) {
        this.ownerFactionId = ownerFactionId;
    }

    public FactionWarfareSystemsResponse solarSystemId(Integer solarSystemId) {

        this.solarSystemId = solarSystemId;
        return this;
    }

    /**
     * solar_system_id integer
     * 
     * @return solarSystemId
     **/
    @javax.annotation.Nonnull
    public Integer getSolarSystemId() {
        return solarSystemId;
    }

    public void setSolarSystemId(Integer solarSystemId) {
        this.solarSystemId = solarSystemId;
    }

    public FactionWarfareSystemsResponse victoryPoints(Integer victoryPoints) {

        this.victoryPoints = victoryPoints;
        return this;
    }

    /**
     * victory_points integer
     * 
     * @return victoryPoints
     **/
    @javax.annotation.Nonnull
    public Integer getVictoryPoints() {
        return victoryPoints;
    }

    public void setVictoryPoints(Integer victoryPoints) {
        this.victoryPoints = victoryPoints;
    }

    public FactionWarfareSystemsResponse victoryPointsThreshold(Integer victoryPointsThreshold) {

        this.victoryPointsThreshold = victoryPointsThreshold;
        return this;
    }

    /**
     * victory_points_threshold integer
     * 
     * @return victoryPointsThreshold
     **/
    @javax.annotation.Nonnull
    public Integer getVictoryPointsThreshold() {
        return victoryPointsThreshold;
    }

    public void setVictoryPointsThreshold(Integer victoryPointsThreshold) {
        this.victoryPointsThreshold = victoryPointsThreshold;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FactionWarfareSystemsResponse factionWarfareSystemsResponse = (FactionWarfareSystemsResponse) o;
        return Objects.equals(this.contested, factionWarfareSystemsResponse.contested)
                && Objects.equals(this.occupierFactionId, factionWarfareSystemsResponse.occupierFactionId)
                && Objects.equals(this.ownerFactionId, factionWarfareSystemsResponse.ownerFactionId)
                && Objects.equals(this.solarSystemId, factionWarfareSystemsResponse.solarSystemId)
                && Objects.equals(this.victoryPoints, factionWarfareSystemsResponse.victoryPoints)
                && Objects.equals(this.victoryPointsThreshold, factionWarfareSystemsResponse.victoryPointsThreshold);
    }

    @Override
    public int hashCode() {
        return Objects.hash(contested, occupierFactionId, ownerFactionId, solarSystemId, victoryPoints,
                victoryPointsThreshold);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FactionWarfareSystemsResponse {\n");
        sb.append("    contested: ").append(toIndentedString(contested)).append("\n");
        sb.append("    occupierFactionId: ").append(toIndentedString(occupierFactionId)).append("\n");
        sb.append("    ownerFactionId: ").append(toIndentedString(ownerFactionId)).append("\n");
        sb.append("    solarSystemId: ").append(toIndentedString(solarSystemId)).append("\n");
        sb.append("    victoryPoints: ").append(toIndentedString(victoryPoints)).append("\n");
        sb.append("    victoryPointsThreshold: ").append(toIndentedString(victoryPointsThreshold)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("contested");
        openapiFields.add("occupier_faction_id");
        openapiFields.add("owner_faction_id");
        openapiFields.add("solar_system_id");
        openapiFields.add("victory_points");
        openapiFields.add("victory_points_threshold");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("contested");
        openapiRequiredFields.add("occupier_faction_id");
        openapiRequiredFields.add("owner_faction_id");
        openapiRequiredFields.add("solar_system_id");
        openapiRequiredFields.add("victory_points");
        openapiRequiredFields.add("victory_points_threshold");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             FactionWarfareSystemsResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FactionWarfareSystemsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                  // required
                                                                                  // fields
                                                                                  // but
                                                                                  // JSON
                                                                                  // object
                                                                                  // is
                                                                                  // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FactionWarfareSystemsResponse is not found in the empty JSON string",
                                FactionWarfareSystemsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FactionWarfareSystemsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `FactionWarfareSystemsResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : FactionWarfareSystemsResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (!jsonObj.get("contested").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `contested` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("contested").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FactionWarfareSystemsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'FactionWarfareSystemsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FactionWarfareSystemsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(FactionWarfareSystemsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<FactionWarfareSystemsResponse>() {
                @Override
                public void write(JsonWriter out, FactionWarfareSystemsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public FactionWarfareSystemsResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of FactionWarfareSystemsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of FactionWarfareSystemsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             FactionWarfareSystemsResponse
     */
    public static FactionWarfareSystemsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FactionWarfareSystemsResponse.class);
    }

    /**
     * Convert an instance of FactionWarfareSystemsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
