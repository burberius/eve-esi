/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.StructureService;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CorporationStructuresResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CORPORATION_ID = "corporation_id";
    @SerializedName(SERIALIZED_NAME_CORPORATION_ID)
    private Integer corporationId;

    public static final String SERIALIZED_NAME_FUEL_EXPIRES = "fuel_expires";
    @SerializedName(SERIALIZED_NAME_FUEL_EXPIRES)
    private OffsetDateTime fuelExpires;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_NEXT_REINFORCE_APPLY = "next_reinforce_apply";
    @SerializedName(SERIALIZED_NAME_NEXT_REINFORCE_APPLY)
    private OffsetDateTime nextReinforceApply;

    public static final String SERIALIZED_NAME_NEXT_REINFORCE_HOUR = "next_reinforce_hour";
    @SerializedName(SERIALIZED_NAME_NEXT_REINFORCE_HOUR)
    private Integer nextReinforceHour;

    public static final String SERIALIZED_NAME_PROFILE_ID = "profile_id";
    @SerializedName(SERIALIZED_NAME_PROFILE_ID)
    private Integer profileId;

    public static final String SERIALIZED_NAME_REINFORCE_HOUR = "reinforce_hour";
    @SerializedName(SERIALIZED_NAME_REINFORCE_HOUR)
    private Integer reinforceHour;

    public static final String SERIALIZED_NAME_SERVICES = "services";
    @SerializedName(SERIALIZED_NAME_SERVICES)
    private List<StructureService> services;

    /**
     * state string
     */
    @JsonAdapter(StateEnum.Adapter.class)
    public enum StateEnum {
        ANCHOR_VULNERABLE("anchor_vulnerable"),

        ANCHORING("anchoring"),

        ARMOR_REINFORCE("armor_reinforce"),

        ARMOR_VULNERABLE("armor_vulnerable"),

        DEPLOY_VULNERABLE("deploy_vulnerable"),

        FITTING_INVULNERABLE("fitting_invulnerable"),

        HULL_REINFORCE("hull_reinforce"),

        HULL_VULNERABLE("hull_vulnerable"),

        ONLINE_DEPRECATED("online_deprecated"),

        ONLINING_VULNERABLE("onlining_vulnerable"),

        SHIELD_VULNERABLE("shield_vulnerable"),

        UNANCHORED("unanchored"),

        UNKNOWN("unknown");

        private String value;

        StateEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StateEnum fromValue(String value) {
            for (StateEnum b : StateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<StateEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StateEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StateEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_STATE = "state";
    @SerializedName(SERIALIZED_NAME_STATE)
    private String state;
    private StateEnum stateEnum;

    public static final String SERIALIZED_NAME_STATE_TIMER_END = "state_timer_end";
    @SerializedName(SERIALIZED_NAME_STATE_TIMER_END)
    private OffsetDateTime stateTimerEnd;

    public static final String SERIALIZED_NAME_STATE_TIMER_START = "state_timer_start";
    @SerializedName(SERIALIZED_NAME_STATE_TIMER_START)
    private OffsetDateTime stateTimerStart;

    public static final String SERIALIZED_NAME_STRUCTURE_ID = "structure_id";
    @SerializedName(SERIALIZED_NAME_STRUCTURE_ID)
    private Long structureId;

    public static final String SERIALIZED_NAME_SYSTEM_ID = "system_id";
    @SerializedName(SERIALIZED_NAME_SYSTEM_ID)
    private Integer systemId;

    public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
    @SerializedName(SERIALIZED_NAME_TYPE_ID)
    private Integer typeId;

    public static final String SERIALIZED_NAME_UNANCHORS_AT = "unanchors_at";
    @SerializedName(SERIALIZED_NAME_UNANCHORS_AT)
    private OffsetDateTime unanchorsAt;

    public CorporationStructuresResponse() {
    }

    public CorporationStructuresResponse corporationId(Integer corporationId) {

        this.corporationId = corporationId;
        return this;
    }

    /**
     * ID of the corporation that owns the structure
     * 
     * @return corporationId
     **/
    @javax.annotation.Nonnull
    public Integer getCorporationId() {
        return corporationId;
    }

    public void setCorporationId(Integer corporationId) {
        this.corporationId = corporationId;
    }

    public CorporationStructuresResponse fuelExpires(OffsetDateTime fuelExpires) {

        this.fuelExpires = fuelExpires;
        return this;
    }

    /**
     * Date on which the structure will run out of fuel
     * 
     * @return fuelExpires
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getFuelExpires() {
        return fuelExpires;
    }

    public void setFuelExpires(OffsetDateTime fuelExpires) {
        this.fuelExpires = fuelExpires;
    }

    public CorporationStructuresResponse name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The structure name
     * 
     * @return name
     **/
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CorporationStructuresResponse nextReinforceApply(OffsetDateTime nextReinforceApply) {

        this.nextReinforceApply = nextReinforceApply;
        return this;
    }

    /**
     * The date and time when the structure&#39;s newly requested reinforcement
     * times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
     * 
     * @return nextReinforceApply
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getNextReinforceApply() {
        return nextReinforceApply;
    }

    public void setNextReinforceApply(OffsetDateTime nextReinforceApply) {
        this.nextReinforceApply = nextReinforceApply;
    }

    public CorporationStructuresResponse nextReinforceHour(Integer nextReinforceHour) {

        this.nextReinforceHour = nextReinforceHour;
        return this;
    }

    /**
     * The requested change to reinforce_hour that will take effect at the time
     * shown by next_reinforce_apply minimum: 0 maximum: 23
     * 
     * @return nextReinforceHour
     **/
    @javax.annotation.Nullable
    public Integer getNextReinforceHour() {
        return nextReinforceHour;
    }

    public void setNextReinforceHour(Integer nextReinforceHour) {
        this.nextReinforceHour = nextReinforceHour;
    }

    public CorporationStructuresResponse profileId(Integer profileId) {

        this.profileId = profileId;
        return this;
    }

    /**
     * The id of the ACL profile for this citadel
     * 
     * @return profileId
     **/
    @javax.annotation.Nonnull
    public Integer getProfileId() {
        return profileId;
    }

    public void setProfileId(Integer profileId) {
        this.profileId = profileId;
    }

    public CorporationStructuresResponse reinforceHour(Integer reinforceHour) {

        this.reinforceHour = reinforceHour;
        return this;
    }

    /**
     * The hour of day that determines the four hour window when the structure
     * will randomly exit its reinforcement periods and become vulnerable to
     * attack against its armor and/or hull. The structure will become
     * vulnerable at a random time that is +/- 2 hours centered on the value of
     * this property minimum: 0 maximum: 23
     * 
     * @return reinforceHour
     **/
    @javax.annotation.Nullable
    public Integer getReinforceHour() {
        return reinforceHour;
    }

    public void setReinforceHour(Integer reinforceHour) {
        this.reinforceHour = reinforceHour;
    }

    public CorporationStructuresResponse services(List<StructureService> services) {

        this.services = services;
        return this;
    }

    public CorporationStructuresResponse addServicesItem(StructureService servicesItem) {
        if (this.services == null) {
            this.services = new ArrayList<>();
        }
        this.services.add(servicesItem);
        return this;
    }

    /**
     * Contains a list of service upgrades, and their state
     * 
     * @return services
     **/
    @javax.annotation.Nullable
    public List<StructureService> getServices() {
        return services;
    }

    public void setServices(List<StructureService> services) {
        this.services = services;
    }

    public CorporationStructuresResponse stateString(String state) {

        this.state = state;
        return this;
    }

    public CorporationStructuresResponse state(StateEnum stateEnum) {

        this.stateEnum = stateEnum;
        return this;
    }

    /**
     * state string
     * 
     * @return state
     **/
    @javax.annotation.Nonnull
    public StateEnum getState() {
        if (stateEnum == null) {
            stateEnum = StateEnum.fromValue(state);
        }
        return stateEnum;
    }

    public String getStateString() {
        return state;
    }

    public void setState(StateEnum stateEnum) {
        this.stateEnum = stateEnum;
    }

    public void setStateString(String state) {
        this.state = state;
    }

    public CorporationStructuresResponse stateTimerEnd(OffsetDateTime stateTimerEnd) {

        this.stateTimerEnd = stateTimerEnd;
        return this;
    }

    /**
     * Date at which the structure will move to it&#39;s next state
     * 
     * @return stateTimerEnd
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getStateTimerEnd() {
        return stateTimerEnd;
    }

    public void setStateTimerEnd(OffsetDateTime stateTimerEnd) {
        this.stateTimerEnd = stateTimerEnd;
    }

    public CorporationStructuresResponse stateTimerStart(OffsetDateTime stateTimerStart) {

        this.stateTimerStart = stateTimerStart;
        return this;
    }

    /**
     * Date at which the structure entered it&#39;s current state
     * 
     * @return stateTimerStart
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getStateTimerStart() {
        return stateTimerStart;
    }

    public void setStateTimerStart(OffsetDateTime stateTimerStart) {
        this.stateTimerStart = stateTimerStart;
    }

    public CorporationStructuresResponse structureId(Long structureId) {

        this.structureId = structureId;
        return this;
    }

    /**
     * The Item ID of the structure
     * 
     * @return structureId
     **/
    @javax.annotation.Nonnull
    public Long getStructureId() {
        return structureId;
    }

    public void setStructureId(Long structureId) {
        this.structureId = structureId;
    }

    public CorporationStructuresResponse systemId(Integer systemId) {

        this.systemId = systemId;
        return this;
    }

    /**
     * The solar system the structure is in
     * 
     * @return systemId
     **/
    @javax.annotation.Nonnull
    public Integer getSystemId() {
        return systemId;
    }

    public void setSystemId(Integer systemId) {
        this.systemId = systemId;
    }

    public CorporationStructuresResponse typeId(Integer typeId) {

        this.typeId = typeId;
        return this;
    }

    /**
     * The type id of the structure
     * 
     * @return typeId
     **/
    @javax.annotation.Nonnull
    public Integer getTypeId() {
        return typeId;
    }

    public void setTypeId(Integer typeId) {
        this.typeId = typeId;
    }

    public CorporationStructuresResponse unanchorsAt(OffsetDateTime unanchorsAt) {

        this.unanchorsAt = unanchorsAt;
        return this;
    }

    /**
     * Date at which the structure will unanchor
     * 
     * @return unanchorsAt
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getUnanchorsAt() {
        return unanchorsAt;
    }

    public void setUnanchorsAt(OffsetDateTime unanchorsAt) {
        this.unanchorsAt = unanchorsAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationStructuresResponse corporationStructuresResponse = (CorporationStructuresResponse) o;
        return Objects.equals(this.corporationId, corporationStructuresResponse.corporationId)
                && Objects.equals(this.fuelExpires, corporationStructuresResponse.fuelExpires)
                && Objects.equals(this.name, corporationStructuresResponse.name)
                && Objects.equals(this.nextReinforceApply, corporationStructuresResponse.nextReinforceApply)
                && Objects.equals(this.nextReinforceHour, corporationStructuresResponse.nextReinforceHour)
                && Objects.equals(this.profileId, corporationStructuresResponse.profileId)
                && Objects.equals(this.reinforceHour, corporationStructuresResponse.reinforceHour)
                && Objects.equals(this.services, corporationStructuresResponse.services)
                && Objects.equals(this.state, corporationStructuresResponse.state)
                && Objects.equals(this.stateTimerEnd, corporationStructuresResponse.stateTimerEnd)
                && Objects.equals(this.stateTimerStart, corporationStructuresResponse.stateTimerStart)
                && Objects.equals(this.structureId, corporationStructuresResponse.structureId)
                && Objects.equals(this.systemId, corporationStructuresResponse.systemId)
                && Objects.equals(this.typeId, corporationStructuresResponse.typeId)
                && Objects.equals(this.unanchorsAt, corporationStructuresResponse.unanchorsAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(corporationId, fuelExpires, name, nextReinforceApply, nextReinforceHour, profileId,
                reinforceHour, services, state, stateTimerEnd, stateTimerStart, structureId, systemId, typeId,
                unanchorsAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationStructuresResponse {\n");
        sb.append("    corporationId: ").append(toIndentedString(corporationId)).append("\n");
        sb.append("    fuelExpires: ").append(toIndentedString(fuelExpires)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    nextReinforceApply: ").append(toIndentedString(nextReinforceApply)).append("\n");
        sb.append("    nextReinforceHour: ").append(toIndentedString(nextReinforceHour)).append("\n");
        sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
        sb.append("    reinforceHour: ").append(toIndentedString(reinforceHour)).append("\n");
        sb.append("    services: ").append(toIndentedString(services)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    stateTimerEnd: ").append(toIndentedString(stateTimerEnd)).append("\n");
        sb.append("    stateTimerStart: ").append(toIndentedString(stateTimerStart)).append("\n");
        sb.append("    structureId: ").append(toIndentedString(structureId)).append("\n");
        sb.append("    systemId: ").append(toIndentedString(systemId)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("    unanchorsAt: ").append(toIndentedString(unanchorsAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("corporation_id");
        openapiFields.add("fuel_expires");
        openapiFields.add("name");
        openapiFields.add("next_reinforce_apply");
        openapiFields.add("next_reinforce_hour");
        openapiFields.add("profile_id");
        openapiFields.add("reinforce_hour");
        openapiFields.add("services");
        openapiFields.add("state");
        openapiFields.add("state_timer_end");
        openapiFields.add("state_timer_start");
        openapiFields.add("structure_id");
        openapiFields.add("system_id");
        openapiFields.add("type_id");
        openapiFields.add("unanchors_at");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("corporation_id");
        openapiRequiredFields.add("profile_id");
        openapiRequiredFields.add("state");
        openapiRequiredFields.add("structure_id");
        openapiRequiredFields.add("system_id");
        openapiRequiredFields.add("type_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CorporationStructuresResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CorporationStructuresResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                  // required
                                                                                  // fields
                                                                                  // but
                                                                                  // JSON
                                                                                  // object
                                                                                  // is
                                                                                  // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CorporationStructuresResponse is not found in the empty JSON string",
                                CorporationStructuresResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CorporationStructuresResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationStructuresResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CorporationStructuresResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("name").toString()));
        }
        if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
            JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
            if (jsonArrayservices != null) {
                // ensure the json data is an array
                if (!jsonObj.get("services").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj
                                    .get("services").toString()));
                }

                // validate the optional field `services` (array)
                for (int i = 0; i < jsonArrayservices.size(); i++) {
                    StructureService.validateJsonObject(jsonArrayservices.get(i).getAsJsonObject());
                };
            }
        }
        if (!jsonObj.get("state").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `state` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("state").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationStructuresResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationStructuresResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationStructuresResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationStructuresResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationStructuresResponse>() {
                @Override
                public void write(JsonWriter out, CorporationStructuresResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationStructuresResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationStructuresResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationStructuresResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationStructuresResponse
     */
    public static CorporationStructuresResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationStructuresResponse.class);
    }

    /**
     * Convert an instance of CorporationStructuresResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
