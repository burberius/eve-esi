/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CharacterAttributesResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ACCRUED_REMAP_COOLDOWN_DATE = "accrued_remap_cooldown_date";
    @SerializedName(SERIALIZED_NAME_ACCRUED_REMAP_COOLDOWN_DATE)
    private OffsetDateTime accruedRemapCooldownDate;

    public static final String SERIALIZED_NAME_BONUS_REMAPS = "bonus_remaps";
    @SerializedName(SERIALIZED_NAME_BONUS_REMAPS)
    private Integer bonusRemaps;

    public static final String SERIALIZED_NAME_CHARISMA = "charisma";
    @SerializedName(SERIALIZED_NAME_CHARISMA)
    private Integer charisma;

    public static final String SERIALIZED_NAME_INTELLIGENCE = "intelligence";
    @SerializedName(SERIALIZED_NAME_INTELLIGENCE)
    private Integer intelligence;

    public static final String SERIALIZED_NAME_LAST_REMAP_DATE = "last_remap_date";
    @SerializedName(SERIALIZED_NAME_LAST_REMAP_DATE)
    private OffsetDateTime lastRemapDate;

    public static final String SERIALIZED_NAME_MEMORY = "memory";
    @SerializedName(SERIALIZED_NAME_MEMORY)
    private Integer memory;

    public static final String SERIALIZED_NAME_PERCEPTION = "perception";
    @SerializedName(SERIALIZED_NAME_PERCEPTION)
    private Integer perception;

    public static final String SERIALIZED_NAME_WILLPOWER = "willpower";
    @SerializedName(SERIALIZED_NAME_WILLPOWER)
    private Integer willpower;

    public CharacterAttributesResponse() {
    }

    public CharacterAttributesResponse accruedRemapCooldownDate(OffsetDateTime accruedRemapCooldownDate) {

        this.accruedRemapCooldownDate = accruedRemapCooldownDate;
        return this;
    }

    /**
     * Neural remapping cooldown after a character uses remap accrued over time
     * 
     * @return accruedRemapCooldownDate
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getAccruedRemapCooldownDate() {
        return accruedRemapCooldownDate;
    }

    public void setAccruedRemapCooldownDate(OffsetDateTime accruedRemapCooldownDate) {
        this.accruedRemapCooldownDate = accruedRemapCooldownDate;
    }

    public CharacterAttributesResponse bonusRemaps(Integer bonusRemaps) {

        this.bonusRemaps = bonusRemaps;
        return this;
    }

    /**
     * Number of available bonus character neural remaps
     * 
     * @return bonusRemaps
     **/
    @javax.annotation.Nullable
    public Integer getBonusRemaps() {
        return bonusRemaps;
    }

    public void setBonusRemaps(Integer bonusRemaps) {
        this.bonusRemaps = bonusRemaps;
    }

    public CharacterAttributesResponse charisma(Integer charisma) {

        this.charisma = charisma;
        return this;
    }

    /**
     * charisma integer
     * 
     * @return charisma
     **/
    @javax.annotation.Nonnull
    public Integer getCharisma() {
        return charisma;
    }

    public void setCharisma(Integer charisma) {
        this.charisma = charisma;
    }

    public CharacterAttributesResponse intelligence(Integer intelligence) {

        this.intelligence = intelligence;
        return this;
    }

    /**
     * intelligence integer
     * 
     * @return intelligence
     **/
    @javax.annotation.Nonnull
    public Integer getIntelligence() {
        return intelligence;
    }

    public void setIntelligence(Integer intelligence) {
        this.intelligence = intelligence;
    }

    public CharacterAttributesResponse lastRemapDate(OffsetDateTime lastRemapDate) {

        this.lastRemapDate = lastRemapDate;
        return this;
    }

    /**
     * Datetime of last neural remap, including usage of bonus remaps
     * 
     * @return lastRemapDate
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getLastRemapDate() {
        return lastRemapDate;
    }

    public void setLastRemapDate(OffsetDateTime lastRemapDate) {
        this.lastRemapDate = lastRemapDate;
    }

    public CharacterAttributesResponse memory(Integer memory) {

        this.memory = memory;
        return this;
    }

    /**
     * memory integer
     * 
     * @return memory
     **/
    @javax.annotation.Nonnull
    public Integer getMemory() {
        return memory;
    }

    public void setMemory(Integer memory) {
        this.memory = memory;
    }

    public CharacterAttributesResponse perception(Integer perception) {

        this.perception = perception;
        return this;
    }

    /**
     * perception integer
     * 
     * @return perception
     **/
    @javax.annotation.Nonnull
    public Integer getPerception() {
        return perception;
    }

    public void setPerception(Integer perception) {
        this.perception = perception;
    }

    public CharacterAttributesResponse willpower(Integer willpower) {

        this.willpower = willpower;
        return this;
    }

    /**
     * willpower integer
     * 
     * @return willpower
     **/
    @javax.annotation.Nonnull
    public Integer getWillpower() {
        return willpower;
    }

    public void setWillpower(Integer willpower) {
        this.willpower = willpower;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterAttributesResponse characterAttributesResponse = (CharacterAttributesResponse) o;
        return Objects.equals(this.accruedRemapCooldownDate, characterAttributesResponse.accruedRemapCooldownDate)
                && Objects.equals(this.bonusRemaps, characterAttributesResponse.bonusRemaps)
                && Objects.equals(this.charisma, characterAttributesResponse.charisma)
                && Objects.equals(this.intelligence, characterAttributesResponse.intelligence)
                && Objects.equals(this.lastRemapDate, characterAttributesResponse.lastRemapDate)
                && Objects.equals(this.memory, characterAttributesResponse.memory)
                && Objects.equals(this.perception, characterAttributesResponse.perception)
                && Objects.equals(this.willpower, characterAttributesResponse.willpower);
    }

    @Override
    public int hashCode() {
        return Objects.hash(accruedRemapCooldownDate, bonusRemaps, charisma, intelligence, lastRemapDate, memory,
                perception, willpower);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterAttributesResponse {\n");
        sb.append("    accruedRemapCooldownDate: ").append(toIndentedString(accruedRemapCooldownDate)).append("\n");
        sb.append("    bonusRemaps: ").append(toIndentedString(bonusRemaps)).append("\n");
        sb.append("    charisma: ").append(toIndentedString(charisma)).append("\n");
        sb.append("    intelligence: ").append(toIndentedString(intelligence)).append("\n");
        sb.append("    lastRemapDate: ").append(toIndentedString(lastRemapDate)).append("\n");
        sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
        sb.append("    perception: ").append(toIndentedString(perception)).append("\n");
        sb.append("    willpower: ").append(toIndentedString(willpower)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("accrued_remap_cooldown_date");
        openapiFields.add("bonus_remaps");
        openapiFields.add("charisma");
        openapiFields.add("intelligence");
        openapiFields.add("last_remap_date");
        openapiFields.add("memory");
        openapiFields.add("perception");
        openapiFields.add("willpower");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("charisma");
        openapiRequiredFields.add("intelligence");
        openapiRequiredFields.add("memory");
        openapiRequiredFields.add("perception");
        openapiRequiredFields.add("willpower");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CharacterAttributesResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CharacterAttributesResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                // required
                                                                                // fields
                                                                                // but
                                                                                // JSON
                                                                                // object
                                                                                // is
                                                                                // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CharacterAttributesResponse is not found in the empty JSON string",
                                CharacterAttributesResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CharacterAttributesResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterAttributesResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterAttributesResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterAttributesResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterAttributesResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterAttributesResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterAttributesResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterAttributesResponse>() {
                @Override
                public void write(JsonWriter out, CharacterAttributesResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterAttributesResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterAttributesResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterAttributesResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterAttributesResponse
     */
    public static CharacterAttributesResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterAttributesResponse.class);
    }

    /**
     * Convert an instance of CharacterAttributesResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
