/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CharacterFleetResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_FLEET_BOSS_ID = "fleet_boss_id";
    @SerializedName(SERIALIZED_NAME_FLEET_BOSS_ID)
    private Long fleetBossId;

    public static final String SERIALIZED_NAME_FLEET_ID = "fleet_id";
    @SerializedName(SERIALIZED_NAME_FLEET_ID)
    private Long fleetId;

    /**
     * Member’s role in fleet
     */
    @JsonAdapter(RoleEnum.Adapter.class)
    public enum RoleEnum {
        FLEET_COMMANDER("fleet_commander"),

        SQUAD_COMMANDER("squad_commander"),

        SQUAD_MEMBER("squad_member"),

        WING_COMMANDER("wing_commander");

        private String value;

        RoleEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RoleEnum fromValue(String value) {
            for (RoleEnum b : RoleEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RoleEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RoleEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RoleEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ROLE = "role";
    @SerializedName(SERIALIZED_NAME_ROLE)
    private String role;
    private RoleEnum roleEnum;

    public static final String SERIALIZED_NAME_SQUAD_ID = "squad_id";
    @SerializedName(SERIALIZED_NAME_SQUAD_ID)
    private Long squadId;

    public static final String SERIALIZED_NAME_WING_ID = "wing_id";
    @SerializedName(SERIALIZED_NAME_WING_ID)
    private Long wingId;

    public CharacterFleetResponse() {
    }

    public CharacterFleetResponse fleetBossId(Long fleetBossId) {

        this.fleetBossId = fleetBossId;
        return this;
    }

    /**
     * Character ID of the current fleet boss
     * 
     * @return fleetBossId
     **/
    @javax.annotation.Nonnull
    public Long getFleetBossId() {
        return fleetBossId;
    }

    public void setFleetBossId(Long fleetBossId) {
        this.fleetBossId = fleetBossId;
    }

    public CharacterFleetResponse fleetId(Long fleetId) {

        this.fleetId = fleetId;
        return this;
    }

    /**
     * The character&#39;s current fleet ID
     * 
     * @return fleetId
     **/
    @javax.annotation.Nonnull
    public Long getFleetId() {
        return fleetId;
    }

    public void setFleetId(Long fleetId) {
        this.fleetId = fleetId;
    }

    public CharacterFleetResponse roleString(String role) {

        this.role = role;
        return this;
    }

    public CharacterFleetResponse role(RoleEnum roleEnum) {

        this.roleEnum = roleEnum;
        return this;
    }

    /**
     * Member’s role in fleet
     * 
     * @return role
     **/
    @javax.annotation.Nonnull
    public RoleEnum getRole() {
        if (roleEnum == null) {
            roleEnum = RoleEnum.fromValue(role);
        }
        return roleEnum;
    }

    public String getRoleString() {
        return role;
    }

    public void setRole(RoleEnum roleEnum) {
        this.roleEnum = roleEnum;
    }

    public void setRoleString(String role) {
        this.role = role;
    }

    public CharacterFleetResponse squadId(Long squadId) {

        this.squadId = squadId;
        return this;
    }

    /**
     * ID of the squad the member is in. If not applicable, will be set to -1
     * 
     * @return squadId
     **/
    @javax.annotation.Nonnull
    public Long getSquadId() {
        return squadId;
    }

    public void setSquadId(Long squadId) {
        this.squadId = squadId;
    }

    public CharacterFleetResponse wingId(Long wingId) {

        this.wingId = wingId;
        return this;
    }

    /**
     * ID of the wing the member is in. If not applicable, will be set to -1
     * 
     * @return wingId
     **/
    @javax.annotation.Nonnull
    public Long getWingId() {
        return wingId;
    }

    public void setWingId(Long wingId) {
        this.wingId = wingId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterFleetResponse characterFleetResponse = (CharacterFleetResponse) o;
        return Objects.equals(this.fleetBossId, characterFleetResponse.fleetBossId)
                && Objects.equals(this.fleetId, characterFleetResponse.fleetId)
                && Objects.equals(this.role, characterFleetResponse.role)
                && Objects.equals(this.squadId, characterFleetResponse.squadId)
                && Objects.equals(this.wingId, characterFleetResponse.wingId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fleetBossId, fleetId, role, squadId, wingId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterFleetResponse {\n");
        sb.append("    fleetBossId: ").append(toIndentedString(fleetBossId)).append("\n");
        sb.append("    fleetId: ").append(toIndentedString(fleetId)).append("\n");
        sb.append("    role: ").append(toIndentedString(role)).append("\n");
        sb.append("    squadId: ").append(toIndentedString(squadId)).append("\n");
        sb.append("    wingId: ").append(toIndentedString(wingId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("fleet_boss_id");
        openapiFields.add("fleet_id");
        openapiFields.add("role");
        openapiFields.add("squad_id");
        openapiFields.add("wing_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("fleet_boss_id");
        openapiRequiredFields.add("fleet_id");
        openapiRequiredFields.add("role");
        openapiRequiredFields.add("squad_id");
        openapiRequiredFields.add("wing_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CharacterFleetResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CharacterFleetResponse.openapiRequiredFields.isEmpty()) { // has
                                                                           // required
                                                                           // fields
                                                                           // but
                                                                           // JSON
                                                                           // object
                                                                           // is
                                                                           // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CharacterFleetResponse is not found in the empty JSON string",
                        CharacterFleetResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CharacterFleetResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterFleetResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterFleetResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (!jsonObj.get("role").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `role` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("role").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterFleetResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterFleetResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterFleetResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterFleetResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterFleetResponse>() {
                @Override
                public void write(JsonWriter out, CharacterFleetResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterFleetResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterFleetResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterFleetResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterFleetResponse
     */
    public static CharacterFleetResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterFleetResponse.class);
    }

    /**
     * Convert an instance of CharacterFleetResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
