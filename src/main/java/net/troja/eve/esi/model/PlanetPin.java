/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.PlanetContent;
import net.troja.eve.esi.model.PlanetExtractorDetails;
import net.troja.eve.esi.model.PlanetFactoryDetails;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * pin object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PlanetPin implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CONTENTS = "contents";
    @SerializedName(SERIALIZED_NAME_CONTENTS)
    private List<PlanetContent> contents;

    public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiry_time";
    @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
    private OffsetDateTime expiryTime;

    public static final String SERIALIZED_NAME_EXTRACTOR_DETAILS = "extractor_details";
    @SerializedName(SERIALIZED_NAME_EXTRACTOR_DETAILS)
    private PlanetExtractorDetails extractorDetails;

    public static final String SERIALIZED_NAME_FACTORY_DETAILS = "factory_details";
    @SerializedName(SERIALIZED_NAME_FACTORY_DETAILS)
    private PlanetFactoryDetails factoryDetails;

    public static final String SERIALIZED_NAME_INSTALL_TIME = "install_time";
    @SerializedName(SERIALIZED_NAME_INSTALL_TIME)
    private OffsetDateTime installTime;

    public static final String SERIALIZED_NAME_LAST_CYCLE_START = "last_cycle_start";
    @SerializedName(SERIALIZED_NAME_LAST_CYCLE_START)
    private OffsetDateTime lastCycleStart;

    public static final String SERIALIZED_NAME_LATITUDE = "latitude";
    @SerializedName(SERIALIZED_NAME_LATITUDE)
    private Float latitude;

    public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
    @SerializedName(SERIALIZED_NAME_LONGITUDE)
    private Float longitude;

    public static final String SERIALIZED_NAME_PIN_ID = "pin_id";
    @SerializedName(SERIALIZED_NAME_PIN_ID)
    private Long pinId;

    public static final String SERIALIZED_NAME_SCHEMATIC_ID = "schematic_id";
    @SerializedName(SERIALIZED_NAME_SCHEMATIC_ID)
    private Integer schematicId;

    public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
    @SerializedName(SERIALIZED_NAME_TYPE_ID)
    private Integer typeId;

    public PlanetPin() {
    }

    public PlanetPin contents(List<PlanetContent> contents) {

        this.contents = contents;
        return this;
    }

    public PlanetPin addContentsItem(PlanetContent contentsItem) {
        if (this.contents == null) {
            this.contents = new ArrayList<>();
        }
        this.contents.add(contentsItem);
        return this;
    }

    /**
     * contents array
     * 
     * @return contents
     **/
    @javax.annotation.Nullable
    public List<PlanetContent> getContents() {
        return contents;
    }

    public void setContents(List<PlanetContent> contents) {
        this.contents = contents;
    }

    public PlanetPin expiryTime(OffsetDateTime expiryTime) {

        this.expiryTime = expiryTime;
        return this;
    }

    /**
     * expiry_time string
     * 
     * @return expiryTime
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getExpiryTime() {
        return expiryTime;
    }

    public void setExpiryTime(OffsetDateTime expiryTime) {
        this.expiryTime = expiryTime;
    }

    public PlanetPin extractorDetails(PlanetExtractorDetails extractorDetails) {

        this.extractorDetails = extractorDetails;
        return this;
    }

    /**
     * Get extractorDetails
     * 
     * @return extractorDetails
     **/
    @javax.annotation.Nullable
    public PlanetExtractorDetails getExtractorDetails() {
        return extractorDetails;
    }

    public void setExtractorDetails(PlanetExtractorDetails extractorDetails) {
        this.extractorDetails = extractorDetails;
    }

    public PlanetPin factoryDetails(PlanetFactoryDetails factoryDetails) {

        this.factoryDetails = factoryDetails;
        return this;
    }

    /**
     * Get factoryDetails
     * 
     * @return factoryDetails
     **/
    @javax.annotation.Nullable
    public PlanetFactoryDetails getFactoryDetails() {
        return factoryDetails;
    }

    public void setFactoryDetails(PlanetFactoryDetails factoryDetails) {
        this.factoryDetails = factoryDetails;
    }

    public PlanetPin installTime(OffsetDateTime installTime) {

        this.installTime = installTime;
        return this;
    }

    /**
     * install_time string
     * 
     * @return installTime
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getInstallTime() {
        return installTime;
    }

    public void setInstallTime(OffsetDateTime installTime) {
        this.installTime = installTime;
    }

    public PlanetPin lastCycleStart(OffsetDateTime lastCycleStart) {

        this.lastCycleStart = lastCycleStart;
        return this;
    }

    /**
     * last_cycle_start string
     * 
     * @return lastCycleStart
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getLastCycleStart() {
        return lastCycleStart;
    }

    public void setLastCycleStart(OffsetDateTime lastCycleStart) {
        this.lastCycleStart = lastCycleStart;
    }

    public PlanetPin latitude(Float latitude) {

        this.latitude = latitude;
        return this;
    }

    /**
     * latitude number
     * 
     * @return latitude
     **/
    @javax.annotation.Nonnull
    public Float getLatitude() {
        return latitude;
    }

    public void setLatitude(Float latitude) {
        this.latitude = latitude;
    }

    public PlanetPin longitude(Float longitude) {

        this.longitude = longitude;
        return this;
    }

    /**
     * longitude number
     * 
     * @return longitude
     **/
    @javax.annotation.Nonnull
    public Float getLongitude() {
        return longitude;
    }

    public void setLongitude(Float longitude) {
        this.longitude = longitude;
    }

    public PlanetPin pinId(Long pinId) {

        this.pinId = pinId;
        return this;
    }

    /**
     * pin_id integer
     * 
     * @return pinId
     **/
    @javax.annotation.Nonnull
    public Long getPinId() {
        return pinId;
    }

    public void setPinId(Long pinId) {
        this.pinId = pinId;
    }

    public PlanetPin schematicId(Integer schematicId) {

        this.schematicId = schematicId;
        return this;
    }

    /**
     * schematic_id integer
     * 
     * @return schematicId
     **/
    @javax.annotation.Nullable
    public Integer getSchematicId() {
        return schematicId;
    }

    public void setSchematicId(Integer schematicId) {
        this.schematicId = schematicId;
    }

    public PlanetPin typeId(Integer typeId) {

        this.typeId = typeId;
        return this;
    }

    /**
     * type_id integer
     * 
     * @return typeId
     **/
    @javax.annotation.Nonnull
    public Integer getTypeId() {
        return typeId;
    }

    public void setTypeId(Integer typeId) {
        this.typeId = typeId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PlanetPin planetPin = (PlanetPin) o;
        return Objects.equals(this.contents, planetPin.contents)
                && Objects.equals(this.expiryTime, planetPin.expiryTime)
                && Objects.equals(this.extractorDetails, planetPin.extractorDetails)
                && Objects.equals(this.factoryDetails, planetPin.factoryDetails)
                && Objects.equals(this.installTime, planetPin.installTime)
                && Objects.equals(this.lastCycleStart, planetPin.lastCycleStart)
                && Objects.equals(this.latitude, planetPin.latitude)
                && Objects.equals(this.longitude, planetPin.longitude) && Objects.equals(this.pinId, planetPin.pinId)
                && Objects.equals(this.schematicId, planetPin.schematicId)
                && Objects.equals(this.typeId, planetPin.typeId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(contents, expiryTime, extractorDetails, factoryDetails, installTime, lastCycleStart,
                latitude, longitude, pinId, schematicId, typeId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PlanetPin {\n");
        sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
        sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
        sb.append("    extractorDetails: ").append(toIndentedString(extractorDetails)).append("\n");
        sb.append("    factoryDetails: ").append(toIndentedString(factoryDetails)).append("\n");
        sb.append("    installTime: ").append(toIndentedString(installTime)).append("\n");
        sb.append("    lastCycleStart: ").append(toIndentedString(lastCycleStart)).append("\n");
        sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
        sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
        sb.append("    pinId: ").append(toIndentedString(pinId)).append("\n");
        sb.append("    schematicId: ").append(toIndentedString(schematicId)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("contents");
        openapiFields.add("expiry_time");
        openapiFields.add("extractor_details");
        openapiFields.add("factory_details");
        openapiFields.add("install_time");
        openapiFields.add("last_cycle_start");
        openapiFields.add("latitude");
        openapiFields.add("longitude");
        openapiFields.add("pin_id");
        openapiFields.add("schematic_id");
        openapiFields.add("type_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("latitude");
        openapiRequiredFields.add("longitude");
        openapiRequiredFields.add("pin_id");
        openapiRequiredFields.add("type_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to PlanetPin
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!PlanetPin.openapiRequiredFields.isEmpty()) { // has required
                                                              // fields but JSON
                                                              // object is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in PlanetPin is not found in the empty JSON string",
                        PlanetPin.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!PlanetPin.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format(
                        "The field `%s` in the JSON string is not defined in the `PlanetPin` properties. JSON: %s",
                        entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : PlanetPin.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (jsonObj.get("contents") != null && !jsonObj.get("contents").isJsonNull()) {
            JsonArray jsonArraycontents = jsonObj.getAsJsonArray("contents");
            if (jsonArraycontents != null) {
                // ensure the json data is an array
                if (!jsonObj.get("contents").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `contents` to be an array in the JSON string but got `%s`", jsonObj
                                    .get("contents").toString()));
                }

                // validate the optional field `contents` (array)
                for (int i = 0; i < jsonArraycontents.size(); i++) {
                    PlanetContent.validateJsonObject(jsonArraycontents.get(i).getAsJsonObject());
                };
            }
        }
        // validate the optional field `extractor_details`
        if (jsonObj.get("extractor_details") != null && !jsonObj.get("extractor_details").isJsonNull()) {
            PlanetExtractorDetails.validateJsonObject(jsonObj.getAsJsonObject("extractor_details"));
        }
        // validate the optional field `factory_details`
        if (jsonObj.get("factory_details") != null && !jsonObj.get("factory_details").isJsonNull()) {
            PlanetFactoryDetails.validateJsonObject(jsonObj.getAsJsonObject("factory_details"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PlanetPin.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PlanetPin' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PlanetPin> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(PlanetPin.class));

            return (TypeAdapter<T>) new TypeAdapter<PlanetPin>() {
                @Override
                public void write(JsonWriter out, PlanetPin value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public PlanetPin read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of PlanetPin given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of PlanetPin
     * @throws IOException
     *             if the JSON string is invalid with respect to PlanetPin
     */
    public static PlanetPin fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PlanetPin.class);
    }

    /**
     * Convert an instance of PlanetPin to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
