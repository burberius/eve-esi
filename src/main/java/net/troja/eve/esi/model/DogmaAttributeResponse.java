/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DogmaAttributeResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ATTRIBUTE_ID = "attribute_id";
    @SerializedName(SERIALIZED_NAME_ATTRIBUTE_ID)
    private Integer attributeId;

    public static final String SERIALIZED_NAME_DEFAULT_VALUE = "default_value";
    @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
    private Float defaultValue;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
    @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
    private String displayName;

    public static final String SERIALIZED_NAME_HIGH_IS_GOOD = "high_is_good";
    @SerializedName(SERIALIZED_NAME_HIGH_IS_GOOD)
    private Boolean highIsGood;

    public static final String SERIALIZED_NAME_ICON_ID = "icon_id";
    @SerializedName(SERIALIZED_NAME_ICON_ID)
    private Integer iconId;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_PUBLISHED = "published";
    @SerializedName(SERIALIZED_NAME_PUBLISHED)
    private Boolean published;

    public static final String SERIALIZED_NAME_STACKABLE = "stackable";
    @SerializedName(SERIALIZED_NAME_STACKABLE)
    private Boolean stackable;

    public static final String SERIALIZED_NAME_UNIT_ID = "unit_id";
    @SerializedName(SERIALIZED_NAME_UNIT_ID)
    private Integer unitId;

    public DogmaAttributeResponse() {
    }

    public DogmaAttributeResponse attributeId(Integer attributeId) {

        this.attributeId = attributeId;
        return this;
    }

    /**
     * attribute_id integer
     * 
     * @return attributeId
     **/
    @javax.annotation.Nonnull
    public Integer getAttributeId() {
        return attributeId;
    }

    public void setAttributeId(Integer attributeId) {
        this.attributeId = attributeId;
    }

    public DogmaAttributeResponse defaultValue(Float defaultValue) {

        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * default_value number
     * 
     * @return defaultValue
     **/
    @javax.annotation.Nullable
    public Float getDefaultValue() {
        return defaultValue;
    }

    public void setDefaultValue(Float defaultValue) {
        this.defaultValue = defaultValue;
    }

    public DogmaAttributeResponse description(String description) {

        this.description = description;
        return this;
    }

    /**
     * description string
     * 
     * @return description
     **/
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public DogmaAttributeResponse displayName(String displayName) {

        this.displayName = displayName;
        return this;
    }

    /**
     * display_name string
     * 
     * @return displayName
     **/
    @javax.annotation.Nullable
    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public DogmaAttributeResponse highIsGood(Boolean highIsGood) {

        this.highIsGood = highIsGood;
        return this;
    }

    /**
     * high_is_good boolean
     * 
     * @return highIsGood
     **/
    @javax.annotation.Nullable
    public Boolean getHighIsGood() {
        return highIsGood;
    }

    public void setHighIsGood(Boolean highIsGood) {
        this.highIsGood = highIsGood;
    }

    public DogmaAttributeResponse iconId(Integer iconId) {

        this.iconId = iconId;
        return this;
    }

    /**
     * icon_id integer
     * 
     * @return iconId
     **/
    @javax.annotation.Nullable
    public Integer getIconId() {
        return iconId;
    }

    public void setIconId(Integer iconId) {
        this.iconId = iconId;
    }

    public DogmaAttributeResponse name(String name) {

        this.name = name;
        return this;
    }

    /**
     * name string
     * 
     * @return name
     **/
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public DogmaAttributeResponse published(Boolean published) {

        this.published = published;
        return this;
    }

    /**
     * published boolean
     * 
     * @return published
     **/
    @javax.annotation.Nullable
    public Boolean getPublished() {
        return published;
    }

    public void setPublished(Boolean published) {
        this.published = published;
    }

    public DogmaAttributeResponse stackable(Boolean stackable) {

        this.stackable = stackable;
        return this;
    }

    /**
     * stackable boolean
     * 
     * @return stackable
     **/
    @javax.annotation.Nullable
    public Boolean getStackable() {
        return stackable;
    }

    public void setStackable(Boolean stackable) {
        this.stackable = stackable;
    }

    public DogmaAttributeResponse unitId(Integer unitId) {

        this.unitId = unitId;
        return this;
    }

    /**
     * unit_id integer
     * 
     * @return unitId
     **/
    @javax.annotation.Nullable
    public Integer getUnitId() {
        return unitId;
    }

    public void setUnitId(Integer unitId) {
        this.unitId = unitId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DogmaAttributeResponse dogmaAttributeResponse = (DogmaAttributeResponse) o;
        return Objects.equals(this.attributeId, dogmaAttributeResponse.attributeId)
                && Objects.equals(this.defaultValue, dogmaAttributeResponse.defaultValue)
                && Objects.equals(this.description, dogmaAttributeResponse.description)
                && Objects.equals(this.displayName, dogmaAttributeResponse.displayName)
                && Objects.equals(this.highIsGood, dogmaAttributeResponse.highIsGood)
                && Objects.equals(this.iconId, dogmaAttributeResponse.iconId)
                && Objects.equals(this.name, dogmaAttributeResponse.name)
                && Objects.equals(this.published, dogmaAttributeResponse.published)
                && Objects.equals(this.stackable, dogmaAttributeResponse.stackable)
                && Objects.equals(this.unitId, dogmaAttributeResponse.unitId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attributeId, defaultValue, description, displayName, highIsGood, iconId, name, published,
                stackable, unitId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DogmaAttributeResponse {\n");
        sb.append("    attributeId: ").append(toIndentedString(attributeId)).append("\n");
        sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
        sb.append("    highIsGood: ").append(toIndentedString(highIsGood)).append("\n");
        sb.append("    iconId: ").append(toIndentedString(iconId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    published: ").append(toIndentedString(published)).append("\n");
        sb.append("    stackable: ").append(toIndentedString(stackable)).append("\n");
        sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("attribute_id");
        openapiFields.add("default_value");
        openapiFields.add("description");
        openapiFields.add("display_name");
        openapiFields.add("high_is_good");
        openapiFields.add("icon_id");
        openapiFields.add("name");
        openapiFields.add("published");
        openapiFields.add("stackable");
        openapiFields.add("unit_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("attribute_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             DogmaAttributeResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!DogmaAttributeResponse.openapiRequiredFields.isEmpty()) { // has
                                                                           // required
                                                                           // fields
                                                                           // but
                                                                           // JSON
                                                                           // object
                                                                           // is
                                                                           // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in DogmaAttributeResponse is not found in the empty JSON string",
                        DogmaAttributeResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!DogmaAttributeResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `DogmaAttributeResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : DogmaAttributeResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("description").toString()));
        }
        if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull())
                && !jsonObj.get("display_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("display_name").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DogmaAttributeResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'DogmaAttributeResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DogmaAttributeResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(DogmaAttributeResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<DogmaAttributeResponse>() {
                @Override
                public void write(JsonWriter out, DogmaAttributeResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public DogmaAttributeResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of DogmaAttributeResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of DogmaAttributeResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             DogmaAttributeResponse
     */
    public static DogmaAttributeResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DogmaAttributeResponse.class);
    }

    /**
     * Convert an instance of DogmaAttributeResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
