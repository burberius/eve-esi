/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CorporationTitlesResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    /**
     * grantable_role string
     */
    @JsonAdapter(GrantableRolesEnum.Adapter.class)
    public enum GrantableRolesEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        GrantableRolesEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static GrantableRolesEnum fromValue(String value) {
            for (GrantableRolesEnum b : GrantableRolesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<GrantableRolesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final GrantableRolesEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public GrantableRolesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return GrantableRolesEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_GRANTABLE_ROLES = "grantable_roles";
    @SerializedName(SERIALIZED_NAME_GRANTABLE_ROLES)
    private List<String> grantableRoles;
    private List<GrantableRolesEnum> grantableRolesEnum;

    /**
     * grantable_roles_at_base string
     */
    @JsonAdapter(GrantableRolesAtBaseEnum.Adapter.class)
    public enum GrantableRolesAtBaseEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        GrantableRolesAtBaseEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static GrantableRolesAtBaseEnum fromValue(String value) {
            for (GrantableRolesAtBaseEnum b : GrantableRolesAtBaseEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<GrantableRolesAtBaseEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final GrantableRolesAtBaseEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public GrantableRolesAtBaseEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return GrantableRolesAtBaseEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_GRANTABLE_ROLES_AT_BASE = "grantable_roles_at_base";
    @SerializedName(SERIALIZED_NAME_GRANTABLE_ROLES_AT_BASE)
    private List<String> grantableRolesAtBase;
    private List<GrantableRolesAtBaseEnum> grantableRolesAtBaseEnum;

    /**
     * grantable_roles_at_hq string
     */
    @JsonAdapter(GrantableRolesAtHqEnum.Adapter.class)
    public enum GrantableRolesAtHqEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        GrantableRolesAtHqEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static GrantableRolesAtHqEnum fromValue(String value) {
            for (GrantableRolesAtHqEnum b : GrantableRolesAtHqEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<GrantableRolesAtHqEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final GrantableRolesAtHqEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public GrantableRolesAtHqEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return GrantableRolesAtHqEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_GRANTABLE_ROLES_AT_HQ = "grantable_roles_at_hq";
    @SerializedName(SERIALIZED_NAME_GRANTABLE_ROLES_AT_HQ)
    private List<String> grantableRolesAtHq;
    private List<GrantableRolesAtHqEnum> grantableRolesAtHqEnum;

    /**
     * grantable_roles_at_other string
     */
    @JsonAdapter(GrantableRolesAtOtherEnum.Adapter.class)
    public enum GrantableRolesAtOtherEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        GrantableRolesAtOtherEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static GrantableRolesAtOtherEnum fromValue(String value) {
            for (GrantableRolesAtOtherEnum b : GrantableRolesAtOtherEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<GrantableRolesAtOtherEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final GrantableRolesAtOtherEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public GrantableRolesAtOtherEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return GrantableRolesAtOtherEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_GRANTABLE_ROLES_AT_OTHER = "grantable_roles_at_other";
    @SerializedName(SERIALIZED_NAME_GRANTABLE_ROLES_AT_OTHER)
    private List<String> grantableRolesAtOther;
    private List<GrantableRolesAtOtherEnum> grantableRolesAtOtherEnum;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    /**
     * role string
     */
    @JsonAdapter(RolesEnum.Adapter.class)
    public enum RolesEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        RolesEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RolesEnum fromValue(String value) {
            for (RolesEnum b : RolesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RolesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RolesEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RolesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RolesEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ROLES = "roles";
    @SerializedName(SERIALIZED_NAME_ROLES)
    private List<String> roles;
    private List<RolesEnum> rolesEnum;

    /**
     * roles_at_base string
     */
    @JsonAdapter(RolesAtBaseEnum.Adapter.class)
    public enum RolesAtBaseEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        RolesAtBaseEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RolesAtBaseEnum fromValue(String value) {
            for (RolesAtBaseEnum b : RolesAtBaseEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RolesAtBaseEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RolesAtBaseEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RolesAtBaseEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RolesAtBaseEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ROLES_AT_BASE = "roles_at_base";
    @SerializedName(SERIALIZED_NAME_ROLES_AT_BASE)
    private List<String> rolesAtBase;
    private List<RolesAtBaseEnum> rolesAtBaseEnum;

    /**
     * roles_at_hq string
     */
    @JsonAdapter(RolesAtHqEnum.Adapter.class)
    public enum RolesAtHqEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        RolesAtHqEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RolesAtHqEnum fromValue(String value) {
            for (RolesAtHqEnum b : RolesAtHqEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RolesAtHqEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RolesAtHqEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RolesAtHqEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RolesAtHqEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ROLES_AT_HQ = "roles_at_hq";
    @SerializedName(SERIALIZED_NAME_ROLES_AT_HQ)
    private List<String> rolesAtHq;
    private List<RolesAtHqEnum> rolesAtHqEnum;

    /**
     * roles_at_other string
     */
    @JsonAdapter(RolesAtOtherEnum.Adapter.class)
    public enum RolesAtOtherEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        RolesAtOtherEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RolesAtOtherEnum fromValue(String value) {
            for (RolesAtOtherEnum b : RolesAtOtherEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RolesAtOtherEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RolesAtOtherEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RolesAtOtherEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RolesAtOtherEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ROLES_AT_OTHER = "roles_at_other";
    @SerializedName(SERIALIZED_NAME_ROLES_AT_OTHER)
    private List<String> rolesAtOther;
    private List<RolesAtOtherEnum> rolesAtOtherEnum;

    public static final String SERIALIZED_NAME_TITLE_ID = "title_id";
    @SerializedName(SERIALIZED_NAME_TITLE_ID)
    private Integer titleId;

    public CorporationTitlesResponse() {
    }

    public CorporationTitlesResponse grantableRolesString(List<String> grantableRoles) {

        this.grantableRoles = grantableRoles;
        return this;
    }

    public CorporationTitlesResponse grantableRoles(List<GrantableRolesEnum> grantableRolesEnum) {

        this.grantableRolesEnum = grantableRolesEnum;
        return this;
    }

    public CorporationTitlesResponse addGrantableRolesItem(String grantableRolesItem) {
        if (this.grantableRoles == null) {
            this.grantableRoles = new ArrayList<>();
        }
        this.grantableRoles.add(grantableRolesItem);
        return this;
    }

    /**
     * grantable_roles array
     * 
     * @return grantableRoles
     **/
    @javax.annotation.Nullable
    public List<GrantableRolesEnum> getGrantableRoles() {
        if (grantableRolesEnum == null) {
            grantableRolesEnum = new ArrayList<>();
            for (String value : grantableRoles) {
                GrantableRolesEnum enumValue = GrantableRolesEnum.fromValue(value);
                if (enumValue != null) {
                    grantableRolesEnum.add(enumValue);
                }
            }
        }
        return grantableRolesEnum;
    }

    public List<String> getGrantableRolesString() {
        return grantableRoles;
    }

    public void setGrantableRoles(List<GrantableRolesEnum> grantableRolesEnum) {
        this.grantableRolesEnum = grantableRolesEnum;
    }

    public void setGrantableRolesString(List<String> grantableRoles) {
        this.grantableRoles = grantableRoles;
    }

    public CorporationTitlesResponse grantableRolesAtBaseString(List<String> grantableRolesAtBase) {

        this.grantableRolesAtBase = grantableRolesAtBase;
        return this;
    }

    public CorporationTitlesResponse grantableRolesAtBase(List<GrantableRolesAtBaseEnum> grantableRolesAtBaseEnum) {

        this.grantableRolesAtBaseEnum = grantableRolesAtBaseEnum;
        return this;
    }

    public CorporationTitlesResponse addGrantableRolesAtBaseItem(String grantableRolesAtBaseItem) {
        if (this.grantableRolesAtBase == null) {
            this.grantableRolesAtBase = new ArrayList<>();
        }
        this.grantableRolesAtBase.add(grantableRolesAtBaseItem);
        return this;
    }

    /**
     * grantable_roles_at_base array
     * 
     * @return grantableRolesAtBase
     **/
    @javax.annotation.Nullable
    public List<GrantableRolesAtBaseEnum> getGrantableRolesAtBase() {
        if (grantableRolesAtBaseEnum == null) {
            grantableRolesAtBaseEnum = new ArrayList<>();
            for (String value : grantableRolesAtBase) {
                GrantableRolesAtBaseEnum enumValue = GrantableRolesAtBaseEnum.fromValue(value);
                if (enumValue != null) {
                    grantableRolesAtBaseEnum.add(enumValue);
                }
            }
        }
        return grantableRolesAtBaseEnum;
    }

    public List<String> getGrantableRolesAtBaseString() {
        return grantableRolesAtBase;
    }

    public void setGrantableRolesAtBase(List<GrantableRolesAtBaseEnum> grantableRolesAtBaseEnum) {
        this.grantableRolesAtBaseEnum = grantableRolesAtBaseEnum;
    }

    public void setGrantableRolesAtBaseString(List<String> grantableRolesAtBase) {
        this.grantableRolesAtBase = grantableRolesAtBase;
    }

    public CorporationTitlesResponse grantableRolesAtHqString(List<String> grantableRolesAtHq) {

        this.grantableRolesAtHq = grantableRolesAtHq;
        return this;
    }

    public CorporationTitlesResponse grantableRolesAtHq(List<GrantableRolesAtHqEnum> grantableRolesAtHqEnum) {

        this.grantableRolesAtHqEnum = grantableRolesAtHqEnum;
        return this;
    }

    public CorporationTitlesResponse addGrantableRolesAtHqItem(String grantableRolesAtHqItem) {
        if (this.grantableRolesAtHq == null) {
            this.grantableRolesAtHq = new ArrayList<>();
        }
        this.grantableRolesAtHq.add(grantableRolesAtHqItem);
        return this;
    }

    /**
     * grantable_roles_at_hq array
     * 
     * @return grantableRolesAtHq
     **/
    @javax.annotation.Nullable
    public List<GrantableRolesAtHqEnum> getGrantableRolesAtHq() {
        if (grantableRolesAtHqEnum == null) {
            grantableRolesAtHqEnum = new ArrayList<>();
            for (String value : grantableRolesAtHq) {
                GrantableRolesAtHqEnum enumValue = GrantableRolesAtHqEnum.fromValue(value);
                if (enumValue != null) {
                    grantableRolesAtHqEnum.add(enumValue);
                }
            }
        }
        return grantableRolesAtHqEnum;
    }

    public List<String> getGrantableRolesAtHqString() {
        return grantableRolesAtHq;
    }

    public void setGrantableRolesAtHq(List<GrantableRolesAtHqEnum> grantableRolesAtHqEnum) {
        this.grantableRolesAtHqEnum = grantableRolesAtHqEnum;
    }

    public void setGrantableRolesAtHqString(List<String> grantableRolesAtHq) {
        this.grantableRolesAtHq = grantableRolesAtHq;
    }

    public CorporationTitlesResponse grantableRolesAtOtherString(List<String> grantableRolesAtOther) {

        this.grantableRolesAtOther = grantableRolesAtOther;
        return this;
    }

    public CorporationTitlesResponse grantableRolesAtOther(List<GrantableRolesAtOtherEnum> grantableRolesAtOtherEnum) {

        this.grantableRolesAtOtherEnum = grantableRolesAtOtherEnum;
        return this;
    }

    public CorporationTitlesResponse addGrantableRolesAtOtherItem(String grantableRolesAtOtherItem) {
        if (this.grantableRolesAtOther == null) {
            this.grantableRolesAtOther = new ArrayList<>();
        }
        this.grantableRolesAtOther.add(grantableRolesAtOtherItem);
        return this;
    }

    /**
     * grantable_roles_at_other array
     * 
     * @return grantableRolesAtOther
     **/
    @javax.annotation.Nullable
    public List<GrantableRolesAtOtherEnum> getGrantableRolesAtOther() {
        if (grantableRolesAtOtherEnum == null) {
            grantableRolesAtOtherEnum = new ArrayList<>();
            for (String value : grantableRolesAtOther) {
                GrantableRolesAtOtherEnum enumValue = GrantableRolesAtOtherEnum.fromValue(value);
                if (enumValue != null) {
                    grantableRolesAtOtherEnum.add(enumValue);
                }
            }
        }
        return grantableRolesAtOtherEnum;
    }

    public List<String> getGrantableRolesAtOtherString() {
        return grantableRolesAtOther;
    }

    public void setGrantableRolesAtOther(List<GrantableRolesAtOtherEnum> grantableRolesAtOtherEnum) {
        this.grantableRolesAtOtherEnum = grantableRolesAtOtherEnum;
    }

    public void setGrantableRolesAtOtherString(List<String> grantableRolesAtOther) {
        this.grantableRolesAtOther = grantableRolesAtOther;
    }

    public CorporationTitlesResponse name(String name) {

        this.name = name;
        return this;
    }

    /**
     * name string
     * 
     * @return name
     **/
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CorporationTitlesResponse rolesString(List<String> roles) {

        this.roles = roles;
        return this;
    }

    public CorporationTitlesResponse roles(List<RolesEnum> rolesEnum) {

        this.rolesEnum = rolesEnum;
        return this;
    }

    public CorporationTitlesResponse addRolesItem(String rolesItem) {
        if (this.roles == null) {
            this.roles = new ArrayList<>();
        }
        this.roles.add(rolesItem);
        return this;
    }

    /**
     * roles array
     * 
     * @return roles
     **/
    @javax.annotation.Nullable
    public List<RolesEnum> getRoles() {
        if (rolesEnum == null) {
            rolesEnum = new ArrayList<>();
            for (String value : roles) {
                RolesEnum enumValue = RolesEnum.fromValue(value);
                if (enumValue != null) {
                    rolesEnum.add(enumValue);
                }
            }
        }
        return rolesEnum;
    }

    public List<String> getRolesString() {
        return roles;
    }

    public void setRoles(List<RolesEnum> rolesEnum) {
        this.rolesEnum = rolesEnum;
    }

    public void setRolesString(List<String> roles) {
        this.roles = roles;
    }

    public CorporationTitlesResponse rolesAtBaseString(List<String> rolesAtBase) {

        this.rolesAtBase = rolesAtBase;
        return this;
    }

    public CorporationTitlesResponse rolesAtBase(List<RolesAtBaseEnum> rolesAtBaseEnum) {

        this.rolesAtBaseEnum = rolesAtBaseEnum;
        return this;
    }

    public CorporationTitlesResponse addRolesAtBaseItem(String rolesAtBaseItem) {
        if (this.rolesAtBase == null) {
            this.rolesAtBase = new ArrayList<>();
        }
        this.rolesAtBase.add(rolesAtBaseItem);
        return this;
    }

    /**
     * roles_at_base array
     * 
     * @return rolesAtBase
     **/
    @javax.annotation.Nullable
    public List<RolesAtBaseEnum> getRolesAtBase() {
        if (rolesAtBaseEnum == null) {
            rolesAtBaseEnum = new ArrayList<>();
            for (String value : rolesAtBase) {
                RolesAtBaseEnum enumValue = RolesAtBaseEnum.fromValue(value);
                if (enumValue != null) {
                    rolesAtBaseEnum.add(enumValue);
                }
            }
        }
        return rolesAtBaseEnum;
    }

    public List<String> getRolesAtBaseString() {
        return rolesAtBase;
    }

    public void setRolesAtBase(List<RolesAtBaseEnum> rolesAtBaseEnum) {
        this.rolesAtBaseEnum = rolesAtBaseEnum;
    }

    public void setRolesAtBaseString(List<String> rolesAtBase) {
        this.rolesAtBase = rolesAtBase;
    }

    public CorporationTitlesResponse rolesAtHqString(List<String> rolesAtHq) {

        this.rolesAtHq = rolesAtHq;
        return this;
    }

    public CorporationTitlesResponse rolesAtHq(List<RolesAtHqEnum> rolesAtHqEnum) {

        this.rolesAtHqEnum = rolesAtHqEnum;
        return this;
    }

    public CorporationTitlesResponse addRolesAtHqItem(String rolesAtHqItem) {
        if (this.rolesAtHq == null) {
            this.rolesAtHq = new ArrayList<>();
        }
        this.rolesAtHq.add(rolesAtHqItem);
        return this;
    }

    /**
     * roles_at_hq array
     * 
     * @return rolesAtHq
     **/
    @javax.annotation.Nullable
    public List<RolesAtHqEnum> getRolesAtHq() {
        if (rolesAtHqEnum == null) {
            rolesAtHqEnum = new ArrayList<>();
            for (String value : rolesAtHq) {
                RolesAtHqEnum enumValue = RolesAtHqEnum.fromValue(value);
                if (enumValue != null) {
                    rolesAtHqEnum.add(enumValue);
                }
            }
        }
        return rolesAtHqEnum;
    }

    public List<String> getRolesAtHqString() {
        return rolesAtHq;
    }

    public void setRolesAtHq(List<RolesAtHqEnum> rolesAtHqEnum) {
        this.rolesAtHqEnum = rolesAtHqEnum;
    }

    public void setRolesAtHqString(List<String> rolesAtHq) {
        this.rolesAtHq = rolesAtHq;
    }

    public CorporationTitlesResponse rolesAtOtherString(List<String> rolesAtOther) {

        this.rolesAtOther = rolesAtOther;
        return this;
    }

    public CorporationTitlesResponse rolesAtOther(List<RolesAtOtherEnum> rolesAtOtherEnum) {

        this.rolesAtOtherEnum = rolesAtOtherEnum;
        return this;
    }

    public CorporationTitlesResponse addRolesAtOtherItem(String rolesAtOtherItem) {
        if (this.rolesAtOther == null) {
            this.rolesAtOther = new ArrayList<>();
        }
        this.rolesAtOther.add(rolesAtOtherItem);
        return this;
    }

    /**
     * roles_at_other array
     * 
     * @return rolesAtOther
     **/
    @javax.annotation.Nullable
    public List<RolesAtOtherEnum> getRolesAtOther() {
        if (rolesAtOtherEnum == null) {
            rolesAtOtherEnum = new ArrayList<>();
            for (String value : rolesAtOther) {
                RolesAtOtherEnum enumValue = RolesAtOtherEnum.fromValue(value);
                if (enumValue != null) {
                    rolesAtOtherEnum.add(enumValue);
                }
            }
        }
        return rolesAtOtherEnum;
    }

    public List<String> getRolesAtOtherString() {
        return rolesAtOther;
    }

    public void setRolesAtOther(List<RolesAtOtherEnum> rolesAtOtherEnum) {
        this.rolesAtOtherEnum = rolesAtOtherEnum;
    }

    public void setRolesAtOtherString(List<String> rolesAtOther) {
        this.rolesAtOther = rolesAtOther;
    }

    public CorporationTitlesResponse titleId(Integer titleId) {

        this.titleId = titleId;
        return this;
    }

    /**
     * title_id integer
     * 
     * @return titleId
     **/
    @javax.annotation.Nullable
    public Integer getTitleId() {
        return titleId;
    }

    public void setTitleId(Integer titleId) {
        this.titleId = titleId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationTitlesResponse corporationTitlesResponse = (CorporationTitlesResponse) o;
        return Objects.equals(this.grantableRoles, corporationTitlesResponse.grantableRoles)
                && Objects.equals(this.grantableRolesAtBase, corporationTitlesResponse.grantableRolesAtBase)
                && Objects.equals(this.grantableRolesAtHq, corporationTitlesResponse.grantableRolesAtHq)
                && Objects.equals(this.grantableRolesAtOther, corporationTitlesResponse.grantableRolesAtOther)
                && Objects.equals(this.name, corporationTitlesResponse.name)
                && Objects.equals(this.roles, corporationTitlesResponse.roles)
                && Objects.equals(this.rolesAtBase, corporationTitlesResponse.rolesAtBase)
                && Objects.equals(this.rolesAtHq, corporationTitlesResponse.rolesAtHq)
                && Objects.equals(this.rolesAtOther, corporationTitlesResponse.rolesAtOther)
                && Objects.equals(this.titleId, corporationTitlesResponse.titleId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(grantableRoles, grantableRolesAtBase, grantableRolesAtHq, grantableRolesAtOther, name,
                roles, rolesAtBase, rolesAtHq, rolesAtOther, titleId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationTitlesResponse {\n");
        sb.append("    grantableRoles: ").append(toIndentedString(grantableRoles)).append("\n");
        sb.append("    grantableRolesAtBase: ").append(toIndentedString(grantableRolesAtBase)).append("\n");
        sb.append("    grantableRolesAtHq: ").append(toIndentedString(grantableRolesAtHq)).append("\n");
        sb.append("    grantableRolesAtOther: ").append(toIndentedString(grantableRolesAtOther)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
        sb.append("    rolesAtBase: ").append(toIndentedString(rolesAtBase)).append("\n");
        sb.append("    rolesAtHq: ").append(toIndentedString(rolesAtHq)).append("\n");
        sb.append("    rolesAtOther: ").append(toIndentedString(rolesAtOther)).append("\n");
        sb.append("    titleId: ").append(toIndentedString(titleId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("grantable_roles");
        openapiFields.add("grantable_roles_at_base");
        openapiFields.add("grantable_roles_at_hq");
        openapiFields.add("grantable_roles_at_other");
        openapiFields.add("name");
        openapiFields.add("roles");
        openapiFields.add("roles_at_base");
        openapiFields.add("roles_at_hq");
        openapiFields.add("roles_at_other");
        openapiFields.add("title_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CorporationTitlesResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CorporationTitlesResponse.openapiRequiredFields.isEmpty()) { // has
                                                                              // required
                                                                              // fields
                                                                              // but
                                                                              // JSON
                                                                              // object
                                                                              // is
                                                                              // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CorporationTitlesResponse is not found in the empty JSON string",
                        CorporationTitlesResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CorporationTitlesResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationTitlesResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("grantable_roles") != null && !jsonObj.get("grantable_roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `grantable_roles` to be an array in the JSON string but got `%s`",
                    jsonObj.get("grantable_roles").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("grantable_roles_at_base") != null && !jsonObj.get("grantable_roles_at_base").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `grantable_roles_at_base` to be an array in the JSON string but got `%s`",
                    jsonObj.get("grantable_roles_at_base").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("grantable_roles_at_hq") != null && !jsonObj.get("grantable_roles_at_hq").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `grantable_roles_at_hq` to be an array in the JSON string but got `%s`",
                    jsonObj.get("grantable_roles_at_hq").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("grantable_roles_at_other") != null && !jsonObj.get("grantable_roles_at_other").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `grantable_roles_at_other` to be an array in the JSON string but got `%s`",
                    jsonObj.get("grantable_roles_at_other").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("name").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles")
                            .toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("roles_at_base") != null && !jsonObj.get("roles_at_base").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `roles_at_base` to be an array in the JSON string but got `%s`",
                    jsonObj.get("roles_at_base").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("roles_at_hq") != null && !jsonObj.get("roles_at_hq").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `roles_at_hq` to be an array in the JSON string but got `%s`",
                    jsonObj.get("roles_at_hq").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("roles_at_other") != null && !jsonObj.get("roles_at_other").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `roles_at_other` to be an array in the JSON string but got `%s`",
                    jsonObj.get("roles_at_other").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationTitlesResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationTitlesResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationTitlesResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationTitlesResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationTitlesResponse>() {
                @Override
                public void write(JsonWriter out, CorporationTitlesResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationTitlesResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationTitlesResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationTitlesResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationTitlesResponse
     */
    public static CorporationTitlesResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationTitlesResponse.class);
    }

    /**
     * Convert an instance of CorporationTitlesResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
