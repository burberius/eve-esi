/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.TypeDogmaAttribute;
import net.troja.eve.esi.model.TypeDogmaEffect;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TypeResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CAPACITY = "capacity";
    @SerializedName(SERIALIZED_NAME_CAPACITY)
    private Float capacity;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_DOGMA_ATTRIBUTES = "dogma_attributes";
    @SerializedName(SERIALIZED_NAME_DOGMA_ATTRIBUTES)
    private List<TypeDogmaAttribute> dogmaAttributes;

    public static final String SERIALIZED_NAME_DOGMA_EFFECTS = "dogma_effects";
    @SerializedName(SERIALIZED_NAME_DOGMA_EFFECTS)
    private List<TypeDogmaEffect> dogmaEffects;

    public static final String SERIALIZED_NAME_GRAPHIC_ID = "graphic_id";
    @SerializedName(SERIALIZED_NAME_GRAPHIC_ID)
    private Integer graphicId;

    public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
    @SerializedName(SERIALIZED_NAME_GROUP_ID)
    private Integer groupId;

    public static final String SERIALIZED_NAME_ICON_ID = "icon_id";
    @SerializedName(SERIALIZED_NAME_ICON_ID)
    private Integer iconId;

    public static final String SERIALIZED_NAME_MARKET_GROUP_ID = "market_group_id";
    @SerializedName(SERIALIZED_NAME_MARKET_GROUP_ID)
    private Integer marketGroupId;

    public static final String SERIALIZED_NAME_MASS = "mass";
    @SerializedName(SERIALIZED_NAME_MASS)
    private Float mass;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_PACKAGED_VOLUME = "packaged_volume";
    @SerializedName(SERIALIZED_NAME_PACKAGED_VOLUME)
    private Float packagedVolume;

    public static final String SERIALIZED_NAME_PORTION_SIZE = "portion_size";
    @SerializedName(SERIALIZED_NAME_PORTION_SIZE)
    private Integer portionSize;

    public static final String SERIALIZED_NAME_PUBLISHED = "published";
    @SerializedName(SERIALIZED_NAME_PUBLISHED)
    private Boolean published;

    public static final String SERIALIZED_NAME_RADIUS = "radius";
    @SerializedName(SERIALIZED_NAME_RADIUS)
    private Float radius;

    public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
    @SerializedName(SERIALIZED_NAME_TYPE_ID)
    private Integer typeId;

    public static final String SERIALIZED_NAME_VOLUME = "volume";
    @SerializedName(SERIALIZED_NAME_VOLUME)
    private Float volume;

    public TypeResponse() {
    }

    public TypeResponse capacity(Float capacity) {

        this.capacity = capacity;
        return this;
    }

    /**
     * capacity number
     * 
     * @return capacity
     **/
    @javax.annotation.Nullable
    public Float getCapacity() {
        return capacity;
    }

    public void setCapacity(Float capacity) {
        this.capacity = capacity;
    }

    public TypeResponse description(String description) {

        this.description = description;
        return this;
    }

    /**
     * description string
     * 
     * @return description
     **/
    @javax.annotation.Nonnull
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public TypeResponse dogmaAttributes(List<TypeDogmaAttribute> dogmaAttributes) {

        this.dogmaAttributes = dogmaAttributes;
        return this;
    }

    public TypeResponse addDogmaAttributesItem(TypeDogmaAttribute dogmaAttributesItem) {
        if (this.dogmaAttributes == null) {
            this.dogmaAttributes = new ArrayList<>();
        }
        this.dogmaAttributes.add(dogmaAttributesItem);
        return this;
    }

    /**
     * dogma_attributes array
     * 
     * @return dogmaAttributes
     **/
    @javax.annotation.Nullable
    public List<TypeDogmaAttribute> getDogmaAttributes() {
        return dogmaAttributes;
    }

    public void setDogmaAttributes(List<TypeDogmaAttribute> dogmaAttributes) {
        this.dogmaAttributes = dogmaAttributes;
    }

    public TypeResponse dogmaEffects(List<TypeDogmaEffect> dogmaEffects) {

        this.dogmaEffects = dogmaEffects;
        return this;
    }

    public TypeResponse addDogmaEffectsItem(TypeDogmaEffect dogmaEffectsItem) {
        if (this.dogmaEffects == null) {
            this.dogmaEffects = new ArrayList<>();
        }
        this.dogmaEffects.add(dogmaEffectsItem);
        return this;
    }

    /**
     * dogma_effects array
     * 
     * @return dogmaEffects
     **/
    @javax.annotation.Nullable
    public List<TypeDogmaEffect> getDogmaEffects() {
        return dogmaEffects;
    }

    public void setDogmaEffects(List<TypeDogmaEffect> dogmaEffects) {
        this.dogmaEffects = dogmaEffects;
    }

    public TypeResponse graphicId(Integer graphicId) {

        this.graphicId = graphicId;
        return this;
    }

    /**
     * graphic_id integer
     * 
     * @return graphicId
     **/
    @javax.annotation.Nullable
    public Integer getGraphicId() {
        return graphicId;
    }

    public void setGraphicId(Integer graphicId) {
        this.graphicId = graphicId;
    }

    public TypeResponse groupId(Integer groupId) {

        this.groupId = groupId;
        return this;
    }

    /**
     * group_id integer
     * 
     * @return groupId
     **/
    @javax.annotation.Nonnull
    public Integer getGroupId() {
        return groupId;
    }

    public void setGroupId(Integer groupId) {
        this.groupId = groupId;
    }

    public TypeResponse iconId(Integer iconId) {

        this.iconId = iconId;
        return this;
    }

    /**
     * icon_id integer
     * 
     * @return iconId
     **/
    @javax.annotation.Nullable
    public Integer getIconId() {
        return iconId;
    }

    public void setIconId(Integer iconId) {
        this.iconId = iconId;
    }

    public TypeResponse marketGroupId(Integer marketGroupId) {

        this.marketGroupId = marketGroupId;
        return this;
    }

    /**
     * This only exists for types that can be put on the market
     * 
     * @return marketGroupId
     **/
    @javax.annotation.Nullable
    public Integer getMarketGroupId() {
        return marketGroupId;
    }

    public void setMarketGroupId(Integer marketGroupId) {
        this.marketGroupId = marketGroupId;
    }

    public TypeResponse mass(Float mass) {

        this.mass = mass;
        return this;
    }

    /**
     * mass number
     * 
     * @return mass
     **/
    @javax.annotation.Nullable
    public Float getMass() {
        return mass;
    }

    public void setMass(Float mass) {
        this.mass = mass;
    }

    public TypeResponse name(String name) {

        this.name = name;
        return this;
    }

    /**
     * name string
     * 
     * @return name
     **/
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public TypeResponse packagedVolume(Float packagedVolume) {

        this.packagedVolume = packagedVolume;
        return this;
    }

    /**
     * packaged_volume number
     * 
     * @return packagedVolume
     **/
    @javax.annotation.Nullable
    public Float getPackagedVolume() {
        return packagedVolume;
    }

    public void setPackagedVolume(Float packagedVolume) {
        this.packagedVolume = packagedVolume;
    }

    public TypeResponse portionSize(Integer portionSize) {

        this.portionSize = portionSize;
        return this;
    }

    /**
     * portion_size integer
     * 
     * @return portionSize
     **/
    @javax.annotation.Nullable
    public Integer getPortionSize() {
        return portionSize;
    }

    public void setPortionSize(Integer portionSize) {
        this.portionSize = portionSize;
    }

    public TypeResponse published(Boolean published) {

        this.published = published;
        return this;
    }

    /**
     * published boolean
     * 
     * @return published
     **/
    @javax.annotation.Nonnull
    public Boolean getPublished() {
        return published;
    }

    public void setPublished(Boolean published) {
        this.published = published;
    }

    public TypeResponse radius(Float radius) {

        this.radius = radius;
        return this;
    }

    /**
     * radius number
     * 
     * @return radius
     **/
    @javax.annotation.Nullable
    public Float getRadius() {
        return radius;
    }

    public void setRadius(Float radius) {
        this.radius = radius;
    }

    public TypeResponse typeId(Integer typeId) {

        this.typeId = typeId;
        return this;
    }

    /**
     * type_id integer
     * 
     * @return typeId
     **/
    @javax.annotation.Nonnull
    public Integer getTypeId() {
        return typeId;
    }

    public void setTypeId(Integer typeId) {
        this.typeId = typeId;
    }

    public TypeResponse volume(Float volume) {

        this.volume = volume;
        return this;
    }

    /**
     * volume number
     * 
     * @return volume
     **/
    @javax.annotation.Nullable
    public Float getVolume() {
        return volume;
    }

    public void setVolume(Float volume) {
        this.volume = volume;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TypeResponse typeResponse = (TypeResponse) o;
        return Objects.equals(this.capacity, typeResponse.capacity)
                && Objects.equals(this.description, typeResponse.description)
                && Objects.equals(this.dogmaAttributes, typeResponse.dogmaAttributes)
                && Objects.equals(this.dogmaEffects, typeResponse.dogmaEffects)
                && Objects.equals(this.graphicId, typeResponse.graphicId)
                && Objects.equals(this.groupId, typeResponse.groupId)
                && Objects.equals(this.iconId, typeResponse.iconId)
                && Objects.equals(this.marketGroupId, typeResponse.marketGroupId)
                && Objects.equals(this.mass, typeResponse.mass) && Objects.equals(this.name, typeResponse.name)
                && Objects.equals(this.packagedVolume, typeResponse.packagedVolume)
                && Objects.equals(this.portionSize, typeResponse.portionSize)
                && Objects.equals(this.published, typeResponse.published)
                && Objects.equals(this.radius, typeResponse.radius) && Objects.equals(this.typeId, typeResponse.typeId)
                && Objects.equals(this.volume, typeResponse.volume);
    }

    @Override
    public int hashCode() {
        return Objects.hash(capacity, description, dogmaAttributes, dogmaEffects, graphicId, groupId, iconId,
                marketGroupId, mass, name, packagedVolume, portionSize, published, radius, typeId, volume);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TypeResponse {\n");
        sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    dogmaAttributes: ").append(toIndentedString(dogmaAttributes)).append("\n");
        sb.append("    dogmaEffects: ").append(toIndentedString(dogmaEffects)).append("\n");
        sb.append("    graphicId: ").append(toIndentedString(graphicId)).append("\n");
        sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
        sb.append("    iconId: ").append(toIndentedString(iconId)).append("\n");
        sb.append("    marketGroupId: ").append(toIndentedString(marketGroupId)).append("\n");
        sb.append("    mass: ").append(toIndentedString(mass)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    packagedVolume: ").append(toIndentedString(packagedVolume)).append("\n");
        sb.append("    portionSize: ").append(toIndentedString(portionSize)).append("\n");
        sb.append("    published: ").append(toIndentedString(published)).append("\n");
        sb.append("    radius: ").append(toIndentedString(radius)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("capacity");
        openapiFields.add("description");
        openapiFields.add("dogma_attributes");
        openapiFields.add("dogma_effects");
        openapiFields.add("graphic_id");
        openapiFields.add("group_id");
        openapiFields.add("icon_id");
        openapiFields.add("market_group_id");
        openapiFields.add("mass");
        openapiFields.add("name");
        openapiFields.add("packaged_volume");
        openapiFields.add("portion_size");
        openapiFields.add("published");
        openapiFields.add("radius");
        openapiFields.add("type_id");
        openapiFields.add("volume");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("description");
        openapiRequiredFields.add("group_id");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("published");
        openapiRequiredFields.add("type_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to TypeResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!TypeResponse.openapiRequiredFields.isEmpty()) { // has required
                                                                 // fields but
                                                                 // JSON object
                                                                 // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in TypeResponse is not found in the empty JSON string",
                        TypeResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!TypeResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format(
                        "The field `%s` in the JSON string is not defined in the `TypeResponse` properties. JSON: %s",
                        entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : TypeResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (!jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("description").toString()));
        }
        if (jsonObj.get("dogma_attributes") != null && !jsonObj.get("dogma_attributes").isJsonNull()) {
            JsonArray jsonArraydogmaAttributes = jsonObj.getAsJsonArray("dogma_attributes");
            if (jsonArraydogmaAttributes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("dogma_attributes").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `dogma_attributes` to be an array in the JSON string but got `%s`",
                            jsonObj.get("dogma_attributes").toString()));
                }

                // validate the optional field `dogma_attributes` (array)
                for (int i = 0; i < jsonArraydogmaAttributes.size(); i++) {
                    TypeDogmaAttribute.validateJsonObject(jsonArraydogmaAttributes.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("dogma_effects") != null && !jsonObj.get("dogma_effects").isJsonNull()) {
            JsonArray jsonArraydogmaEffects = jsonObj.getAsJsonArray("dogma_effects");
            if (jsonArraydogmaEffects != null) {
                // ensure the json data is an array
                if (!jsonObj.get("dogma_effects").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `dogma_effects` to be an array in the JSON string but got `%s`",
                            jsonObj.get("dogma_effects").toString()));
                }

                // validate the optional field `dogma_effects` (array)
                for (int i = 0; i < jsonArraydogmaEffects.size(); i++) {
                    TypeDogmaEffect.validateJsonObject(jsonArraydogmaEffects.get(i).getAsJsonObject());
                };
            }
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TypeResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TypeResponse' and
                             // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TypeResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(TypeResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<TypeResponse>() {
                @Override
                public void write(JsonWriter out, TypeResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public TypeResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of TypeResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of TypeResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to TypeResponse
     */
    public static TypeResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TypeResponse.class);
    }

    /**
     * Convert an instance of TypeResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
