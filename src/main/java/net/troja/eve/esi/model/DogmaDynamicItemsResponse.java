/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.DogmaDynamicAttribute;
import net.troja.eve.esi.model.DogmaDynamicEffect;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DogmaDynamicItemsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
    @SerializedName(SERIALIZED_NAME_CREATED_BY)
    private Integer createdBy;

    public static final String SERIALIZED_NAME_DOGMA_ATTRIBUTES = "dogma_attributes";
    @SerializedName(SERIALIZED_NAME_DOGMA_ATTRIBUTES)
    private List<DogmaDynamicAttribute> dogmaAttributes = new ArrayList<>();

    public static final String SERIALIZED_NAME_DOGMA_EFFECTS = "dogma_effects";
    @SerializedName(SERIALIZED_NAME_DOGMA_EFFECTS)
    private List<DogmaDynamicEffect> dogmaEffects = new ArrayList<>();

    public static final String SERIALIZED_NAME_MUTATOR_TYPE_ID = "mutator_type_id";
    @SerializedName(SERIALIZED_NAME_MUTATOR_TYPE_ID)
    private Integer mutatorTypeId;

    public static final String SERIALIZED_NAME_SOURCE_TYPE_ID = "source_type_id";
    @SerializedName(SERIALIZED_NAME_SOURCE_TYPE_ID)
    private Integer sourceTypeId;

    public DogmaDynamicItemsResponse() {
    }

    public DogmaDynamicItemsResponse createdBy(Integer createdBy) {

        this.createdBy = createdBy;
        return this;
    }

    /**
     * The ID of the character who created the item
     * 
     * @return createdBy
     **/
    @javax.annotation.Nonnull
    public Integer getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    public DogmaDynamicItemsResponse dogmaAttributes(List<DogmaDynamicAttribute> dogmaAttributes) {

        this.dogmaAttributes = dogmaAttributes;
        return this;
    }

    public DogmaDynamicItemsResponse addDogmaAttributesItem(DogmaDynamicAttribute dogmaAttributesItem) {
        if (this.dogmaAttributes == null) {
            this.dogmaAttributes = new ArrayList<>();
        }
        this.dogmaAttributes.add(dogmaAttributesItem);
        return this;
    }

    /**
     * dogma_attributes array
     * 
     * @return dogmaAttributes
     **/
    @javax.annotation.Nonnull
    public List<DogmaDynamicAttribute> getDogmaAttributes() {
        return dogmaAttributes;
    }

    public void setDogmaAttributes(List<DogmaDynamicAttribute> dogmaAttributes) {
        this.dogmaAttributes = dogmaAttributes;
    }

    public DogmaDynamicItemsResponse dogmaEffects(List<DogmaDynamicEffect> dogmaEffects) {

        this.dogmaEffects = dogmaEffects;
        return this;
    }

    public DogmaDynamicItemsResponse addDogmaEffectsItem(DogmaDynamicEffect dogmaEffectsItem) {
        if (this.dogmaEffects == null) {
            this.dogmaEffects = new ArrayList<>();
        }
        this.dogmaEffects.add(dogmaEffectsItem);
        return this;
    }

    /**
     * dogma_effects array
     * 
     * @return dogmaEffects
     **/
    @javax.annotation.Nonnull
    public List<DogmaDynamicEffect> getDogmaEffects() {
        return dogmaEffects;
    }

    public void setDogmaEffects(List<DogmaDynamicEffect> dogmaEffects) {
        this.dogmaEffects = dogmaEffects;
    }

    public DogmaDynamicItemsResponse mutatorTypeId(Integer mutatorTypeId) {

        this.mutatorTypeId = mutatorTypeId;
        return this;
    }

    /**
     * The type ID of the mutator used to generate the dynamic item.
     * 
     * @return mutatorTypeId
     **/
    @javax.annotation.Nonnull
    public Integer getMutatorTypeId() {
        return mutatorTypeId;
    }

    public void setMutatorTypeId(Integer mutatorTypeId) {
        this.mutatorTypeId = mutatorTypeId;
    }

    public DogmaDynamicItemsResponse sourceTypeId(Integer sourceTypeId) {

        this.sourceTypeId = sourceTypeId;
        return this;
    }

    /**
     * The type ID of the source item the mutator was applied to create the
     * dynamic item.
     * 
     * @return sourceTypeId
     **/
    @javax.annotation.Nonnull
    public Integer getSourceTypeId() {
        return sourceTypeId;
    }

    public void setSourceTypeId(Integer sourceTypeId) {
        this.sourceTypeId = sourceTypeId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DogmaDynamicItemsResponse dogmaDynamicItemsResponse = (DogmaDynamicItemsResponse) o;
        return Objects.equals(this.createdBy, dogmaDynamicItemsResponse.createdBy)
                && Objects.equals(this.dogmaAttributes, dogmaDynamicItemsResponse.dogmaAttributes)
                && Objects.equals(this.dogmaEffects, dogmaDynamicItemsResponse.dogmaEffects)
                && Objects.equals(this.mutatorTypeId, dogmaDynamicItemsResponse.mutatorTypeId)
                && Objects.equals(this.sourceTypeId, dogmaDynamicItemsResponse.sourceTypeId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(createdBy, dogmaAttributes, dogmaEffects, mutatorTypeId, sourceTypeId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DogmaDynamicItemsResponse {\n");
        sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
        sb.append("    dogmaAttributes: ").append(toIndentedString(dogmaAttributes)).append("\n");
        sb.append("    dogmaEffects: ").append(toIndentedString(dogmaEffects)).append("\n");
        sb.append("    mutatorTypeId: ").append(toIndentedString(mutatorTypeId)).append("\n");
        sb.append("    sourceTypeId: ").append(toIndentedString(sourceTypeId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("created_by");
        openapiFields.add("dogma_attributes");
        openapiFields.add("dogma_effects");
        openapiFields.add("mutator_type_id");
        openapiFields.add("source_type_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("created_by");
        openapiRequiredFields.add("dogma_attributes");
        openapiRequiredFields.add("dogma_effects");
        openapiRequiredFields.add("mutator_type_id");
        openapiRequiredFields.add("source_type_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             DogmaDynamicItemsResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!DogmaDynamicItemsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                              // required
                                                                              // fields
                                                                              // but
                                                                              // JSON
                                                                              // object
                                                                              // is
                                                                              // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in DogmaDynamicItemsResponse is not found in the empty JSON string",
                        DogmaDynamicItemsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!DogmaDynamicItemsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `DogmaDynamicItemsResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : DogmaDynamicItemsResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        // ensure the json data is an array
        if (!jsonObj.get("dogma_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `dogma_attributes` to be an array in the JSON string but got `%s`", jsonObj
                            .get("dogma_attributes").toString()));
        }

        JsonArray jsonArraydogmaAttributes = jsonObj.getAsJsonArray("dogma_attributes");
        // validate the required field `dogma_attributes` (array)
        for (int i = 0; i < jsonArraydogmaAttributes.size(); i++) {
            DogmaDynamicAttribute.validateJsonObject(jsonArraydogmaAttributes.get(i).getAsJsonObject());
        };
        // ensure the json data is an array
        if (!jsonObj.get("dogma_effects").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `dogma_effects` to be an array in the JSON string but got `%s`",
                    jsonObj.get("dogma_effects").toString()));
        }

        JsonArray jsonArraydogmaEffects = jsonObj.getAsJsonArray("dogma_effects");
        // validate the required field `dogma_effects` (array)
        for (int i = 0; i < jsonArraydogmaEffects.size(); i++) {
            DogmaDynamicEffect.validateJsonObject(jsonArraydogmaEffects.get(i).getAsJsonObject());
        };
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DogmaDynamicItemsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'DogmaDynamicItemsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DogmaDynamicItemsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(DogmaDynamicItemsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<DogmaDynamicItemsResponse>() {
                @Override
                public void write(JsonWriter out, DogmaDynamicItemsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public DogmaDynamicItemsResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of DogmaDynamicItemsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of DogmaDynamicItemsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             DogmaDynamicItemsResponse
     */
    public static DogmaDynamicItemsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DogmaDynamicItemsResponse.class);
    }

    /**
     * Convert an instance of DogmaDynamicItemsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
