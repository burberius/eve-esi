/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.SovereigntyCampaignParticipant;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SovereigntyCampaignsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ATTACKERS_SCORE = "attackers_score";
    @SerializedName(SERIALIZED_NAME_ATTACKERS_SCORE)
    private Float attackersScore;

    public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaign_id";
    @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
    private Integer campaignId;

    public static final String SERIALIZED_NAME_CONSTELLATION_ID = "constellation_id";
    @SerializedName(SERIALIZED_NAME_CONSTELLATION_ID)
    private Integer constellationId;

    public static final String SERIALIZED_NAME_DEFENDER_ID = "defender_id";
    @SerializedName(SERIALIZED_NAME_DEFENDER_ID)
    private Integer defenderId;

    public static final String SERIALIZED_NAME_DEFENDER_SCORE = "defender_score";
    @SerializedName(SERIALIZED_NAME_DEFENDER_SCORE)
    private Float defenderScore;

    /**
     * Type of event this campaign is for. tcu_defense, ihub_defense and
     * station_defense are referred to as \&quot;Defense Events\&quot;,
     * station_freeport as \&quot;Freeport Events\&quot;.
     */
    @JsonAdapter(EventTypeEnum.Adapter.class)
    public enum EventTypeEnum {
        TCU_DEFENSE("tcu_defense"),

        IHUB_DEFENSE("ihub_defense"),

        STATION_DEFENSE("station_defense"),

        STATION_FREEPORT("station_freeport");

        private String value;

        EventTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static EventTypeEnum fromValue(String value) {
            for (EventTypeEnum b : EventTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<EventTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return EventTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
    @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
    private String eventType;
    private EventTypeEnum eventTypeEnum;

    public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
    @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
    private List<SovereigntyCampaignParticipant> participants;

    public static final String SERIALIZED_NAME_SOLAR_SYSTEM_ID = "solar_system_id";
    @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM_ID)
    private Integer solarSystemId;

    public static final String SERIALIZED_NAME_START_TIME = "start_time";
    @SerializedName(SERIALIZED_NAME_START_TIME)
    private OffsetDateTime startTime;

    public static final String SERIALIZED_NAME_STRUCTURE_ID = "structure_id";
    @SerializedName(SERIALIZED_NAME_STRUCTURE_ID)
    private Long structureId;

    public SovereigntyCampaignsResponse() {
    }

    public SovereigntyCampaignsResponse attackersScore(Float attackersScore) {

        this.attackersScore = attackersScore;
        return this;
    }

    /**
     * Score for all attacking parties, only present in Defense Events.
     * 
     * @return attackersScore
     **/
    @javax.annotation.Nullable
    public Float getAttackersScore() {
        return attackersScore;
    }

    public void setAttackersScore(Float attackersScore) {
        this.attackersScore = attackersScore;
    }

    public SovereigntyCampaignsResponse campaignId(Integer campaignId) {

        this.campaignId = campaignId;
        return this;
    }

    /**
     * Unique ID for this campaign.
     * 
     * @return campaignId
     **/
    @javax.annotation.Nonnull
    public Integer getCampaignId() {
        return campaignId;
    }

    public void setCampaignId(Integer campaignId) {
        this.campaignId = campaignId;
    }

    public SovereigntyCampaignsResponse constellationId(Integer constellationId) {

        this.constellationId = constellationId;
        return this;
    }

    /**
     * The constellation in which the campaign will take place.
     * 
     * @return constellationId
     **/
    @javax.annotation.Nonnull
    public Integer getConstellationId() {
        return constellationId;
    }

    public void setConstellationId(Integer constellationId) {
        this.constellationId = constellationId;
    }

    public SovereigntyCampaignsResponse defenderId(Integer defenderId) {

        this.defenderId = defenderId;
        return this;
    }

    /**
     * Defending alliance, only present in Defense Events
     * 
     * @return defenderId
     **/
    @javax.annotation.Nullable
    public Integer getDefenderId() {
        return defenderId;
    }

    public void setDefenderId(Integer defenderId) {
        this.defenderId = defenderId;
    }

    public SovereigntyCampaignsResponse defenderScore(Float defenderScore) {

        this.defenderScore = defenderScore;
        return this;
    }

    /**
     * Score for the defending alliance, only present in Defense Events.
     * 
     * @return defenderScore
     **/
    @javax.annotation.Nullable
    public Float getDefenderScore() {
        return defenderScore;
    }

    public void setDefenderScore(Float defenderScore) {
        this.defenderScore = defenderScore;
    }

    public SovereigntyCampaignsResponse eventTypeString(String eventType) {

        this.eventType = eventType;
        return this;
    }

    public SovereigntyCampaignsResponse eventType(EventTypeEnum eventTypeEnum) {

        this.eventTypeEnum = eventTypeEnum;
        return this;
    }

    /**
     * Type of event this campaign is for. tcu_defense, ihub_defense and
     * station_defense are referred to as \&quot;Defense Events\&quot;,
     * station_freeport as \&quot;Freeport Events\&quot;.
     * 
     * @return eventType
     **/
    @javax.annotation.Nonnull
    public EventTypeEnum getEventType() {
        if (eventTypeEnum == null) {
            eventTypeEnum = EventTypeEnum.fromValue(eventType);
        }
        return eventTypeEnum;
    }

    public String getEventTypeString() {
        return eventType;
    }

    public void setEventType(EventTypeEnum eventTypeEnum) {
        this.eventTypeEnum = eventTypeEnum;
    }

    public void setEventTypeString(String eventType) {
        this.eventType = eventType;
    }

    public SovereigntyCampaignsResponse participants(List<SovereigntyCampaignParticipant> participants) {

        this.participants = participants;
        return this;
    }

    public SovereigntyCampaignsResponse addParticipantsItem(SovereigntyCampaignParticipant participantsItem) {
        if (this.participants == null) {
            this.participants = new ArrayList<>();
        }
        this.participants.add(participantsItem);
        return this;
    }

    /**
     * Alliance participating and their respective scores, only present in
     * Freeport Events.
     * 
     * @return participants
     **/
    @javax.annotation.Nullable
    public List<SovereigntyCampaignParticipant> getParticipants() {
        return participants;
    }

    public void setParticipants(List<SovereigntyCampaignParticipant> participants) {
        this.participants = participants;
    }

    public SovereigntyCampaignsResponse solarSystemId(Integer solarSystemId) {

        this.solarSystemId = solarSystemId;
        return this;
    }

    /**
     * The solar system the structure is located in.
     * 
     * @return solarSystemId
     **/
    @javax.annotation.Nonnull
    public Integer getSolarSystemId() {
        return solarSystemId;
    }

    public void setSolarSystemId(Integer solarSystemId) {
        this.solarSystemId = solarSystemId;
    }

    public SovereigntyCampaignsResponse startTime(OffsetDateTime startTime) {

        this.startTime = startTime;
        return this;
    }

    /**
     * Time the event is scheduled to start.
     * 
     * @return startTime
     **/
    @javax.annotation.Nonnull
    public OffsetDateTime getStartTime() {
        return startTime;
    }

    public void setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
    }

    public SovereigntyCampaignsResponse structureId(Long structureId) {

        this.structureId = structureId;
        return this;
    }

    /**
     * The structure item ID that is related to this campaign.
     * 
     * @return structureId
     **/
    @javax.annotation.Nonnull
    public Long getStructureId() {
        return structureId;
    }

    public void setStructureId(Long structureId) {
        this.structureId = structureId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SovereigntyCampaignsResponse sovereigntyCampaignsResponse = (SovereigntyCampaignsResponse) o;
        return Objects.equals(this.attackersScore, sovereigntyCampaignsResponse.attackersScore)
                && Objects.equals(this.campaignId, sovereigntyCampaignsResponse.campaignId)
                && Objects.equals(this.constellationId, sovereigntyCampaignsResponse.constellationId)
                && Objects.equals(this.defenderId, sovereigntyCampaignsResponse.defenderId)
                && Objects.equals(this.defenderScore, sovereigntyCampaignsResponse.defenderScore)
                && Objects.equals(this.eventType, sovereigntyCampaignsResponse.eventType)
                && Objects.equals(this.participants, sovereigntyCampaignsResponse.participants)
                && Objects.equals(this.solarSystemId, sovereigntyCampaignsResponse.solarSystemId)
                && Objects.equals(this.startTime, sovereigntyCampaignsResponse.startTime)
                && Objects.equals(this.structureId, sovereigntyCampaignsResponse.structureId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attackersScore, campaignId, constellationId, defenderId, defenderScore, eventType,
                participants, solarSystemId, startTime, structureId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SovereigntyCampaignsResponse {\n");
        sb.append("    attackersScore: ").append(toIndentedString(attackersScore)).append("\n");
        sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
        sb.append("    constellationId: ").append(toIndentedString(constellationId)).append("\n");
        sb.append("    defenderId: ").append(toIndentedString(defenderId)).append("\n");
        sb.append("    defenderScore: ").append(toIndentedString(defenderScore)).append("\n");
        sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
        sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
        sb.append("    solarSystemId: ").append(toIndentedString(solarSystemId)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    structureId: ").append(toIndentedString(structureId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("attackers_score");
        openapiFields.add("campaign_id");
        openapiFields.add("constellation_id");
        openapiFields.add("defender_id");
        openapiFields.add("defender_score");
        openapiFields.add("event_type");
        openapiFields.add("participants");
        openapiFields.add("solar_system_id");
        openapiFields.add("start_time");
        openapiFields.add("structure_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("campaign_id");
        openapiRequiredFields.add("constellation_id");
        openapiRequiredFields.add("event_type");
        openapiRequiredFields.add("solar_system_id");
        openapiRequiredFields.add("start_time");
        openapiRequiredFields.add("structure_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             SovereigntyCampaignsResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!SovereigntyCampaignsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                 // required
                                                                                 // fields
                                                                                 // but
                                                                                 // JSON
                                                                                 // object
                                                                                 // is
                                                                                 // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SovereigntyCampaignsResponse is not found in the empty JSON string",
                                SovereigntyCampaignsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!SovereigntyCampaignsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `SovereigntyCampaignsResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : SovereigntyCampaignsResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (!jsonObj.get("event_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("event_type").toString()));
        }
        if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull()) {
            JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
            if (jsonArrayparticipants != null) {
                // ensure the json data is an array
                if (!jsonObj.get("participants").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj
                                    .get("participants").toString()));
                }

                // validate the optional field `participants` (array)
                for (int i = 0; i < jsonArrayparticipants.size(); i++) {
                    SovereigntyCampaignParticipant.validateJsonObject(jsonArrayparticipants.get(i).getAsJsonObject());
                };
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SovereigntyCampaignsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'SovereigntyCampaignsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SovereigntyCampaignsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(SovereigntyCampaignsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<SovereigntyCampaignsResponse>() {
                @Override
                public void write(JsonWriter out, SovereigntyCampaignsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public SovereigntyCampaignsResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of SovereigntyCampaignsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of SovereigntyCampaignsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             SovereigntyCampaignsResponse
     */
    public static SovereigntyCampaignsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SovereigntyCampaignsResponse.class);
    }

    /**
     * Convert an instance of SovereigntyCampaignsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
