/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NewContactNotificationsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_MESSAGE = "message";
    @SerializedName(SERIALIZED_NAME_MESSAGE)
    private String message;

    public static final String SERIALIZED_NAME_NOTIFICATION_ID = "notification_id";
    @SerializedName(SERIALIZED_NAME_NOTIFICATION_ID)
    private Integer notificationId;

    public static final String SERIALIZED_NAME_SEND_DATE = "send_date";
    @SerializedName(SERIALIZED_NAME_SEND_DATE)
    private OffsetDateTime sendDate;

    public static final String SERIALIZED_NAME_SENDER_CHARACTER_ID = "sender_character_id";
    @SerializedName(SERIALIZED_NAME_SENDER_CHARACTER_ID)
    private Integer senderCharacterId;

    public static final String SERIALIZED_NAME_STANDING_LEVEL = "standing_level";
    @SerializedName(SERIALIZED_NAME_STANDING_LEVEL)
    private Float standingLevel;

    public NewContactNotificationsResponse() {
    }

    public NewContactNotificationsResponse message(String message) {

        this.message = message;
        return this;
    }

    /**
     * message string
     * 
     * @return message
     **/
    @javax.annotation.Nonnull
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public NewContactNotificationsResponse notificationId(Integer notificationId) {

        this.notificationId = notificationId;
        return this;
    }

    /**
     * notification_id integer
     * 
     * @return notificationId
     **/
    @javax.annotation.Nonnull
    public Integer getNotificationId() {
        return notificationId;
    }

    public void setNotificationId(Integer notificationId) {
        this.notificationId = notificationId;
    }

    public NewContactNotificationsResponse sendDate(OffsetDateTime sendDate) {

        this.sendDate = sendDate;
        return this;
    }

    /**
     * send_date string
     * 
     * @return sendDate
     **/
    @javax.annotation.Nonnull
    public OffsetDateTime getSendDate() {
        return sendDate;
    }

    public void setSendDate(OffsetDateTime sendDate) {
        this.sendDate = sendDate;
    }

    public NewContactNotificationsResponse senderCharacterId(Integer senderCharacterId) {

        this.senderCharacterId = senderCharacterId;
        return this;
    }

    /**
     * sender_character_id integer
     * 
     * @return senderCharacterId
     **/
    @javax.annotation.Nonnull
    public Integer getSenderCharacterId() {
        return senderCharacterId;
    }

    public void setSenderCharacterId(Integer senderCharacterId) {
        this.senderCharacterId = senderCharacterId;
    }

    public NewContactNotificationsResponse standingLevel(Float standingLevel) {

        this.standingLevel = standingLevel;
        return this;
    }

    /**
     * A number representing the standing level the receiver has been added at
     * by the sender. The standing levels are as follows: -10 -&gt; Terrible |
     * -5 -&gt; Bad | 0 -&gt; Neutral | 5 -&gt; Good | 10 -&gt; Excellent
     * 
     * @return standingLevel
     **/
    @javax.annotation.Nonnull
    public Float getStandingLevel() {
        return standingLevel;
    }

    public void setStandingLevel(Float standingLevel) {
        this.standingLevel = standingLevel;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NewContactNotificationsResponse newContactNotificationsResponse = (NewContactNotificationsResponse) o;
        return Objects.equals(this.message, newContactNotificationsResponse.message)
                && Objects.equals(this.notificationId, newContactNotificationsResponse.notificationId)
                && Objects.equals(this.sendDate, newContactNotificationsResponse.sendDate)
                && Objects.equals(this.senderCharacterId, newContactNotificationsResponse.senderCharacterId)
                && Objects.equals(this.standingLevel, newContactNotificationsResponse.standingLevel);
    }

    @Override
    public int hashCode() {
        return Objects.hash(message, notificationId, sendDate, senderCharacterId, standingLevel);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NewContactNotificationsResponse {\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    notificationId: ").append(toIndentedString(notificationId)).append("\n");
        sb.append("    sendDate: ").append(toIndentedString(sendDate)).append("\n");
        sb.append("    senderCharacterId: ").append(toIndentedString(senderCharacterId)).append("\n");
        sb.append("    standingLevel: ").append(toIndentedString(standingLevel)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("message");
        openapiFields.add("notification_id");
        openapiFields.add("send_date");
        openapiFields.add("sender_character_id");
        openapiFields.add("standing_level");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("message");
        openapiRequiredFields.add("notification_id");
        openapiRequiredFields.add("send_date");
        openapiRequiredFields.add("sender_character_id");
        openapiRequiredFields.add("standing_level");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             NewContactNotificationsResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!NewContactNotificationsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                    // required
                                                                                    // fields
                                                                                    // but
                                                                                    // JSON
                                                                                    // object
                                                                                    // is
                                                                                    // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in NewContactNotificationsResponse is not found in the empty JSON string",
                                NewContactNotificationsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!NewContactNotificationsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `NewContactNotificationsResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : NewContactNotificationsResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (!jsonObj.get("message").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `message` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("message").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NewContactNotificationsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'NewContactNotificationsResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NewContactNotificationsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(NewContactNotificationsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<NewContactNotificationsResponse>() {
                @Override
                public void write(JsonWriter out, NewContactNotificationsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public NewContactNotificationsResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of NewContactNotificationsResponse given an JSON
     * string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of NewContactNotificationsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             NewContactNotificationsResponse
     */
    public static NewContactNotificationsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NewContactNotificationsResponse.class);
    }

    /**
     * Convert an instance of NewContactNotificationsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
