/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.CorporationStarbaseFuel;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CorporationStarbaseResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ALLOW_ALLIANCE_MEMBERS = "allow_alliance_members";
    @SerializedName(SERIALIZED_NAME_ALLOW_ALLIANCE_MEMBERS)
    private Boolean allowAllianceMembers;

    public static final String SERIALIZED_NAME_ALLOW_CORPORATION_MEMBERS = "allow_corporation_members";
    @SerializedName(SERIALIZED_NAME_ALLOW_CORPORATION_MEMBERS)
    private Boolean allowCorporationMembers;

    /**
     * Who can anchor starbase (POS) and its structures
     */
    @JsonAdapter(AnchorEnum.Adapter.class)
    public enum AnchorEnum {
        ALLIANCE_MEMBER("alliance_member"),

        CONFIG_STARBASE_EQUIPMENT_ROLE("config_starbase_equipment_role"),

        CORPORATION_MEMBER("corporation_member"),

        STARBASE_FUEL_TECHNICIAN_ROLE("starbase_fuel_technician_role");

        private String value;

        AnchorEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static AnchorEnum fromValue(String value) {
            for (AnchorEnum b : AnchorEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<AnchorEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final AnchorEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public AnchorEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return AnchorEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ANCHOR = "anchor";
    @SerializedName(SERIALIZED_NAME_ANCHOR)
    private String anchor;
    private AnchorEnum anchorEnum;

    public static final String SERIALIZED_NAME_ATTACK_IF_AT_WAR = "attack_if_at_war";
    @SerializedName(SERIALIZED_NAME_ATTACK_IF_AT_WAR)
    private Boolean attackIfAtWar;

    public static final String SERIALIZED_NAME_ATTACK_IF_OTHER_SECURITY_STATUS_DROPPING = "attack_if_other_security_status_dropping";
    @SerializedName(SERIALIZED_NAME_ATTACK_IF_OTHER_SECURITY_STATUS_DROPPING)
    private Boolean attackIfOtherSecurityStatusDropping;

    public static final String SERIALIZED_NAME_ATTACK_SECURITY_STATUS_THRESHOLD = "attack_security_status_threshold";
    @SerializedName(SERIALIZED_NAME_ATTACK_SECURITY_STATUS_THRESHOLD)
    private Float attackSecurityStatusThreshold;

    public static final String SERIALIZED_NAME_ATTACK_STANDING_THRESHOLD = "attack_standing_threshold";
    @SerializedName(SERIALIZED_NAME_ATTACK_STANDING_THRESHOLD)
    private Float attackStandingThreshold;

    /**
     * Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay
     */
    @JsonAdapter(FuelBayTakeEnum.Adapter.class)
    public enum FuelBayTakeEnum {
        ALLIANCE_MEMBER("alliance_member"),

        CONFIG_STARBASE_EQUIPMENT_ROLE("config_starbase_equipment_role"),

        CORPORATION_MEMBER("corporation_member"),

        STARBASE_FUEL_TECHNICIAN_ROLE("starbase_fuel_technician_role");

        private String value;

        FuelBayTakeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static FuelBayTakeEnum fromValue(String value) {
            for (FuelBayTakeEnum b : FuelBayTakeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<FuelBayTakeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final FuelBayTakeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public FuelBayTakeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return FuelBayTakeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_FUEL_BAY_TAKE = "fuel_bay_take";
    @SerializedName(SERIALIZED_NAME_FUEL_BAY_TAKE)
    private String fuelBayTake;
    private FuelBayTakeEnum fuelBayTakeEnum;

    /**
     * Who can view the starbase (POS)&#39;s fule bay. Characters either need to
     * have required role or belong to the starbase (POS) owner&#39;s
     * corporation or alliance, as described by the enum, all other access
     * settings follows the same scheme
     */
    @JsonAdapter(FuelBayViewEnum.Adapter.class)
    public enum FuelBayViewEnum {
        ALLIANCE_MEMBER("alliance_member"),

        CONFIG_STARBASE_EQUIPMENT_ROLE("config_starbase_equipment_role"),

        CORPORATION_MEMBER("corporation_member"),

        STARBASE_FUEL_TECHNICIAN_ROLE("starbase_fuel_technician_role");

        private String value;

        FuelBayViewEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static FuelBayViewEnum fromValue(String value) {
            for (FuelBayViewEnum b : FuelBayViewEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<FuelBayViewEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final FuelBayViewEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public FuelBayViewEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return FuelBayViewEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_FUEL_BAY_VIEW = "fuel_bay_view";
    @SerializedName(SERIALIZED_NAME_FUEL_BAY_VIEW)
    private String fuelBayView;
    private FuelBayViewEnum fuelBayViewEnum;

    public static final String SERIALIZED_NAME_FUELS = "fuels";
    @SerializedName(SERIALIZED_NAME_FUELS)
    private List<CorporationStarbaseFuel> fuels;

    /**
     * Who can offline starbase (POS) and its structures
     */
    @JsonAdapter(OfflineEnum.Adapter.class)
    public enum OfflineEnum {
        ALLIANCE_MEMBER("alliance_member"),

        CONFIG_STARBASE_EQUIPMENT_ROLE("config_starbase_equipment_role"),

        CORPORATION_MEMBER("corporation_member"),

        STARBASE_FUEL_TECHNICIAN_ROLE("starbase_fuel_technician_role");

        private String value;

        OfflineEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static OfflineEnum fromValue(String value) {
            for (OfflineEnum b : OfflineEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<OfflineEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OfflineEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public OfflineEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return OfflineEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_OFFLINE = "offline";
    @SerializedName(SERIALIZED_NAME_OFFLINE)
    private String offline;
    private OfflineEnum offlineEnum;

    /**
     * Who can online starbase (POS) and its structures
     */
    @JsonAdapter(OnlineEnum.Adapter.class)
    public enum OnlineEnum {
        ALLIANCE_MEMBER("alliance_member"),

        CONFIG_STARBASE_EQUIPMENT_ROLE("config_starbase_equipment_role"),

        CORPORATION_MEMBER("corporation_member"),

        STARBASE_FUEL_TECHNICIAN_ROLE("starbase_fuel_technician_role");

        private String value;

        OnlineEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static OnlineEnum fromValue(String value) {
            for (OnlineEnum b : OnlineEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<OnlineEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OnlineEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public OnlineEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return OnlineEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ONLINE = "online";
    @SerializedName(SERIALIZED_NAME_ONLINE)
    private String online;
    private OnlineEnum onlineEnum;

    /**
     * Who can unanchor starbase (POS) and its structures
     */
    @JsonAdapter(UnanchorEnum.Adapter.class)
    public enum UnanchorEnum {
        ALLIANCE_MEMBER("alliance_member"),

        CONFIG_STARBASE_EQUIPMENT_ROLE("config_starbase_equipment_role"),

        CORPORATION_MEMBER("corporation_member"),

        STARBASE_FUEL_TECHNICIAN_ROLE("starbase_fuel_technician_role");

        private String value;

        UnanchorEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static UnanchorEnum fromValue(String value) {
            for (UnanchorEnum b : UnanchorEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<UnanchorEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final UnanchorEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public UnanchorEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return UnanchorEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_UNANCHOR = "unanchor";
    @SerializedName(SERIALIZED_NAME_UNANCHOR)
    private String unanchor;
    private UnanchorEnum unanchorEnum;

    public static final String SERIALIZED_NAME_USE_ALLIANCE_STANDINGS = "use_alliance_standings";
    @SerializedName(SERIALIZED_NAME_USE_ALLIANCE_STANDINGS)
    private Boolean useAllianceStandings;

    public CorporationStarbaseResponse() {
    }

    public CorporationStarbaseResponse allowAllianceMembers(Boolean allowAllianceMembers) {

        this.allowAllianceMembers = allowAllianceMembers;
        return this;
    }

    /**
     * allow_alliance_members boolean
     * 
     * @return allowAllianceMembers
     **/
    @javax.annotation.Nonnull
    public Boolean getAllowAllianceMembers() {
        return allowAllianceMembers;
    }

    public void setAllowAllianceMembers(Boolean allowAllianceMembers) {
        this.allowAllianceMembers = allowAllianceMembers;
    }

    public CorporationStarbaseResponse allowCorporationMembers(Boolean allowCorporationMembers) {

        this.allowCorporationMembers = allowCorporationMembers;
        return this;
    }

    /**
     * allow_corporation_members boolean
     * 
     * @return allowCorporationMembers
     **/
    @javax.annotation.Nonnull
    public Boolean getAllowCorporationMembers() {
        return allowCorporationMembers;
    }

    public void setAllowCorporationMembers(Boolean allowCorporationMembers) {
        this.allowCorporationMembers = allowCorporationMembers;
    }

    public CorporationStarbaseResponse anchorString(String anchor) {

        this.anchor = anchor;
        return this;
    }

    public CorporationStarbaseResponse anchor(AnchorEnum anchorEnum) {

        this.anchorEnum = anchorEnum;
        return this;
    }

    /**
     * Who can anchor starbase (POS) and its structures
     * 
     * @return anchor
     **/
    @javax.annotation.Nonnull
    public AnchorEnum getAnchor() {
        if (anchorEnum == null) {
            anchorEnum = AnchorEnum.fromValue(anchor);
        }
        return anchorEnum;
    }

    public String getAnchorString() {
        return anchor;
    }

    public void setAnchor(AnchorEnum anchorEnum) {
        this.anchorEnum = anchorEnum;
    }

    public void setAnchorString(String anchor) {
        this.anchor = anchor;
    }

    public CorporationStarbaseResponse attackIfAtWar(Boolean attackIfAtWar) {

        this.attackIfAtWar = attackIfAtWar;
        return this;
    }

    /**
     * attack_if_at_war boolean
     * 
     * @return attackIfAtWar
     **/
    @javax.annotation.Nonnull
    public Boolean getAttackIfAtWar() {
        return attackIfAtWar;
    }

    public void setAttackIfAtWar(Boolean attackIfAtWar) {
        this.attackIfAtWar = attackIfAtWar;
    }

    public CorporationStarbaseResponse attackIfOtherSecurityStatusDropping(Boolean attackIfOtherSecurityStatusDropping) {

        this.attackIfOtherSecurityStatusDropping = attackIfOtherSecurityStatusDropping;
        return this;
    }

    /**
     * attack_if_other_security_status_dropping boolean
     * 
     * @return attackIfOtherSecurityStatusDropping
     **/
    @javax.annotation.Nonnull
    public Boolean getAttackIfOtherSecurityStatusDropping() {
        return attackIfOtherSecurityStatusDropping;
    }

    public void setAttackIfOtherSecurityStatusDropping(Boolean attackIfOtherSecurityStatusDropping) {
        this.attackIfOtherSecurityStatusDropping = attackIfOtherSecurityStatusDropping;
    }

    public CorporationStarbaseResponse attackSecurityStatusThreshold(Float attackSecurityStatusThreshold) {

        this.attackSecurityStatusThreshold = attackSecurityStatusThreshold;
        return this;
    }

    /**
     * Starbase (POS) will attack if target&#39;s security standing is lower
     * than this value
     * 
     * @return attackSecurityStatusThreshold
     **/
    @javax.annotation.Nullable
    public Float getAttackSecurityStatusThreshold() {
        return attackSecurityStatusThreshold;
    }

    public void setAttackSecurityStatusThreshold(Float attackSecurityStatusThreshold) {
        this.attackSecurityStatusThreshold = attackSecurityStatusThreshold;
    }

    public CorporationStarbaseResponse attackStandingThreshold(Float attackStandingThreshold) {

        this.attackStandingThreshold = attackStandingThreshold;
        return this;
    }

    /**
     * Starbase (POS) will attack if target&#39;s standing is lower than this
     * value
     * 
     * @return attackStandingThreshold
     **/
    @javax.annotation.Nullable
    public Float getAttackStandingThreshold() {
        return attackStandingThreshold;
    }

    public void setAttackStandingThreshold(Float attackStandingThreshold) {
        this.attackStandingThreshold = attackStandingThreshold;
    }

    public CorporationStarbaseResponse fuelBayTakeString(String fuelBayTake) {

        this.fuelBayTake = fuelBayTake;
        return this;
    }

    public CorporationStarbaseResponse fuelBayTake(FuelBayTakeEnum fuelBayTakeEnum) {

        this.fuelBayTakeEnum = fuelBayTakeEnum;
        return this;
    }

    /**
     * Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay
     * 
     * @return fuelBayTake
     **/
    @javax.annotation.Nonnull
    public FuelBayTakeEnum getFuelBayTake() {
        if (fuelBayTakeEnum == null) {
            fuelBayTakeEnum = FuelBayTakeEnum.fromValue(fuelBayTake);
        }
        return fuelBayTakeEnum;
    }

    public String getFuelBayTakeString() {
        return fuelBayTake;
    }

    public void setFuelBayTake(FuelBayTakeEnum fuelBayTakeEnum) {
        this.fuelBayTakeEnum = fuelBayTakeEnum;
    }

    public void setFuelBayTakeString(String fuelBayTake) {
        this.fuelBayTake = fuelBayTake;
    }

    public CorporationStarbaseResponse fuelBayViewString(String fuelBayView) {

        this.fuelBayView = fuelBayView;
        return this;
    }

    public CorporationStarbaseResponse fuelBayView(FuelBayViewEnum fuelBayViewEnum) {

        this.fuelBayViewEnum = fuelBayViewEnum;
        return this;
    }

    /**
     * Who can view the starbase (POS)&#39;s fule bay. Characters either need to
     * have required role or belong to the starbase (POS) owner&#39;s
     * corporation or alliance, as described by the enum, all other access
     * settings follows the same scheme
     * 
     * @return fuelBayView
     **/
    @javax.annotation.Nonnull
    public FuelBayViewEnum getFuelBayView() {
        if (fuelBayViewEnum == null) {
            fuelBayViewEnum = FuelBayViewEnum.fromValue(fuelBayView);
        }
        return fuelBayViewEnum;
    }

    public String getFuelBayViewString() {
        return fuelBayView;
    }

    public void setFuelBayView(FuelBayViewEnum fuelBayViewEnum) {
        this.fuelBayViewEnum = fuelBayViewEnum;
    }

    public void setFuelBayViewString(String fuelBayView) {
        this.fuelBayView = fuelBayView;
    }

    public CorporationStarbaseResponse fuels(List<CorporationStarbaseFuel> fuels) {

        this.fuels = fuels;
        return this;
    }

    public CorporationStarbaseResponse addFuelsItem(CorporationStarbaseFuel fuelsItem) {
        if (this.fuels == null) {
            this.fuels = new ArrayList<>();
        }
        this.fuels.add(fuelsItem);
        return this;
    }

    /**
     * Fuel blocks and other things that will be consumed when operating a
     * starbase (POS)
     * 
     * @return fuels
     **/
    @javax.annotation.Nullable
    public List<CorporationStarbaseFuel> getFuels() {
        return fuels;
    }

    public void setFuels(List<CorporationStarbaseFuel> fuels) {
        this.fuels = fuels;
    }

    public CorporationStarbaseResponse offlineString(String offline) {

        this.offline = offline;
        return this;
    }

    public CorporationStarbaseResponse offline(OfflineEnum offlineEnum) {

        this.offlineEnum = offlineEnum;
        return this;
    }

    /**
     * Who can offline starbase (POS) and its structures
     * 
     * @return offline
     **/
    @javax.annotation.Nonnull
    public OfflineEnum getOffline() {
        if (offlineEnum == null) {
            offlineEnum = OfflineEnum.fromValue(offline);
        }
        return offlineEnum;
    }

    public String getOfflineString() {
        return offline;
    }

    public void setOffline(OfflineEnum offlineEnum) {
        this.offlineEnum = offlineEnum;
    }

    public void setOfflineString(String offline) {
        this.offline = offline;
    }

    public CorporationStarbaseResponse onlineString(String online) {

        this.online = online;
        return this;
    }

    public CorporationStarbaseResponse online(OnlineEnum onlineEnum) {

        this.onlineEnum = onlineEnum;
        return this;
    }

    /**
     * Who can online starbase (POS) and its structures
     * 
     * @return online
     **/
    @javax.annotation.Nonnull
    public OnlineEnum getOnline() {
        if (onlineEnum == null) {
            onlineEnum = OnlineEnum.fromValue(online);
        }
        return onlineEnum;
    }

    public String getOnlineString() {
        return online;
    }

    public void setOnline(OnlineEnum onlineEnum) {
        this.onlineEnum = onlineEnum;
    }

    public void setOnlineString(String online) {
        this.online = online;
    }

    public CorporationStarbaseResponse unanchorString(String unanchor) {

        this.unanchor = unanchor;
        return this;
    }

    public CorporationStarbaseResponse unanchor(UnanchorEnum unanchorEnum) {

        this.unanchorEnum = unanchorEnum;
        return this;
    }

    /**
     * Who can unanchor starbase (POS) and its structures
     * 
     * @return unanchor
     **/
    @javax.annotation.Nonnull
    public UnanchorEnum getUnanchor() {
        if (unanchorEnum == null) {
            unanchorEnum = UnanchorEnum.fromValue(unanchor);
        }
        return unanchorEnum;
    }

    public String getUnanchorString() {
        return unanchor;
    }

    public void setUnanchor(UnanchorEnum unanchorEnum) {
        this.unanchorEnum = unanchorEnum;
    }

    public void setUnanchorString(String unanchor) {
        this.unanchor = unanchor;
    }

    public CorporationStarbaseResponse useAllianceStandings(Boolean useAllianceStandings) {

        this.useAllianceStandings = useAllianceStandings;
        return this;
    }

    /**
     * True if the starbase (POS) is using alliance standings, otherwise using
     * corporation&#39;s
     * 
     * @return useAllianceStandings
     **/
    @javax.annotation.Nonnull
    public Boolean getUseAllianceStandings() {
        return useAllianceStandings;
    }

    public void setUseAllianceStandings(Boolean useAllianceStandings) {
        this.useAllianceStandings = useAllianceStandings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationStarbaseResponse corporationStarbaseResponse = (CorporationStarbaseResponse) o;
        return Objects.equals(this.allowAllianceMembers, corporationStarbaseResponse.allowAllianceMembers)
                && Objects.equals(this.allowCorporationMembers, corporationStarbaseResponse.allowCorporationMembers)
                && Objects.equals(this.anchor, corporationStarbaseResponse.anchor)
                && Objects.equals(this.attackIfAtWar, corporationStarbaseResponse.attackIfAtWar)
                && Objects.equals(this.attackIfOtherSecurityStatusDropping,
                        corporationStarbaseResponse.attackIfOtherSecurityStatusDropping)
                && Objects.equals(this.attackSecurityStatusThreshold,
                        corporationStarbaseResponse.attackSecurityStatusThreshold)
                && Objects.equals(this.attackStandingThreshold, corporationStarbaseResponse.attackStandingThreshold)
                && Objects.equals(this.fuelBayTake, corporationStarbaseResponse.fuelBayTake)
                && Objects.equals(this.fuelBayView, corporationStarbaseResponse.fuelBayView)
                && Objects.equals(this.fuels, corporationStarbaseResponse.fuels)
                && Objects.equals(this.offline, corporationStarbaseResponse.offline)
                && Objects.equals(this.online, corporationStarbaseResponse.online)
                && Objects.equals(this.unanchor, corporationStarbaseResponse.unanchor)
                && Objects.equals(this.useAllianceStandings, corporationStarbaseResponse.useAllianceStandings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allowAllianceMembers, allowCorporationMembers, anchor, attackIfAtWar,
                attackIfOtherSecurityStatusDropping, attackSecurityStatusThreshold, attackStandingThreshold,
                fuelBayTake, fuelBayView, fuels, offline, online, unanchor, useAllianceStandings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationStarbaseResponse {\n");
        sb.append("    allowAllianceMembers: ").append(toIndentedString(allowAllianceMembers)).append("\n");
        sb.append("    allowCorporationMembers: ").append(toIndentedString(allowCorporationMembers)).append("\n");
        sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
        sb.append("    attackIfAtWar: ").append(toIndentedString(attackIfAtWar)).append("\n");
        sb.append("    attackIfOtherSecurityStatusDropping: ")
                .append(toIndentedString(attackIfOtherSecurityStatusDropping)).append("\n");
        sb.append("    attackSecurityStatusThreshold: ").append(toIndentedString(attackSecurityStatusThreshold))
                .append("\n");
        sb.append("    attackStandingThreshold: ").append(toIndentedString(attackStandingThreshold)).append("\n");
        sb.append("    fuelBayTake: ").append(toIndentedString(fuelBayTake)).append("\n");
        sb.append("    fuelBayView: ").append(toIndentedString(fuelBayView)).append("\n");
        sb.append("    fuels: ").append(toIndentedString(fuels)).append("\n");
        sb.append("    offline: ").append(toIndentedString(offline)).append("\n");
        sb.append("    online: ").append(toIndentedString(online)).append("\n");
        sb.append("    unanchor: ").append(toIndentedString(unanchor)).append("\n");
        sb.append("    useAllianceStandings: ").append(toIndentedString(useAllianceStandings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("allow_alliance_members");
        openapiFields.add("allow_corporation_members");
        openapiFields.add("anchor");
        openapiFields.add("attack_if_at_war");
        openapiFields.add("attack_if_other_security_status_dropping");
        openapiFields.add("attack_security_status_threshold");
        openapiFields.add("attack_standing_threshold");
        openapiFields.add("fuel_bay_take");
        openapiFields.add("fuel_bay_view");
        openapiFields.add("fuels");
        openapiFields.add("offline");
        openapiFields.add("online");
        openapiFields.add("unanchor");
        openapiFields.add("use_alliance_standings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("allow_alliance_members");
        openapiRequiredFields.add("allow_corporation_members");
        openapiRequiredFields.add("anchor");
        openapiRequiredFields.add("attack_if_at_war");
        openapiRequiredFields.add("attack_if_other_security_status_dropping");
        openapiRequiredFields.add("fuel_bay_take");
        openapiRequiredFields.add("fuel_bay_view");
        openapiRequiredFields.add("offline");
        openapiRequiredFields.add("online");
        openapiRequiredFields.add("unanchor");
        openapiRequiredFields.add("use_alliance_standings");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CorporationStarbaseResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CorporationStarbaseResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                // required
                                                                                // fields
                                                                                // but
                                                                                // JSON
                                                                                // object
                                                                                // is
                                                                                // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CorporationStarbaseResponse is not found in the empty JSON string",
                                CorporationStarbaseResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CorporationStarbaseResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationStarbaseResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CorporationStarbaseResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (!jsonObj.get("anchor").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `anchor` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("anchor").toString()));
        }
        if (!jsonObj.get("fuel_bay_take").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `fuel_bay_take` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("fuel_bay_take").toString()));
        }
        if (!jsonObj.get("fuel_bay_view").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `fuel_bay_view` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("fuel_bay_view").toString()));
        }
        if (jsonObj.get("fuels") != null && !jsonObj.get("fuels").isJsonNull()) {
            JsonArray jsonArrayfuels = jsonObj.getAsJsonArray("fuels");
            if (jsonArrayfuels != null) {
                // ensure the json data is an array
                if (!jsonObj.get("fuels").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `fuels` to be an array in the JSON string but got `%s`",
                            jsonObj.get("fuels").toString()));
                }

                // validate the optional field `fuels` (array)
                for (int i = 0; i < jsonArrayfuels.size(); i++) {
                    CorporationStarbaseFuel.validateJsonObject(jsonArrayfuels.get(i).getAsJsonObject());
                };
            }
        }
        if (!jsonObj.get("offline").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `offline` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("offline").toString()));
        }
        if (!jsonObj.get("online").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `online` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("online").toString()));
        }
        if (!jsonObj.get("unanchor").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `unanchor` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("unanchor").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationStarbaseResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationStarbaseResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationStarbaseResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationStarbaseResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationStarbaseResponse>() {
                @Override
                public void write(JsonWriter out, CorporationStarbaseResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationStarbaseResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationStarbaseResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationStarbaseResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationStarbaseResponse
     */
    public static CorporationStarbaseResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationStarbaseResponse.class);
    }

    /**
     * Convert an instance of CorporationStarbaseResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
