/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SovereigntyStructuresResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ALLIANCE_ID = "alliance_id";
    @SerializedName(SERIALIZED_NAME_ALLIANCE_ID)
    private Integer allianceId;

    public static final String SERIALIZED_NAME_SOLAR_SYSTEM_ID = "solar_system_id";
    @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM_ID)
    private Integer solarSystemId;

    public static final String SERIALIZED_NAME_STRUCTURE_ID = "structure_id";
    @SerializedName(SERIALIZED_NAME_STRUCTURE_ID)
    private Long structureId;

    public static final String SERIALIZED_NAME_STRUCTURE_TYPE_ID = "structure_type_id";
    @SerializedName(SERIALIZED_NAME_STRUCTURE_TYPE_ID)
    private Integer structureTypeId;

    public static final String SERIALIZED_NAME_VULNERABILITY_OCCUPANCY_LEVEL = "vulnerability_occupancy_level";
    @SerializedName(SERIALIZED_NAME_VULNERABILITY_OCCUPANCY_LEVEL)
    private Float vulnerabilityOccupancyLevel;

    public static final String SERIALIZED_NAME_VULNERABLE_END_TIME = "vulnerable_end_time";
    @SerializedName(SERIALIZED_NAME_VULNERABLE_END_TIME)
    private OffsetDateTime vulnerableEndTime;

    public static final String SERIALIZED_NAME_VULNERABLE_START_TIME = "vulnerable_start_time";
    @SerializedName(SERIALIZED_NAME_VULNERABLE_START_TIME)
    private OffsetDateTime vulnerableStartTime;

    public SovereigntyStructuresResponse() {
    }

    public SovereigntyStructuresResponse allianceId(Integer allianceId) {

        this.allianceId = allianceId;
        return this;
    }

    /**
     * The alliance that owns the structure.
     * 
     * @return allianceId
     **/
    @javax.annotation.Nonnull
    public Integer getAllianceId() {
        return allianceId;
    }

    public void setAllianceId(Integer allianceId) {
        this.allianceId = allianceId;
    }

    public SovereigntyStructuresResponse solarSystemId(Integer solarSystemId) {

        this.solarSystemId = solarSystemId;
        return this;
    }

    /**
     * Solar system in which the structure is located.
     * 
     * @return solarSystemId
     **/
    @javax.annotation.Nonnull
    public Integer getSolarSystemId() {
        return solarSystemId;
    }

    public void setSolarSystemId(Integer solarSystemId) {
        this.solarSystemId = solarSystemId;
    }

    public SovereigntyStructuresResponse structureId(Long structureId) {

        this.structureId = structureId;
        return this;
    }

    /**
     * Unique item ID for this structure.
     * 
     * @return structureId
     **/
    @javax.annotation.Nonnull
    public Long getStructureId() {
        return structureId;
    }

    public void setStructureId(Long structureId) {
        this.structureId = structureId;
    }

    public SovereigntyStructuresResponse structureTypeId(Integer structureTypeId) {

        this.structureTypeId = structureTypeId;
        return this;
    }

    /**
     * A reference to the type of structure this is.
     * 
     * @return structureTypeId
     **/
    @javax.annotation.Nonnull
    public Integer getStructureTypeId() {
        return structureTypeId;
    }

    public void setStructureTypeId(Integer structureTypeId) {
        this.structureTypeId = structureTypeId;
    }

    public SovereigntyStructuresResponse vulnerabilityOccupancyLevel(Float vulnerabilityOccupancyLevel) {

        this.vulnerabilityOccupancyLevel = vulnerabilityOccupancyLevel;
        return this;
    }

    /**
     * The occupancy level for the next or current vulnerability window. This
     * takes into account all development indexes and capital system bonuses.
     * Also known as Activity Defense Multiplier from in the client. It
     * increases the time that attackers must spend using their entosis links on
     * the structure.
     * 
     * @return vulnerabilityOccupancyLevel
     **/
    @javax.annotation.Nullable
    public Float getVulnerabilityOccupancyLevel() {
        return vulnerabilityOccupancyLevel;
    }

    public void setVulnerabilityOccupancyLevel(Float vulnerabilityOccupancyLevel) {
        this.vulnerabilityOccupancyLevel = vulnerabilityOccupancyLevel;
    }

    public SovereigntyStructuresResponse vulnerableEndTime(OffsetDateTime vulnerableEndTime) {

        this.vulnerableEndTime = vulnerableEndTime;
        return this;
    }

    /**
     * The time at which the next or current vulnerability window ends. At the
     * end of a vulnerability window the next window is recalculated and locked
     * in along with the vulnerabilityOccupancyLevel. If the structure is not in
     * 100% entosis control of the defender, it will go in to &#39;overtime&#39;
     * and stay vulnerable for as long as that situation persists. Only once the
     * defenders have 100% entosis control and has the vulnerableEndTime passed
     * does the vulnerability interval expire and a new one is calculated.
     * 
     * @return vulnerableEndTime
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getVulnerableEndTime() {
        return vulnerableEndTime;
    }

    public void setVulnerableEndTime(OffsetDateTime vulnerableEndTime) {
        this.vulnerableEndTime = vulnerableEndTime;
    }

    public SovereigntyStructuresResponse vulnerableStartTime(OffsetDateTime vulnerableStartTime) {

        this.vulnerableStartTime = vulnerableStartTime;
        return this;
    }

    /**
     * The next time at which the structure will become vulnerable. Or the start
     * time of the current window if current time is between this and
     * vulnerableEndTime.
     * 
     * @return vulnerableStartTime
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getVulnerableStartTime() {
        return vulnerableStartTime;
    }

    public void setVulnerableStartTime(OffsetDateTime vulnerableStartTime) {
        this.vulnerableStartTime = vulnerableStartTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SovereigntyStructuresResponse sovereigntyStructuresResponse = (SovereigntyStructuresResponse) o;
        return Objects.equals(this.allianceId, sovereigntyStructuresResponse.allianceId)
                && Objects.equals(this.solarSystemId, sovereigntyStructuresResponse.solarSystemId)
                && Objects.equals(this.structureId, sovereigntyStructuresResponse.structureId)
                && Objects.equals(this.structureTypeId, sovereigntyStructuresResponse.structureTypeId)
                && Objects.equals(this.vulnerabilityOccupancyLevel,
                        sovereigntyStructuresResponse.vulnerabilityOccupancyLevel)
                && Objects.equals(this.vulnerableEndTime, sovereigntyStructuresResponse.vulnerableEndTime)
                && Objects.equals(this.vulnerableStartTime, sovereigntyStructuresResponse.vulnerableStartTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allianceId, solarSystemId, structureId, structureTypeId, vulnerabilityOccupancyLevel,
                vulnerableEndTime, vulnerableStartTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SovereigntyStructuresResponse {\n");
        sb.append("    allianceId: ").append(toIndentedString(allianceId)).append("\n");
        sb.append("    solarSystemId: ").append(toIndentedString(solarSystemId)).append("\n");
        sb.append("    structureId: ").append(toIndentedString(structureId)).append("\n");
        sb.append("    structureTypeId: ").append(toIndentedString(structureTypeId)).append("\n");
        sb.append("    vulnerabilityOccupancyLevel: ").append(toIndentedString(vulnerabilityOccupancyLevel))
                .append("\n");
        sb.append("    vulnerableEndTime: ").append(toIndentedString(vulnerableEndTime)).append("\n");
        sb.append("    vulnerableStartTime: ").append(toIndentedString(vulnerableStartTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("alliance_id");
        openapiFields.add("solar_system_id");
        openapiFields.add("structure_id");
        openapiFields.add("structure_type_id");
        openapiFields.add("vulnerability_occupancy_level");
        openapiFields.add("vulnerable_end_time");
        openapiFields.add("vulnerable_start_time");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("alliance_id");
        openapiRequiredFields.add("solar_system_id");
        openapiRequiredFields.add("structure_id");
        openapiRequiredFields.add("structure_type_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             SovereigntyStructuresResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!SovereigntyStructuresResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                  // required
                                                                                  // fields
                                                                                  // but
                                                                                  // JSON
                                                                                  // object
                                                                                  // is
                                                                                  // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SovereigntyStructuresResponse is not found in the empty JSON string",
                                SovereigntyStructuresResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!SovereigntyStructuresResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `SovereigntyStructuresResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : SovereigntyStructuresResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SovereigntyStructuresResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'SovereigntyStructuresResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SovereigntyStructuresResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(SovereigntyStructuresResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<SovereigntyStructuresResponse>() {
                @Override
                public void write(JsonWriter out, SovereigntyStructuresResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public SovereigntyStructuresResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of SovereigntyStructuresResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of SovereigntyStructuresResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             SovereigntyStructuresResponse
     */
    public static SovereigntyStructuresResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SovereigntyStructuresResponse.class);
    }

    /**
     * Convert an instance of SovereigntyStructuresResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
