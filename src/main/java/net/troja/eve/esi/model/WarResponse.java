/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.Aggressor;
import net.troja.eve.esi.model.Defender;
import net.troja.eve.esi.model.WarAlly;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WarResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_AGGRESSOR = "aggressor";
    @SerializedName(SERIALIZED_NAME_AGGRESSOR)
    private Aggressor aggressor;

    public static final String SERIALIZED_NAME_ALLIES = "allies";
    @SerializedName(SERIALIZED_NAME_ALLIES)
    private List<WarAlly> allies;

    public static final String SERIALIZED_NAME_DECLARED = "declared";
    @SerializedName(SERIALIZED_NAME_DECLARED)
    private OffsetDateTime declared;

    public static final String SERIALIZED_NAME_DEFENDER = "defender";
    @SerializedName(SERIALIZED_NAME_DEFENDER)
    private Defender defender;

    public static final String SERIALIZED_NAME_FINISHED = "finished";
    @SerializedName(SERIALIZED_NAME_FINISHED)
    private OffsetDateTime finished;

    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;

    public static final String SERIALIZED_NAME_MUTUAL = "mutual";
    @SerializedName(SERIALIZED_NAME_MUTUAL)
    private Boolean mutual;

    public static final String SERIALIZED_NAME_OPEN_FOR_ALLIES = "open_for_allies";
    @SerializedName(SERIALIZED_NAME_OPEN_FOR_ALLIES)
    private Boolean openForAllies;

    public static final String SERIALIZED_NAME_RETRACTED = "retracted";
    @SerializedName(SERIALIZED_NAME_RETRACTED)
    private OffsetDateTime retracted;

    public static final String SERIALIZED_NAME_STARTED = "started";
    @SerializedName(SERIALIZED_NAME_STARTED)
    private OffsetDateTime started;

    public WarResponse() {
    }

    public WarResponse aggressor(Aggressor aggressor) {

        this.aggressor = aggressor;
        return this;
    }

    /**
     * Get aggressor
     * 
     * @return aggressor
     **/
    @javax.annotation.Nonnull
    public Aggressor getAggressor() {
        return aggressor;
    }

    public void setAggressor(Aggressor aggressor) {
        this.aggressor = aggressor;
    }

    public WarResponse allies(List<WarAlly> allies) {

        this.allies = allies;
        return this;
    }

    public WarResponse addAlliesItem(WarAlly alliesItem) {
        if (this.allies == null) {
            this.allies = new ArrayList<>();
        }
        this.allies.add(alliesItem);
        return this;
    }

    /**
     * allied corporations or alliances, each object contains either
     * corporation_id or alliance_id
     * 
     * @return allies
     **/
    @javax.annotation.Nullable
    public List<WarAlly> getAllies() {
        return allies;
    }

    public void setAllies(List<WarAlly> allies) {
        this.allies = allies;
    }

    public WarResponse declared(OffsetDateTime declared) {

        this.declared = declared;
        return this;
    }

    /**
     * Time that the war was declared
     * 
     * @return declared
     **/
    @javax.annotation.Nonnull
    public OffsetDateTime getDeclared() {
        return declared;
    }

    public void setDeclared(OffsetDateTime declared) {
        this.declared = declared;
    }

    public WarResponse defender(Defender defender) {

        this.defender = defender;
        return this;
    }

    /**
     * Get defender
     * 
     * @return defender
     **/
    @javax.annotation.Nonnull
    public Defender getDefender() {
        return defender;
    }

    public void setDefender(Defender defender) {
        this.defender = defender;
    }

    public WarResponse finished(OffsetDateTime finished) {

        this.finished = finished;
        return this;
    }

    /**
     * Time the war ended and shooting was no longer allowed
     * 
     * @return finished
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getFinished() {
        return finished;
    }

    public void setFinished(OffsetDateTime finished) {
        this.finished = finished;
    }

    public WarResponse id(Integer id) {

        this.id = id;
        return this;
    }

    /**
     * ID of the specified war
     * 
     * @return id
     **/
    @javax.annotation.Nonnull
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public WarResponse mutual(Boolean mutual) {

        this.mutual = mutual;
        return this;
    }

    /**
     * Was the war declared mutual by both parties
     * 
     * @return mutual
     **/
    @javax.annotation.Nonnull
    public Boolean getMutual() {
        return mutual;
    }

    public void setMutual(Boolean mutual) {
        this.mutual = mutual;
    }

    public WarResponse openForAllies(Boolean openForAllies) {

        this.openForAllies = openForAllies;
        return this;
    }

    /**
     * Is the war currently open for allies or not
     * 
     * @return openForAllies
     **/
    @javax.annotation.Nonnull
    public Boolean getOpenForAllies() {
        return openForAllies;
    }

    public void setOpenForAllies(Boolean openForAllies) {
        this.openForAllies = openForAllies;
    }

    public WarResponse retracted(OffsetDateTime retracted) {

        this.retracted = retracted;
        return this;
    }

    /**
     * Time the war was retracted but both sides could still shoot each other
     * 
     * @return retracted
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getRetracted() {
        return retracted;
    }

    public void setRetracted(OffsetDateTime retracted) {
        this.retracted = retracted;
    }

    public WarResponse started(OffsetDateTime started) {

        this.started = started;
        return this;
    }

    /**
     * Time when the war started and both sides could shoot each other
     * 
     * @return started
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getStarted() {
        return started;
    }

    public void setStarted(OffsetDateTime started) {
        this.started = started;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WarResponse warResponse = (WarResponse) o;
        return Objects.equals(this.aggressor, warResponse.aggressor) && Objects.equals(this.allies, warResponse.allies)
                && Objects.equals(this.declared, warResponse.declared)
                && Objects.equals(this.defender, warResponse.defender)
                && Objects.equals(this.finished, warResponse.finished) && Objects.equals(this.id, warResponse.id)
                && Objects.equals(this.mutual, warResponse.mutual)
                && Objects.equals(this.openForAllies, warResponse.openForAllies)
                && Objects.equals(this.retracted, warResponse.retracted)
                && Objects.equals(this.started, warResponse.started);
    }

    @Override
    public int hashCode() {
        return Objects.hash(aggressor, allies, declared, defender, finished, id, mutual, openForAllies, retracted,
                started);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WarResponse {\n");
        sb.append("    aggressor: ").append(toIndentedString(aggressor)).append("\n");
        sb.append("    allies: ").append(toIndentedString(allies)).append("\n");
        sb.append("    declared: ").append(toIndentedString(declared)).append("\n");
        sb.append("    defender: ").append(toIndentedString(defender)).append("\n");
        sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    mutual: ").append(toIndentedString(mutual)).append("\n");
        sb.append("    openForAllies: ").append(toIndentedString(openForAllies)).append("\n");
        sb.append("    retracted: ").append(toIndentedString(retracted)).append("\n");
        sb.append("    started: ").append(toIndentedString(started)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("aggressor");
        openapiFields.add("allies");
        openapiFields.add("declared");
        openapiFields.add("defender");
        openapiFields.add("finished");
        openapiFields.add("id");
        openapiFields.add("mutual");
        openapiFields.add("open_for_allies");
        openapiFields.add("retracted");
        openapiFields.add("started");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("aggressor");
        openapiRequiredFields.add("declared");
        openapiRequiredFields.add("defender");
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("mutual");
        openapiRequiredFields.add("open_for_allies");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to WarResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!WarResponse.openapiRequiredFields.isEmpty()) { // has required
                                                                // fields but
                                                                // JSON object
                                                                // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in WarResponse is not found in the empty JSON string",
                        WarResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!WarResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format(
                        "The field `%s` in the JSON string is not defined in the `WarResponse` properties. JSON: %s",
                        entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : WarResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        // validate the required field `aggressor`
        Aggressor.validateJsonObject(jsonObj.getAsJsonObject("aggressor"));
        if (jsonObj.get("allies") != null && !jsonObj.get("allies").isJsonNull()) {
            JsonArray jsonArrayallies = jsonObj.getAsJsonArray("allies");
            if (jsonArrayallies != null) {
                // ensure the json data is an array
                if (!jsonObj.get("allies").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `allies` to be an array in the JSON string but got `%s`",
                            jsonObj.get("allies").toString()));
                }

                // validate the optional field `allies` (array)
                for (int i = 0; i < jsonArrayallies.size(); i++) {
                    WarAlly.validateJsonObject(jsonArrayallies.get(i).getAsJsonObject());
                };
            }
        }
        // validate the required field `defender`
        Defender.validateJsonObject(jsonObj.getAsJsonObject("defender"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!WarResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'WarResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<WarResponse> thisAdapter = gson
                    .getDelegateAdapter(this, TypeToken.get(WarResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<WarResponse>() {
                @Override
                public void write(JsonWriter out, WarResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public WarResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of WarResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of WarResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to WarResponse
     */
    public static WarResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, WarResponse.class);
    }

    /**
     * Convert an instance of WarResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
