/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CorporationRolesHistoryResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CHANGED_AT = "changed_at";
    @SerializedName(SERIALIZED_NAME_CHANGED_AT)
    private OffsetDateTime changedAt;

    public static final String SERIALIZED_NAME_CHARACTER_ID = "character_id";
    @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
    private Integer characterId;

    public static final String SERIALIZED_NAME_ISSUER_ID = "issuer_id";
    @SerializedName(SERIALIZED_NAME_ISSUER_ID)
    private Integer issuerId;

    /**
     * new_role string
     */
    @JsonAdapter(NewRolesEnum.Adapter.class)
    public enum NewRolesEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        NewRolesEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static NewRolesEnum fromValue(String value) {
            for (NewRolesEnum b : NewRolesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<NewRolesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final NewRolesEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public NewRolesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return NewRolesEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_NEW_ROLES = "new_roles";
    @SerializedName(SERIALIZED_NAME_NEW_ROLES)
    private List<String> newRoles = new ArrayList<>();
    private List<NewRolesEnum> newRolesEnum = new ArrayList<>();

    /**
     * old_role string
     */
    @JsonAdapter(OldRolesEnum.Adapter.class)
    public enum OldRolesEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        OldRolesEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static OldRolesEnum fromValue(String value) {
            for (OldRolesEnum b : OldRolesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<OldRolesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OldRolesEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public OldRolesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return OldRolesEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_OLD_ROLES = "old_roles";
    @SerializedName(SERIALIZED_NAME_OLD_ROLES)
    private List<String> oldRoles = new ArrayList<>();
    private List<OldRolesEnum> oldRolesEnum = new ArrayList<>();

    /**
     * role_type string
     */
    @JsonAdapter(RoleTypeEnum.Adapter.class)
    public enum RoleTypeEnum {
        GRANTABLE_ROLES("grantable_roles"),

        GRANTABLE_ROLES_AT_BASE("grantable_roles_at_base"),

        GRANTABLE_ROLES_AT_HQ("grantable_roles_at_hq"),

        GRANTABLE_ROLES_AT_OTHER("grantable_roles_at_other"),

        ROLES("roles"),

        ROLES_AT_BASE("roles_at_base"),

        ROLES_AT_HQ("roles_at_hq"),

        ROLES_AT_OTHER("roles_at_other");

        private String value;

        RoleTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RoleTypeEnum fromValue(String value) {
            for (RoleTypeEnum b : RoleTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RoleTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RoleTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RoleTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RoleTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ROLE_TYPE = "role_type";
    @SerializedName(SERIALIZED_NAME_ROLE_TYPE)
    private String roleType;
    private RoleTypeEnum roleTypeEnum;

    public CorporationRolesHistoryResponse() {
    }

    public CorporationRolesHistoryResponse changedAt(OffsetDateTime changedAt) {

        this.changedAt = changedAt;
        return this;
    }

    /**
     * changed_at string
     * 
     * @return changedAt
     **/
    @javax.annotation.Nonnull
    public OffsetDateTime getChangedAt() {
        return changedAt;
    }

    public void setChangedAt(OffsetDateTime changedAt) {
        this.changedAt = changedAt;
    }

    public CorporationRolesHistoryResponse characterId(Integer characterId) {

        this.characterId = characterId;
        return this;
    }

    /**
     * The character whose roles are changed
     * 
     * @return characterId
     **/
    @javax.annotation.Nonnull
    public Integer getCharacterId() {
        return characterId;
    }

    public void setCharacterId(Integer characterId) {
        this.characterId = characterId;
    }

    public CorporationRolesHistoryResponse issuerId(Integer issuerId) {

        this.issuerId = issuerId;
        return this;
    }

    /**
     * ID of the character who issued this change
     * 
     * @return issuerId
     **/
    @javax.annotation.Nonnull
    public Integer getIssuerId() {
        return issuerId;
    }

    public void setIssuerId(Integer issuerId) {
        this.issuerId = issuerId;
    }

    public CorporationRolesHistoryResponse newRolesString(List<String> newRoles) {

        this.newRoles = newRoles;
        return this;
    }

    public CorporationRolesHistoryResponse newRoles(List<NewRolesEnum> newRolesEnum) {

        this.newRolesEnum = newRolesEnum;
        return this;
    }

    public CorporationRolesHistoryResponse addNewRolesItem(String newRolesItem) {
        if (this.newRoles == null) {
            this.newRoles = new ArrayList<>();
        }
        this.newRoles.add(newRolesItem);
        return this;
    }

    /**
     * new_roles array
     * 
     * @return newRoles
     **/
    @javax.annotation.Nonnull
    public List<NewRolesEnum> getNewRoles() {
        if (newRolesEnum == null) {
            newRolesEnum = new ArrayList<>();
            for (String value : newRoles) {
                NewRolesEnum enumValue = NewRolesEnum.fromValue(value);
                if (enumValue != null) {
                    newRolesEnum.add(enumValue);
                }
            }
        }
        return newRolesEnum;
    }

    public List<String> getNewRolesString() {
        return newRoles;
    }

    public void setNewRoles(List<NewRolesEnum> newRolesEnum) {
        this.newRolesEnum = newRolesEnum;
    }

    public void setNewRolesString(List<String> newRoles) {
        this.newRoles = newRoles;
    }

    public CorporationRolesHistoryResponse oldRolesString(List<String> oldRoles) {

        this.oldRoles = oldRoles;
        return this;
    }

    public CorporationRolesHistoryResponse oldRoles(List<OldRolesEnum> oldRolesEnum) {

        this.oldRolesEnum = oldRolesEnum;
        return this;
    }

    public CorporationRolesHistoryResponse addOldRolesItem(String oldRolesItem) {
        if (this.oldRoles == null) {
            this.oldRoles = new ArrayList<>();
        }
        this.oldRoles.add(oldRolesItem);
        return this;
    }

    /**
     * old_roles array
     * 
     * @return oldRoles
     **/
    @javax.annotation.Nonnull
    public List<OldRolesEnum> getOldRoles() {
        if (oldRolesEnum == null) {
            oldRolesEnum = new ArrayList<>();
            for (String value : oldRoles) {
                OldRolesEnum enumValue = OldRolesEnum.fromValue(value);
                if (enumValue != null) {
                    oldRolesEnum.add(enumValue);
                }
            }
        }
        return oldRolesEnum;
    }

    public List<String> getOldRolesString() {
        return oldRoles;
    }

    public void setOldRoles(List<OldRolesEnum> oldRolesEnum) {
        this.oldRolesEnum = oldRolesEnum;
    }

    public void setOldRolesString(List<String> oldRoles) {
        this.oldRoles = oldRoles;
    }

    public CorporationRolesHistoryResponse roleTypeString(String roleType) {

        this.roleType = roleType;
        return this;
    }

    public CorporationRolesHistoryResponse roleType(RoleTypeEnum roleTypeEnum) {

        this.roleTypeEnum = roleTypeEnum;
        return this;
    }

    /**
     * role_type string
     * 
     * @return roleType
     **/
    @javax.annotation.Nonnull
    public RoleTypeEnum getRoleType() {
        if (roleTypeEnum == null) {
            roleTypeEnum = RoleTypeEnum.fromValue(roleType);
        }
        return roleTypeEnum;
    }

    public String getRoleTypeString() {
        return roleType;
    }

    public void setRoleType(RoleTypeEnum roleTypeEnum) {
        this.roleTypeEnum = roleTypeEnum;
    }

    public void setRoleTypeString(String roleType) {
        this.roleType = roleType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationRolesHistoryResponse corporationRolesHistoryResponse = (CorporationRolesHistoryResponse) o;
        return Objects.equals(this.changedAt, corporationRolesHistoryResponse.changedAt)
                && Objects.equals(this.characterId, corporationRolesHistoryResponse.characterId)
                && Objects.equals(this.issuerId, corporationRolesHistoryResponse.issuerId)
                && Objects.equals(this.newRoles, corporationRolesHistoryResponse.newRoles)
                && Objects.equals(this.oldRoles, corporationRolesHistoryResponse.oldRoles)
                && Objects.equals(this.roleType, corporationRolesHistoryResponse.roleType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(changedAt, characterId, issuerId, newRoles, oldRoles, roleType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationRolesHistoryResponse {\n");
        sb.append("    changedAt: ").append(toIndentedString(changedAt)).append("\n");
        sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
        sb.append("    issuerId: ").append(toIndentedString(issuerId)).append("\n");
        sb.append("    newRoles: ").append(toIndentedString(newRoles)).append("\n");
        sb.append("    oldRoles: ").append(toIndentedString(oldRoles)).append("\n");
        sb.append("    roleType: ").append(toIndentedString(roleType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("changed_at");
        openapiFields.add("character_id");
        openapiFields.add("issuer_id");
        openapiFields.add("new_roles");
        openapiFields.add("old_roles");
        openapiFields.add("role_type");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("changed_at");
        openapiRequiredFields.add("character_id");
        openapiRequiredFields.add("issuer_id");
        openapiRequiredFields.add("new_roles");
        openapiRequiredFields.add("old_roles");
        openapiRequiredFields.add("role_type");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CorporationRolesHistoryResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CorporationRolesHistoryResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                    // required
                                                                                    // fields
                                                                                    // but
                                                                                    // JSON
                                                                                    // object
                                                                                    // is
                                                                                    // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CorporationRolesHistoryResponse is not found in the empty JSON string",
                                CorporationRolesHistoryResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CorporationRolesHistoryResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationRolesHistoryResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CorporationRolesHistoryResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        // ensure the required json array is present
        if (jsonObj.get("new_roles") == null) {
            throw new IllegalArgumentException(
                    "Expected the field `linkedContent` to be an array in the JSON string but got `null`");
        } else if (!jsonObj.get("new_roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `new_roles` to be an array in the JSON string but got `%s`",
                    jsonObj.get("new_roles").toString()));
        }
        // ensure the required json array is present
        if (jsonObj.get("old_roles") == null) {
            throw new IllegalArgumentException(
                    "Expected the field `linkedContent` to be an array in the JSON string but got `null`");
        } else if (!jsonObj.get("old_roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `old_roles` to be an array in the JSON string but got `%s`",
                    jsonObj.get("old_roles").toString()));
        }
        if (!jsonObj.get("role_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `role_type` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("role_type").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationRolesHistoryResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationRolesHistoryResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationRolesHistoryResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationRolesHistoryResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationRolesHistoryResponse>() {
                @Override
                public void write(JsonWriter out, CorporationRolesHistoryResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationRolesHistoryResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationRolesHistoryResponse given an JSON
     * string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationRolesHistoryResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationRolesHistoryResponse
     */
    public static CorporationRolesHistoryResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationRolesHistoryResponse.class);
    }

    /**
     * Convert an instance of CorporationRolesHistoryResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
