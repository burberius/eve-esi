/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GraphicResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_COLLISION_FILE = "collision_file";
    @SerializedName(SERIALIZED_NAME_COLLISION_FILE)
    private String collisionFile;

    public static final String SERIALIZED_NAME_GRAPHIC_FILE = "graphic_file";
    @SerializedName(SERIALIZED_NAME_GRAPHIC_FILE)
    private String graphicFile;

    public static final String SERIALIZED_NAME_GRAPHIC_ID = "graphic_id";
    @SerializedName(SERIALIZED_NAME_GRAPHIC_ID)
    private Integer graphicId;

    public static final String SERIALIZED_NAME_ICON_FOLDER = "icon_folder";
    @SerializedName(SERIALIZED_NAME_ICON_FOLDER)
    private String iconFolder;

    public static final String SERIALIZED_NAME_SOF_DNA = "sof_dna";
    @SerializedName(SERIALIZED_NAME_SOF_DNA)
    private String sofDna;

    public static final String SERIALIZED_NAME_SOF_FATION_NAME = "sof_fation_name";
    @SerializedName(SERIALIZED_NAME_SOF_FATION_NAME)
    private String sofFationName;

    public static final String SERIALIZED_NAME_SOF_HULL_NAME = "sof_hull_name";
    @SerializedName(SERIALIZED_NAME_SOF_HULL_NAME)
    private String sofHullName;

    public static final String SERIALIZED_NAME_SOF_RACE_NAME = "sof_race_name";
    @SerializedName(SERIALIZED_NAME_SOF_RACE_NAME)
    private String sofRaceName;

    public GraphicResponse() {
    }

    public GraphicResponse collisionFile(String collisionFile) {

        this.collisionFile = collisionFile;
        return this;
    }

    /**
     * collision_file string
     * 
     * @return collisionFile
     **/
    @javax.annotation.Nullable
    public String getCollisionFile() {
        return collisionFile;
    }

    public void setCollisionFile(String collisionFile) {
        this.collisionFile = collisionFile;
    }

    public GraphicResponse graphicFile(String graphicFile) {

        this.graphicFile = graphicFile;
        return this;
    }

    /**
     * graphic_file string
     * 
     * @return graphicFile
     **/
    @javax.annotation.Nullable
    public String getGraphicFile() {
        return graphicFile;
    }

    public void setGraphicFile(String graphicFile) {
        this.graphicFile = graphicFile;
    }

    public GraphicResponse graphicId(Integer graphicId) {

        this.graphicId = graphicId;
        return this;
    }

    /**
     * graphic_id integer
     * 
     * @return graphicId
     **/
    @javax.annotation.Nonnull
    public Integer getGraphicId() {
        return graphicId;
    }

    public void setGraphicId(Integer graphicId) {
        this.graphicId = graphicId;
    }

    public GraphicResponse iconFolder(String iconFolder) {

        this.iconFolder = iconFolder;
        return this;
    }

    /**
     * icon_folder string
     * 
     * @return iconFolder
     **/
    @javax.annotation.Nullable
    public String getIconFolder() {
        return iconFolder;
    }

    public void setIconFolder(String iconFolder) {
        this.iconFolder = iconFolder;
    }

    public GraphicResponse sofDna(String sofDna) {

        this.sofDna = sofDna;
        return this;
    }

    /**
     * sof_dna string
     * 
     * @return sofDna
     **/
    @javax.annotation.Nullable
    public String getSofDna() {
        return sofDna;
    }

    public void setSofDna(String sofDna) {
        this.sofDna = sofDna;
    }

    public GraphicResponse sofFationName(String sofFationName) {

        this.sofFationName = sofFationName;
        return this;
    }

    /**
     * sof_fation_name string
     * 
     * @return sofFationName
     **/
    @javax.annotation.Nullable
    public String getSofFationName() {
        return sofFationName;
    }

    public void setSofFationName(String sofFationName) {
        this.sofFationName = sofFationName;
    }

    public GraphicResponse sofHullName(String sofHullName) {

        this.sofHullName = sofHullName;
        return this;
    }

    /**
     * sof_hull_name string
     * 
     * @return sofHullName
     **/
    @javax.annotation.Nullable
    public String getSofHullName() {
        return sofHullName;
    }

    public void setSofHullName(String sofHullName) {
        this.sofHullName = sofHullName;
    }

    public GraphicResponse sofRaceName(String sofRaceName) {

        this.sofRaceName = sofRaceName;
        return this;
    }

    /**
     * sof_race_name string
     * 
     * @return sofRaceName
     **/
    @javax.annotation.Nullable
    public String getSofRaceName() {
        return sofRaceName;
    }

    public void setSofRaceName(String sofRaceName) {
        this.sofRaceName = sofRaceName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GraphicResponse graphicResponse = (GraphicResponse) o;
        return Objects.equals(this.collisionFile, graphicResponse.collisionFile)
                && Objects.equals(this.graphicFile, graphicResponse.graphicFile)
                && Objects.equals(this.graphicId, graphicResponse.graphicId)
                && Objects.equals(this.iconFolder, graphicResponse.iconFolder)
                && Objects.equals(this.sofDna, graphicResponse.sofDna)
                && Objects.equals(this.sofFationName, graphicResponse.sofFationName)
                && Objects.equals(this.sofHullName, graphicResponse.sofHullName)
                && Objects.equals(this.sofRaceName, graphicResponse.sofRaceName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(collisionFile, graphicFile, graphicId, iconFolder, sofDna, sofFationName, sofHullName,
                sofRaceName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GraphicResponse {\n");
        sb.append("    collisionFile: ").append(toIndentedString(collisionFile)).append("\n");
        sb.append("    graphicFile: ").append(toIndentedString(graphicFile)).append("\n");
        sb.append("    graphicId: ").append(toIndentedString(graphicId)).append("\n");
        sb.append("    iconFolder: ").append(toIndentedString(iconFolder)).append("\n");
        sb.append("    sofDna: ").append(toIndentedString(sofDna)).append("\n");
        sb.append("    sofFationName: ").append(toIndentedString(sofFationName)).append("\n");
        sb.append("    sofHullName: ").append(toIndentedString(sofHullName)).append("\n");
        sb.append("    sofRaceName: ").append(toIndentedString(sofRaceName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("collision_file");
        openapiFields.add("graphic_file");
        openapiFields.add("graphic_id");
        openapiFields.add("icon_folder");
        openapiFields.add("sof_dna");
        openapiFields.add("sof_fation_name");
        openapiFields.add("sof_hull_name");
        openapiFields.add("sof_race_name");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("graphic_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to GraphicResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!GraphicResponse.openapiRequiredFields.isEmpty()) { // has
                                                                    // required
                                                                    // fields
                                                                    // but JSON
                                                                    // object is
                                                                    // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in GraphicResponse is not found in the empty JSON string",
                        GraphicResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!GraphicResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `GraphicResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : GraphicResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if ((jsonObj.get("collision_file") != null && !jsonObj.get("collision_file").isJsonNull())
                && !jsonObj.get("collision_file").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `collision_file` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("collision_file").toString()));
        }
        if ((jsonObj.get("graphic_file") != null && !jsonObj.get("graphic_file").isJsonNull())
                && !jsonObj.get("graphic_file").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `graphic_file` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("graphic_file").toString()));
        }
        if ((jsonObj.get("icon_folder") != null && !jsonObj.get("icon_folder").isJsonNull())
                && !jsonObj.get("icon_folder").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `icon_folder` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("icon_folder").toString()));
        }
        if ((jsonObj.get("sof_dna") != null && !jsonObj.get("sof_dna").isJsonNull())
                && !jsonObj.get("sof_dna").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `sof_dna` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("sof_dna").toString()));
        }
        if ((jsonObj.get("sof_fation_name") != null && !jsonObj.get("sof_fation_name").isJsonNull())
                && !jsonObj.get("sof_fation_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `sof_fation_name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("sof_fation_name").toString()));
        }
        if ((jsonObj.get("sof_hull_name") != null && !jsonObj.get("sof_hull_name").isJsonNull())
                && !jsonObj.get("sof_hull_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `sof_hull_name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("sof_hull_name").toString()));
        }
        if ((jsonObj.get("sof_race_name") != null && !jsonObj.get("sof_race_name").isJsonNull())
                && !jsonObj.get("sof_race_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `sof_race_name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("sof_race_name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GraphicResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GraphicResponse' and
                             // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GraphicResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(GraphicResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<GraphicResponse>() {
                @Override
                public void write(JsonWriter out, GraphicResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GraphicResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of GraphicResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of GraphicResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to GraphicResponse
     */
    public static GraphicResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GraphicResponse.class);
    }

    /**
     * Convert an instance of GraphicResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
