/*
 * ESI Meta Spec
 * ESI specs and miscellaneous routes
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * SSO /verify JSON
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EsiVerifyResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CHARACTER_I_D = "CharacterID";
    @SerializedName(SERIALIZED_NAME_CHARACTER_I_D)
    private Integer characterID;

    public static final String SERIALIZED_NAME_CHARACTER_NAME = "CharacterName";
    @SerializedName(SERIALIZED_NAME_CHARACTER_NAME)
    private String characterName;

    public static final String SERIALIZED_NAME_CHARACTER_OWNER_HASH = "CharacterOwnerHash";
    @SerializedName(SERIALIZED_NAME_CHARACTER_OWNER_HASH)
    private String characterOwnerHash;

    public static final String SERIALIZED_NAME_EXPIRES_ON = "ExpiresOn";
    @SerializedName(SERIALIZED_NAME_EXPIRES_ON)
    private String expiresOn;

    public static final String SERIALIZED_NAME_INTELLECTUAL_PROPERTY = "IntellectualProperty";
    @SerializedName(SERIALIZED_NAME_INTELLECTUAL_PROPERTY)
    private String intellectualProperty;

    public static final String SERIALIZED_NAME_SCOPES = "Scopes";
    @SerializedName(SERIALIZED_NAME_SCOPES)
    private String scopes;

    public static final String SERIALIZED_NAME_TOKEN_TYPE = "TokenType";
    @SerializedName(SERIALIZED_NAME_TOKEN_TYPE)
    private String tokenType;

    public EsiVerifyResponse() {
    }

    public EsiVerifyResponse characterID(Integer characterID) {

        this.characterID = characterID;
        return this;
    }

    /**
     * Token owner&#39;s character ID
     * 
     * @return characterID
     **/
    @javax.annotation.Nonnull
    public Integer getCharacterID() {
        return characterID;
    }

    public void setCharacterID(Integer characterID) {
        this.characterID = characterID;
    }

    public EsiVerifyResponse characterName(String characterName) {

        this.characterName = characterName;
        return this;
    }

    /**
     * Token owner&#39;s character name
     * 
     * @return characterName
     **/
    @javax.annotation.Nullable
    public String getCharacterName() {
        return characterName;
    }

    public void setCharacterName(String characterName) {
        this.characterName = characterName;
    }

    public EsiVerifyResponse characterOwnerHash(String characterOwnerHash) {

        this.characterOwnerHash = characterOwnerHash;
        return this;
    }

    /**
     * Hash of the character&#39;s owner. If the character is sold or otherwise
     * transferred, this will change
     * 
     * @return characterOwnerHash
     **/
    @javax.annotation.Nullable
    public String getCharacterOwnerHash() {
        return characterOwnerHash;
    }

    public void setCharacterOwnerHash(String characterOwnerHash) {
        this.characterOwnerHash = characterOwnerHash;
    }

    public EsiVerifyResponse expiresOn(String expiresOn) {

        this.expiresOn = expiresOn;
        return this;
    }

    /**
     * Expiry time of the token (not RFC3339)
     * 
     * @return expiresOn
     **/
    @javax.annotation.Nullable
    public String getExpiresOn() {
        return expiresOn;
    }

    public void setExpiresOn(String expiresOn) {
        this.expiresOn = expiresOn;
    }

    public EsiVerifyResponse intellectualProperty(String intellectualProperty) {

        this.intellectualProperty = intellectualProperty;
        return this;
    }

    /**
     * The IP which generated the token
     * 
     * @return intellectualProperty
     **/
    @javax.annotation.Nullable
    public String getIntellectualProperty() {
        return intellectualProperty;
    }

    public void setIntellectualProperty(String intellectualProperty) {
        this.intellectualProperty = intellectualProperty;
    }

    public EsiVerifyResponse scopes(String scopes) {

        this.scopes = scopes;
        return this;
    }

    /**
     * Space separated list of scopes the token is valid for
     * 
     * @return scopes
     **/
    @javax.annotation.Nullable
    public String getScopes() {
        return scopes;
    }

    public void setScopes(String scopes) {
        this.scopes = scopes;
    }

    public EsiVerifyResponse tokenType(String tokenType) {

        this.tokenType = tokenType;
        return this;
    }

    /**
     * Type of access token
     * 
     * @return tokenType
     **/
    @javax.annotation.Nullable
    public String getTokenType() {
        return tokenType;
    }

    public void setTokenType(String tokenType) {
        this.tokenType = tokenType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EsiVerifyResponse esiVerifyResponse = (EsiVerifyResponse) o;
        return Objects.equals(this.characterID, esiVerifyResponse.characterID)
                && Objects.equals(this.characterName, esiVerifyResponse.characterName)
                && Objects.equals(this.characterOwnerHash, esiVerifyResponse.characterOwnerHash)
                && Objects.equals(this.expiresOn, esiVerifyResponse.expiresOn)
                && Objects.equals(this.intellectualProperty, esiVerifyResponse.intellectualProperty)
                && Objects.equals(this.scopes, esiVerifyResponse.scopes)
                && Objects.equals(this.tokenType, esiVerifyResponse.tokenType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(characterID, characterName, characterOwnerHash, expiresOn, intellectualProperty, scopes,
                tokenType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EsiVerifyResponse {\n");
        sb.append("    characterID: ").append(toIndentedString(characterID)).append("\n");
        sb.append("    characterName: ").append(toIndentedString(characterName)).append("\n");
        sb.append("    characterOwnerHash: ").append(toIndentedString(characterOwnerHash)).append("\n");
        sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
        sb.append("    intellectualProperty: ").append(toIndentedString(intellectualProperty)).append("\n");
        sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
        sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("CharacterID");
        openapiFields.add("CharacterName");
        openapiFields.add("CharacterOwnerHash");
        openapiFields.add("ExpiresOn");
        openapiFields.add("IntellectualProperty");
        openapiFields.add("Scopes");
        openapiFields.add("TokenType");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("CharacterID");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             EsiVerifyResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!EsiVerifyResponse.openapiRequiredFields.isEmpty()) { // has
                                                                      // required
                                                                      // fields
                                                                      // but
                                                                      // JSON
                                                                      // object
                                                                      // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in EsiVerifyResponse is not found in the empty JSON string",
                        EsiVerifyResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!EsiVerifyResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `EsiVerifyResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : EsiVerifyResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if ((jsonObj.get("CharacterName") != null && !jsonObj.get("CharacterName").isJsonNull())
                && !jsonObj.get("CharacterName").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `CharacterName` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("CharacterName").toString()));
        }
        if ((jsonObj.get("CharacterOwnerHash") != null && !jsonObj.get("CharacterOwnerHash").isJsonNull())
                && !jsonObj.get("CharacterOwnerHash").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `CharacterOwnerHash` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("CharacterOwnerHash").toString()));
        }
        if ((jsonObj.get("ExpiresOn") != null && !jsonObj.get("ExpiresOn").isJsonNull())
                && !jsonObj.get("ExpiresOn").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `ExpiresOn` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("ExpiresOn").toString()));
        }
        if ((jsonObj.get("IntellectualProperty") != null && !jsonObj.get("IntellectualProperty").isJsonNull())
                && !jsonObj.get("IntellectualProperty").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `IntellectualProperty` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("IntellectualProperty").toString()));
        }
        if ((jsonObj.get("Scopes") != null && !jsonObj.get("Scopes").isJsonNull())
                && !jsonObj.get("Scopes").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `Scopes` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("Scopes").toString()));
        }
        if ((jsonObj.get("TokenType") != null && !jsonObj.get("TokenType").isJsonNull())
                && !jsonObj.get("TokenType").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `TokenType` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("TokenType").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EsiVerifyResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EsiVerifyResponse'
                             // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EsiVerifyResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(EsiVerifyResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<EsiVerifyResponse>() {
                @Override
                public void write(JsonWriter out, EsiVerifyResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public EsiVerifyResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of EsiVerifyResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of EsiVerifyResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             EsiVerifyResponse
     */
    public static EsiVerifyResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EsiVerifyResponse.class);
    }

    /**
     * Convert an instance of EsiVerifyResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
