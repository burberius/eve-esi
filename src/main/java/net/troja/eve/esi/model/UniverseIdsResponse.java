/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.UniverseIdsAgent;
import net.troja.eve.esi.model.UniverseIdsAlliance;
import net.troja.eve.esi.model.UniverseIdsCharacter;
import net.troja.eve.esi.model.UniverseIdsConstellation;
import net.troja.eve.esi.model.UniverseIdsCorporation;
import net.troja.eve.esi.model.UniverseIdsFaction;
import net.troja.eve.esi.model.UniverseIdsInventoryType;
import net.troja.eve.esi.model.UniverseIdsRegion;
import net.troja.eve.esi.model.UniverseIdsStation;
import net.troja.eve.esi.model.UniverseIdsSystem;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UniverseIdsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_AGENTS = "agents";
    @SerializedName(SERIALIZED_NAME_AGENTS)
    private List<UniverseIdsAgent> agents;

    public static final String SERIALIZED_NAME_ALLIANCES = "alliances";
    @SerializedName(SERIALIZED_NAME_ALLIANCES)
    private List<UniverseIdsAlliance> alliances;

    public static final String SERIALIZED_NAME_CHARACTERS = "characters";
    @SerializedName(SERIALIZED_NAME_CHARACTERS)
    private List<UniverseIdsCharacter> characters;

    public static final String SERIALIZED_NAME_CONSTELLATIONS = "constellations";
    @SerializedName(SERIALIZED_NAME_CONSTELLATIONS)
    private List<UniverseIdsConstellation> constellations;

    public static final String SERIALIZED_NAME_CORPORATIONS = "corporations";
    @SerializedName(SERIALIZED_NAME_CORPORATIONS)
    private List<UniverseIdsCorporation> corporations;

    public static final String SERIALIZED_NAME_FACTIONS = "factions";
    @SerializedName(SERIALIZED_NAME_FACTIONS)
    private List<UniverseIdsFaction> factions;

    public static final String SERIALIZED_NAME_INVENTORY_TYPES = "inventory_types";
    @SerializedName(SERIALIZED_NAME_INVENTORY_TYPES)
    private List<UniverseIdsInventoryType> inventoryTypes;

    public static final String SERIALIZED_NAME_REGIONS = "regions";
    @SerializedName(SERIALIZED_NAME_REGIONS)
    private List<UniverseIdsRegion> regions;

    public static final String SERIALIZED_NAME_STATIONS = "stations";
    @SerializedName(SERIALIZED_NAME_STATIONS)
    private List<UniverseIdsStation> stations;

    public static final String SERIALIZED_NAME_SYSTEMS = "systems";
    @SerializedName(SERIALIZED_NAME_SYSTEMS)
    private List<UniverseIdsSystem> systems;

    public UniverseIdsResponse() {
    }

    public UniverseIdsResponse agents(List<UniverseIdsAgent> agents) {

        this.agents = agents;
        return this;
    }

    public UniverseIdsResponse addAgentsItem(UniverseIdsAgent agentsItem) {
        if (this.agents == null) {
            this.agents = new ArrayList<>();
        }
        this.agents.add(agentsItem);
        return this;
    }

    /**
     * agents array
     * 
     * @return agents
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsAgent> getAgents() {
        return agents;
    }

    public void setAgents(List<UniverseIdsAgent> agents) {
        this.agents = agents;
    }

    public UniverseIdsResponse alliances(List<UniverseIdsAlliance> alliances) {

        this.alliances = alliances;
        return this;
    }

    public UniverseIdsResponse addAlliancesItem(UniverseIdsAlliance alliancesItem) {
        if (this.alliances == null) {
            this.alliances = new ArrayList<>();
        }
        this.alliances.add(alliancesItem);
        return this;
    }

    /**
     * alliances array
     * 
     * @return alliances
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsAlliance> getAlliances() {
        return alliances;
    }

    public void setAlliances(List<UniverseIdsAlliance> alliances) {
        this.alliances = alliances;
    }

    public UniverseIdsResponse characters(List<UniverseIdsCharacter> characters) {

        this.characters = characters;
        return this;
    }

    public UniverseIdsResponse addCharactersItem(UniverseIdsCharacter charactersItem) {
        if (this.characters == null) {
            this.characters = new ArrayList<>();
        }
        this.characters.add(charactersItem);
        return this;
    }

    /**
     * characters array
     * 
     * @return characters
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsCharacter> getCharacters() {
        return characters;
    }

    public void setCharacters(List<UniverseIdsCharacter> characters) {
        this.characters = characters;
    }

    public UniverseIdsResponse constellations(List<UniverseIdsConstellation> constellations) {

        this.constellations = constellations;
        return this;
    }

    public UniverseIdsResponse addConstellationsItem(UniverseIdsConstellation constellationsItem) {
        if (this.constellations == null) {
            this.constellations = new ArrayList<>();
        }
        this.constellations.add(constellationsItem);
        return this;
    }

    /**
     * constellations array
     * 
     * @return constellations
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsConstellation> getConstellations() {
        return constellations;
    }

    public void setConstellations(List<UniverseIdsConstellation> constellations) {
        this.constellations = constellations;
    }

    public UniverseIdsResponse corporations(List<UniverseIdsCorporation> corporations) {

        this.corporations = corporations;
        return this;
    }

    public UniverseIdsResponse addCorporationsItem(UniverseIdsCorporation corporationsItem) {
        if (this.corporations == null) {
            this.corporations = new ArrayList<>();
        }
        this.corporations.add(corporationsItem);
        return this;
    }

    /**
     * corporations array
     * 
     * @return corporations
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsCorporation> getCorporations() {
        return corporations;
    }

    public void setCorporations(List<UniverseIdsCorporation> corporations) {
        this.corporations = corporations;
    }

    public UniverseIdsResponse factions(List<UniverseIdsFaction> factions) {

        this.factions = factions;
        return this;
    }

    public UniverseIdsResponse addFactionsItem(UniverseIdsFaction factionsItem) {
        if (this.factions == null) {
            this.factions = new ArrayList<>();
        }
        this.factions.add(factionsItem);
        return this;
    }

    /**
     * factions array
     * 
     * @return factions
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsFaction> getFactions() {
        return factions;
    }

    public void setFactions(List<UniverseIdsFaction> factions) {
        this.factions = factions;
    }

    public UniverseIdsResponse inventoryTypes(List<UniverseIdsInventoryType> inventoryTypes) {

        this.inventoryTypes = inventoryTypes;
        return this;
    }

    public UniverseIdsResponse addInventoryTypesItem(UniverseIdsInventoryType inventoryTypesItem) {
        if (this.inventoryTypes == null) {
            this.inventoryTypes = new ArrayList<>();
        }
        this.inventoryTypes.add(inventoryTypesItem);
        return this;
    }

    /**
     * inventory_types array
     * 
     * @return inventoryTypes
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsInventoryType> getInventoryTypes() {
        return inventoryTypes;
    }

    public void setInventoryTypes(List<UniverseIdsInventoryType> inventoryTypes) {
        this.inventoryTypes = inventoryTypes;
    }

    public UniverseIdsResponse regions(List<UniverseIdsRegion> regions) {

        this.regions = regions;
        return this;
    }

    public UniverseIdsResponse addRegionsItem(UniverseIdsRegion regionsItem) {
        if (this.regions == null) {
            this.regions = new ArrayList<>();
        }
        this.regions.add(regionsItem);
        return this;
    }

    /**
     * regions array
     * 
     * @return regions
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsRegion> getRegions() {
        return regions;
    }

    public void setRegions(List<UniverseIdsRegion> regions) {
        this.regions = regions;
    }

    public UniverseIdsResponse stations(List<UniverseIdsStation> stations) {

        this.stations = stations;
        return this;
    }

    public UniverseIdsResponse addStationsItem(UniverseIdsStation stationsItem) {
        if (this.stations == null) {
            this.stations = new ArrayList<>();
        }
        this.stations.add(stationsItem);
        return this;
    }

    /**
     * stations array
     * 
     * @return stations
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsStation> getStations() {
        return stations;
    }

    public void setStations(List<UniverseIdsStation> stations) {
        this.stations = stations;
    }

    public UniverseIdsResponse systems(List<UniverseIdsSystem> systems) {

        this.systems = systems;
        return this;
    }

    public UniverseIdsResponse addSystemsItem(UniverseIdsSystem systemsItem) {
        if (this.systems == null) {
            this.systems = new ArrayList<>();
        }
        this.systems.add(systemsItem);
        return this;
    }

    /**
     * systems array
     * 
     * @return systems
     **/
    @javax.annotation.Nullable
    public List<UniverseIdsSystem> getSystems() {
        return systems;
    }

    public void setSystems(List<UniverseIdsSystem> systems) {
        this.systems = systems;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UniverseIdsResponse universeIdsResponse = (UniverseIdsResponse) o;
        return Objects.equals(this.agents, universeIdsResponse.agents)
                && Objects.equals(this.alliances, universeIdsResponse.alliances)
                && Objects.equals(this.characters, universeIdsResponse.characters)
                && Objects.equals(this.constellations, universeIdsResponse.constellations)
                && Objects.equals(this.corporations, universeIdsResponse.corporations)
                && Objects.equals(this.factions, universeIdsResponse.factions)
                && Objects.equals(this.inventoryTypes, universeIdsResponse.inventoryTypes)
                && Objects.equals(this.regions, universeIdsResponse.regions)
                && Objects.equals(this.stations, universeIdsResponse.stations)
                && Objects.equals(this.systems, universeIdsResponse.systems);
    }

    @Override
    public int hashCode() {
        return Objects.hash(agents, alliances, characters, constellations, corporations, factions, inventoryTypes,
                regions, stations, systems);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UniverseIdsResponse {\n");
        sb.append("    agents: ").append(toIndentedString(agents)).append("\n");
        sb.append("    alliances: ").append(toIndentedString(alliances)).append("\n");
        sb.append("    characters: ").append(toIndentedString(characters)).append("\n");
        sb.append("    constellations: ").append(toIndentedString(constellations)).append("\n");
        sb.append("    corporations: ").append(toIndentedString(corporations)).append("\n");
        sb.append("    factions: ").append(toIndentedString(factions)).append("\n");
        sb.append("    inventoryTypes: ").append(toIndentedString(inventoryTypes)).append("\n");
        sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
        sb.append("    stations: ").append(toIndentedString(stations)).append("\n");
        sb.append("    systems: ").append(toIndentedString(systems)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("agents");
        openapiFields.add("alliances");
        openapiFields.add("characters");
        openapiFields.add("constellations");
        openapiFields.add("corporations");
        openapiFields.add("factions");
        openapiFields.add("inventory_types");
        openapiFields.add("regions");
        openapiFields.add("stations");
        openapiFields.add("systems");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             UniverseIdsResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!UniverseIdsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                        // required
                                                                        // fields
                                                                        // but
                                                                        // JSON
                                                                        // object
                                                                        // is
                                                                        // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in UniverseIdsResponse is not found in the empty JSON string",
                        UniverseIdsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!UniverseIdsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `UniverseIdsResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if (jsonObj.get("agents") != null && !jsonObj.get("agents").isJsonNull()) {
            JsonArray jsonArrayagents = jsonObj.getAsJsonArray("agents");
            if (jsonArrayagents != null) {
                // ensure the json data is an array
                if (!jsonObj.get("agents").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `agents` to be an array in the JSON string but got `%s`",
                            jsonObj.get("agents").toString()));
                }

                // validate the optional field `agents` (array)
                for (int i = 0; i < jsonArrayagents.size(); i++) {
                    UniverseIdsAgent.validateJsonObject(jsonArrayagents.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("alliances") != null && !jsonObj.get("alliances").isJsonNull()) {
            JsonArray jsonArrayalliances = jsonObj.getAsJsonArray("alliances");
            if (jsonArrayalliances != null) {
                // ensure the json data is an array
                if (!jsonObj.get("alliances").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `alliances` to be an array in the JSON string but got `%s`", jsonObj
                                    .get("alliances").toString()));
                }

                // validate the optional field `alliances` (array)
                for (int i = 0; i < jsonArrayalliances.size(); i++) {
                    UniverseIdsAlliance.validateJsonObject(jsonArrayalliances.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("characters") != null && !jsonObj.get("characters").isJsonNull()) {
            JsonArray jsonArraycharacters = jsonObj.getAsJsonArray("characters");
            if (jsonArraycharacters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("characters").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `characters` to be an array in the JSON string but got `%s`", jsonObj
                                    .get("characters").toString()));
                }

                // validate the optional field `characters` (array)
                for (int i = 0; i < jsonArraycharacters.size(); i++) {
                    UniverseIdsCharacter.validateJsonObject(jsonArraycharacters.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("constellations") != null && !jsonObj.get("constellations").isJsonNull()) {
            JsonArray jsonArrayconstellations = jsonObj.getAsJsonArray("constellations");
            if (jsonArrayconstellations != null) {
                // ensure the json data is an array
                if (!jsonObj.get("constellations").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `constellations` to be an array in the JSON string but got `%s`",
                            jsonObj.get("constellations").toString()));
                }

                // validate the optional field `constellations` (array)
                for (int i = 0; i < jsonArrayconstellations.size(); i++) {
                    UniverseIdsConstellation.validateJsonObject(jsonArrayconstellations.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("corporations") != null && !jsonObj.get("corporations").isJsonNull()) {
            JsonArray jsonArraycorporations = jsonObj.getAsJsonArray("corporations");
            if (jsonArraycorporations != null) {
                // ensure the json data is an array
                if (!jsonObj.get("corporations").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `corporations` to be an array in the JSON string but got `%s`", jsonObj
                                    .get("corporations").toString()));
                }

                // validate the optional field `corporations` (array)
                for (int i = 0; i < jsonArraycorporations.size(); i++) {
                    UniverseIdsCorporation.validateJsonObject(jsonArraycorporations.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("factions") != null && !jsonObj.get("factions").isJsonNull()) {
            JsonArray jsonArrayfactions = jsonObj.getAsJsonArray("factions");
            if (jsonArrayfactions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("factions").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `factions` to be an array in the JSON string but got `%s`", jsonObj
                                    .get("factions").toString()));
                }

                // validate the optional field `factions` (array)
                for (int i = 0; i < jsonArrayfactions.size(); i++) {
                    UniverseIdsFaction.validateJsonObject(jsonArrayfactions.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("inventory_types") != null && !jsonObj.get("inventory_types").isJsonNull()) {
            JsonArray jsonArrayinventoryTypes = jsonObj.getAsJsonArray("inventory_types");
            if (jsonArrayinventoryTypes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("inventory_types").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `inventory_types` to be an array in the JSON string but got `%s`",
                            jsonObj.get("inventory_types").toString()));
                }

                // validate the optional field `inventory_types` (array)
                for (int i = 0; i < jsonArrayinventoryTypes.size(); i++) {
                    UniverseIdsInventoryType.validateJsonObject(jsonArrayinventoryTypes.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull()) {
            JsonArray jsonArrayregions = jsonObj.getAsJsonArray("regions");
            if (jsonArrayregions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("regions").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `regions` to be an array in the JSON string but got `%s`",
                            jsonObj.get("regions").toString()));
                }

                // validate the optional field `regions` (array)
                for (int i = 0; i < jsonArrayregions.size(); i++) {
                    UniverseIdsRegion.validateJsonObject(jsonArrayregions.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("stations") != null && !jsonObj.get("stations").isJsonNull()) {
            JsonArray jsonArraystations = jsonObj.getAsJsonArray("stations");
            if (jsonArraystations != null) {
                // ensure the json data is an array
                if (!jsonObj.get("stations").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `stations` to be an array in the JSON string but got `%s`", jsonObj
                                    .get("stations").toString()));
                }

                // validate the optional field `stations` (array)
                for (int i = 0; i < jsonArraystations.size(); i++) {
                    UniverseIdsStation.validateJsonObject(jsonArraystations.get(i).getAsJsonObject());
                };
            }
        }
        if (jsonObj.get("systems") != null && !jsonObj.get("systems").isJsonNull()) {
            JsonArray jsonArraysystems = jsonObj.getAsJsonArray("systems");
            if (jsonArraysystems != null) {
                // ensure the json data is an array
                if (!jsonObj.get("systems").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `systems` to be an array in the JSON string but got `%s`",
                            jsonObj.get("systems").toString()));
                }

                // validate the optional field `systems` (array)
                for (int i = 0; i < jsonArraysystems.size(); i++) {
                    UniverseIdsSystem.validateJsonObject(jsonArraysystems.get(i).getAsJsonObject());
                };
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UniverseIdsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UniverseIdsResponse'
                             // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UniverseIdsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(UniverseIdsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<UniverseIdsResponse>() {
                @Override
                public void write(JsonWriter out, UniverseIdsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public UniverseIdsResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of UniverseIdsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of UniverseIdsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             UniverseIdsResponse
     */
    public static UniverseIdsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UniverseIdsResponse.class);
    }

    /**
     * Convert an instance of UniverseIdsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
