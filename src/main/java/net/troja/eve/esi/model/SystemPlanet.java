/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * planet object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SystemPlanet implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ASTEROID_BELTS = "asteroid_belts";
    @SerializedName(SERIALIZED_NAME_ASTEROID_BELTS)
    private List<Integer> asteroidBelts;

    public static final String SERIALIZED_NAME_MOONS = "moons";
    @SerializedName(SERIALIZED_NAME_MOONS)
    private List<Integer> moons;

    public static final String SERIALIZED_NAME_PLANET_ID = "planet_id";
    @SerializedName(SERIALIZED_NAME_PLANET_ID)
    private Integer planetId;

    public SystemPlanet() {
    }

    public SystemPlanet asteroidBelts(List<Integer> asteroidBelts) {

        this.asteroidBelts = asteroidBelts;
        return this;
    }

    public SystemPlanet addAsteroidBeltsItem(Integer asteroidBeltsItem) {
        if (this.asteroidBelts == null) {
            this.asteroidBelts = new ArrayList<>();
        }
        this.asteroidBelts.add(asteroidBeltsItem);
        return this;
    }

    /**
     * asteroid_belts array
     * 
     * @return asteroidBelts
     **/
    @javax.annotation.Nullable
    public List<Integer> getAsteroidBelts() {
        return asteroidBelts;
    }

    public void setAsteroidBelts(List<Integer> asteroidBelts) {
        this.asteroidBelts = asteroidBelts;
    }

    public SystemPlanet moons(List<Integer> moons) {

        this.moons = moons;
        return this;
    }

    public SystemPlanet addMoonsItem(Integer moonsItem) {
        if (this.moons == null) {
            this.moons = new ArrayList<>();
        }
        this.moons.add(moonsItem);
        return this;
    }

    /**
     * moons array
     * 
     * @return moons
     **/
    @javax.annotation.Nullable
    public List<Integer> getMoons() {
        return moons;
    }

    public void setMoons(List<Integer> moons) {
        this.moons = moons;
    }

    public SystemPlanet planetId(Integer planetId) {

        this.planetId = planetId;
        return this;
    }

    /**
     * planet_id integer
     * 
     * @return planetId
     **/
    @javax.annotation.Nonnull
    public Integer getPlanetId() {
        return planetId;
    }

    public void setPlanetId(Integer planetId) {
        this.planetId = planetId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SystemPlanet systemPlanet = (SystemPlanet) o;
        return Objects.equals(this.asteroidBelts, systemPlanet.asteroidBelts)
                && Objects.equals(this.moons, systemPlanet.moons)
                && Objects.equals(this.planetId, systemPlanet.planetId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(asteroidBelts, moons, planetId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SystemPlanet {\n");
        sb.append("    asteroidBelts: ").append(toIndentedString(asteroidBelts)).append("\n");
        sb.append("    moons: ").append(toIndentedString(moons)).append("\n");
        sb.append("    planetId: ").append(toIndentedString(planetId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("asteroid_belts");
        openapiFields.add("moons");
        openapiFields.add("planet_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("planet_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to SystemPlanet
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!SystemPlanet.openapiRequiredFields.isEmpty()) { // has required
                                                                 // fields but
                                                                 // JSON object
                                                                 // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in SystemPlanet is not found in the empty JSON string",
                        SystemPlanet.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!SystemPlanet.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format(
                        "The field `%s` in the JSON string is not defined in the `SystemPlanet` properties. JSON: %s",
                        entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : SystemPlanet.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("asteroid_belts") != null && !jsonObj.get("asteroid_belts").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `asteroid_belts` to be an array in the JSON string but got `%s`",
                    jsonObj.get("asteroid_belts").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("moons") != null && !jsonObj.get("moons").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `moons` to be an array in the JSON string but got `%s`", jsonObj.get("moons")
                            .toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SystemPlanet.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SystemPlanet' and
                             // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SystemPlanet> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(SystemPlanet.class));

            return (TypeAdapter<T>) new TypeAdapter<SystemPlanet>() {
                @Override
                public void write(JsonWriter out, SystemPlanet value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public SystemPlanet read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of SystemPlanet given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of SystemPlanet
     * @throws IOException
     *             if the JSON string is invalid with respect to SystemPlanet
     */
    public static SystemPlanet fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SystemPlanet.class);
    }

    /**
     * Convert an instance of SystemPlanet to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
