/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CharacterSearchResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_AGENT = "agent";
    @SerializedName(SERIALIZED_NAME_AGENT)
    private List<Integer> agent;

    public static final String SERIALIZED_NAME_ALLIANCE = "alliance";
    @SerializedName(SERIALIZED_NAME_ALLIANCE)
    private List<Integer> alliance;

    public static final String SERIALIZED_NAME_CHARACTER = "character";
    @SerializedName(SERIALIZED_NAME_CHARACTER)
    private List<Integer> character;

    public static final String SERIALIZED_NAME_CONSTELLATION = "constellation";
    @SerializedName(SERIALIZED_NAME_CONSTELLATION)
    private List<Integer> constellation;

    public static final String SERIALIZED_NAME_CORPORATION = "corporation";
    @SerializedName(SERIALIZED_NAME_CORPORATION)
    private List<Integer> corporation;

    public static final String SERIALIZED_NAME_FACTION = "faction";
    @SerializedName(SERIALIZED_NAME_FACTION)
    private List<Integer> faction;

    public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventory_type";
    @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
    private List<Integer> inventoryType;

    public static final String SERIALIZED_NAME_REGION = "region";
    @SerializedName(SERIALIZED_NAME_REGION)
    private List<Integer> region;

    public static final String SERIALIZED_NAME_SOLAR_SYSTEM = "solar_system";
    @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM)
    private List<Integer> solarSystem;

    public static final String SERIALIZED_NAME_STATION = "station";
    @SerializedName(SERIALIZED_NAME_STATION)
    private List<Integer> station;

    public static final String SERIALIZED_NAME_STRUCTURE = "structure";
    @SerializedName(SERIALIZED_NAME_STRUCTURE)
    private List<Long> structure;

    public CharacterSearchResponse() {
    }

    public CharacterSearchResponse agent(List<Integer> agent) {

        this.agent = agent;
        return this;
    }

    public CharacterSearchResponse addAgentItem(Integer agentItem) {
        if (this.agent == null) {
            this.agent = new ArrayList<>();
        }
        this.agent.add(agentItem);
        return this;
    }

    /**
     * agent array
     * 
     * @return agent
     **/
    @javax.annotation.Nullable
    public List<Integer> getAgent() {
        return agent;
    }

    public void setAgent(List<Integer> agent) {
        this.agent = agent;
    }

    public CharacterSearchResponse alliance(List<Integer> alliance) {

        this.alliance = alliance;
        return this;
    }

    public CharacterSearchResponse addAllianceItem(Integer allianceItem) {
        if (this.alliance == null) {
            this.alliance = new ArrayList<>();
        }
        this.alliance.add(allianceItem);
        return this;
    }

    /**
     * alliance array
     * 
     * @return alliance
     **/
    @javax.annotation.Nullable
    public List<Integer> getAlliance() {
        return alliance;
    }

    public void setAlliance(List<Integer> alliance) {
        this.alliance = alliance;
    }

    public CharacterSearchResponse character(List<Integer> character) {

        this.character = character;
        return this;
    }

    public CharacterSearchResponse addCharacterItem(Integer characterItem) {
        if (this.character == null) {
            this.character = new ArrayList<>();
        }
        this.character.add(characterItem);
        return this;
    }

    /**
     * character array
     * 
     * @return character
     **/
    @javax.annotation.Nullable
    public List<Integer> getCharacter() {
        return character;
    }

    public void setCharacter(List<Integer> character) {
        this.character = character;
    }

    public CharacterSearchResponse constellation(List<Integer> constellation) {

        this.constellation = constellation;
        return this;
    }

    public CharacterSearchResponse addConstellationItem(Integer constellationItem) {
        if (this.constellation == null) {
            this.constellation = new ArrayList<>();
        }
        this.constellation.add(constellationItem);
        return this;
    }

    /**
     * constellation array
     * 
     * @return constellation
     **/
    @javax.annotation.Nullable
    public List<Integer> getConstellation() {
        return constellation;
    }

    public void setConstellation(List<Integer> constellation) {
        this.constellation = constellation;
    }

    public CharacterSearchResponse corporation(List<Integer> corporation) {

        this.corporation = corporation;
        return this;
    }

    public CharacterSearchResponse addCorporationItem(Integer corporationItem) {
        if (this.corporation == null) {
            this.corporation = new ArrayList<>();
        }
        this.corporation.add(corporationItem);
        return this;
    }

    /**
     * corporation array
     * 
     * @return corporation
     **/
    @javax.annotation.Nullable
    public List<Integer> getCorporation() {
        return corporation;
    }

    public void setCorporation(List<Integer> corporation) {
        this.corporation = corporation;
    }

    public CharacterSearchResponse faction(List<Integer> faction) {

        this.faction = faction;
        return this;
    }

    public CharacterSearchResponse addFactionItem(Integer factionItem) {
        if (this.faction == null) {
            this.faction = new ArrayList<>();
        }
        this.faction.add(factionItem);
        return this;
    }

    /**
     * faction array
     * 
     * @return faction
     **/
    @javax.annotation.Nullable
    public List<Integer> getFaction() {
        return faction;
    }

    public void setFaction(List<Integer> faction) {
        this.faction = faction;
    }

    public CharacterSearchResponse inventoryType(List<Integer> inventoryType) {

        this.inventoryType = inventoryType;
        return this;
    }

    public CharacterSearchResponse addInventoryTypeItem(Integer inventoryTypeItem) {
        if (this.inventoryType == null) {
            this.inventoryType = new ArrayList<>();
        }
        this.inventoryType.add(inventoryTypeItem);
        return this;
    }

    /**
     * inventory_type array
     * 
     * @return inventoryType
     **/
    @javax.annotation.Nullable
    public List<Integer> getInventoryType() {
        return inventoryType;
    }

    public void setInventoryType(List<Integer> inventoryType) {
        this.inventoryType = inventoryType;
    }

    public CharacterSearchResponse region(List<Integer> region) {

        this.region = region;
        return this;
    }

    public CharacterSearchResponse addRegionItem(Integer regionItem) {
        if (this.region == null) {
            this.region = new ArrayList<>();
        }
        this.region.add(regionItem);
        return this;
    }

    /**
     * region array
     * 
     * @return region
     **/
    @javax.annotation.Nullable
    public List<Integer> getRegion() {
        return region;
    }

    public void setRegion(List<Integer> region) {
        this.region = region;
    }

    public CharacterSearchResponse solarSystem(List<Integer> solarSystem) {

        this.solarSystem = solarSystem;
        return this;
    }

    public CharacterSearchResponse addSolarSystemItem(Integer solarSystemItem) {
        if (this.solarSystem == null) {
            this.solarSystem = new ArrayList<>();
        }
        this.solarSystem.add(solarSystemItem);
        return this;
    }

    /**
     * solar_system array
     * 
     * @return solarSystem
     **/
    @javax.annotation.Nullable
    public List<Integer> getSolarSystem() {
        return solarSystem;
    }

    public void setSolarSystem(List<Integer> solarSystem) {
        this.solarSystem = solarSystem;
    }

    public CharacterSearchResponse station(List<Integer> station) {

        this.station = station;
        return this;
    }

    public CharacterSearchResponse addStationItem(Integer stationItem) {
        if (this.station == null) {
            this.station = new ArrayList<>();
        }
        this.station.add(stationItem);
        return this;
    }

    /**
     * station array
     * 
     * @return station
     **/
    @javax.annotation.Nullable
    public List<Integer> getStation() {
        return station;
    }

    public void setStation(List<Integer> station) {
        this.station = station;
    }

    public CharacterSearchResponse structure(List<Long> structure) {

        this.structure = structure;
        return this;
    }

    public CharacterSearchResponse addStructureItem(Long structureItem) {
        if (this.structure == null) {
            this.structure = new ArrayList<>();
        }
        this.structure.add(structureItem);
        return this;
    }

    /**
     * structure array
     * 
     * @return structure
     **/
    @javax.annotation.Nullable
    public List<Long> getStructure() {
        return structure;
    }

    public void setStructure(List<Long> structure) {
        this.structure = structure;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterSearchResponse characterSearchResponse = (CharacterSearchResponse) o;
        return Objects.equals(this.agent, characterSearchResponse.agent)
                && Objects.equals(this.alliance, characterSearchResponse.alliance)
                && Objects.equals(this.character, characterSearchResponse.character)
                && Objects.equals(this.constellation, characterSearchResponse.constellation)
                && Objects.equals(this.corporation, characterSearchResponse.corporation)
                && Objects.equals(this.faction, characterSearchResponse.faction)
                && Objects.equals(this.inventoryType, characterSearchResponse.inventoryType)
                && Objects.equals(this.region, characterSearchResponse.region)
                && Objects.equals(this.solarSystem, characterSearchResponse.solarSystem)
                && Objects.equals(this.station, characterSearchResponse.station)
                && Objects.equals(this.structure, characterSearchResponse.structure);
    }

    @Override
    public int hashCode() {
        return Objects.hash(agent, alliance, character, constellation, corporation, faction, inventoryType, region,
                solarSystem, station, structure);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterSearchResponse {\n");
        sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
        sb.append("    alliance: ").append(toIndentedString(alliance)).append("\n");
        sb.append("    character: ").append(toIndentedString(character)).append("\n");
        sb.append("    constellation: ").append(toIndentedString(constellation)).append("\n");
        sb.append("    corporation: ").append(toIndentedString(corporation)).append("\n");
        sb.append("    faction: ").append(toIndentedString(faction)).append("\n");
        sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
        sb.append("    region: ").append(toIndentedString(region)).append("\n");
        sb.append("    solarSystem: ").append(toIndentedString(solarSystem)).append("\n");
        sb.append("    station: ").append(toIndentedString(station)).append("\n");
        sb.append("    structure: ").append(toIndentedString(structure)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("agent");
        openapiFields.add("alliance");
        openapiFields.add("character");
        openapiFields.add("constellation");
        openapiFields.add("corporation");
        openapiFields.add("faction");
        openapiFields.add("inventory_type");
        openapiFields.add("region");
        openapiFields.add("solar_system");
        openapiFields.add("station");
        openapiFields.add("structure");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CharacterSearchResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CharacterSearchResponse.openapiRequiredFields.isEmpty()) { // has
                                                                            // required
                                                                            // fields
                                                                            // but
                                                                            // JSON
                                                                            // object
                                                                            // is
                                                                            // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CharacterSearchResponse is not found in the empty JSON string",
                        CharacterSearchResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CharacterSearchResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterSearchResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("agent") != null && !jsonObj.get("agent").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `agent` to be an array in the JSON string but got `%s`", jsonObj.get("agent")
                            .toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("alliance") != null && !jsonObj.get("alliance").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `alliance` to be an array in the JSON string but got `%s`",
                    jsonObj.get("alliance").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("character") != null && !jsonObj.get("character").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `character` to be an array in the JSON string but got `%s`",
                    jsonObj.get("character").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("constellation") != null && !jsonObj.get("constellation").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `constellation` to be an array in the JSON string but got `%s`",
                    jsonObj.get("constellation").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("corporation") != null && !jsonObj.get("corporation").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `corporation` to be an array in the JSON string but got `%s`",
                    jsonObj.get("corporation").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("faction") != null && !jsonObj.get("faction").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `faction` to be an array in the JSON string but got `%s`",
                    jsonObj.get("faction").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("inventory_type") != null && !jsonObj.get("inventory_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `inventory_type` to be an array in the JSON string but got `%s`",
                    jsonObj.get("inventory_type").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `region` to be an array in the JSON string but got `%s`", jsonObj.get("region")
                            .toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("solar_system") != null && !jsonObj.get("solar_system").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `solar_system` to be an array in the JSON string but got `%s`",
                    jsonObj.get("solar_system").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("station") != null && !jsonObj.get("station").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `station` to be an array in the JSON string but got `%s`",
                    jsonObj.get("station").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("structure") != null && !jsonObj.get("structure").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `structure` to be an array in the JSON string but got `%s`",
                    jsonObj.get("structure").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterSearchResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterSearchResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterSearchResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterSearchResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterSearchResponse>() {
                @Override
                public void write(JsonWriter out, CharacterSearchResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterSearchResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterSearchResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterSearchResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterSearchResponse
     */
    public static CharacterSearchResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterSearchResponse.class);
    }

    /**
     * Convert an instance of CharacterSearchResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
