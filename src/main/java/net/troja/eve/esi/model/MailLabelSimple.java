/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * label object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MailLabelSimple implements Serializable {
    private static final long serialVersionUID = 1L;

    /**
     * Hexadecimal string representing label color, in RGB format
     */
    @JsonAdapter(ColorEnum.Adapter.class)
    public enum ColorEnum {
        _0000FE("#0000fe"),

        _006634("#006634"),

        _0099FF("#0099ff"),

        _00FF33("#00ff33"),

        _01FFFF("#01ffff"),

        _349800("#349800"),

        _660066("#660066"),

        _666666("#666666"),

        _999999("#999999"),

        _99FFFF("#99ffff"),

        _9A0000("#9a0000"),

        CCFF9A("#ccff9a"),

        E6E6E6("#e6e6e6"),

        FE0000("#fe0000"),

        FF6600("#ff6600"),

        FFFF01("#ffff01"),

        FFFFCD("#ffffcd"),

        FFFFFF("#ffffff");

        private String value;

        ColorEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ColorEnum fromValue(String value) {
            for (ColorEnum b : ColorEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ColorEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ColorEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ColorEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ColorEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_COLOR = "color";
    @SerializedName(SERIALIZED_NAME_COLOR)
    private String color = ColorEnum.FFFFFF.name();
    private ColorEnum colorEnum = ColorEnum.FFFFFF;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public MailLabelSimple() {
    }

    public MailLabelSimple colorString(String color) {

        this.color = color;
        return this;
    }

    public MailLabelSimple color(ColorEnum colorEnum) {

        this.colorEnum = colorEnum;
        return this;
    }

    /**
     * Hexadecimal string representing label color, in RGB format
     * 
     * @return color
     **/
    @javax.annotation.Nullable
    public ColorEnum getColor() {
        if (colorEnum == null) {
            colorEnum = ColorEnum.fromValue(color);
        }
        return colorEnum;
    }

    public String getColorString() {
        return color;
    }

    public void setColor(ColorEnum colorEnum) {
        this.colorEnum = colorEnum;
    }

    public void setColorString(String color) {
        this.color = color;
    }

    public MailLabelSimple name(String name) {

        this.name = name;
        return this;
    }

    /**
     * name string
     * 
     * @return name
     **/
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MailLabelSimple mailLabelSimple = (MailLabelSimple) o;
        return Objects.equals(this.color, mailLabelSimple.color) && Objects.equals(this.name, mailLabelSimple.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(color, name);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MailLabelSimple {\n");
        sb.append("    color: ").append(toIndentedString(color)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("color");
        openapiFields.add("name");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("name");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to MailLabelSimple
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!MailLabelSimple.openapiRequiredFields.isEmpty()) { // has
                                                                    // required
                                                                    // fields
                                                                    // but JSON
                                                                    // object is
                                                                    // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in MailLabelSimple is not found in the empty JSON string",
                        MailLabelSimple.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!MailLabelSimple.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `MailLabelSimple` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : MailLabelSimple.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull())
                && !jsonObj.get("color").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `color` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("color").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MailLabelSimple.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MailLabelSimple' and
                             // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MailLabelSimple> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(MailLabelSimple.class));

            return (TypeAdapter<T>) new TypeAdapter<MailLabelSimple>() {
                @Override
                public void write(JsonWriter out, MailLabelSimple value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public MailLabelSimple read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of MailLabelSimple given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of MailLabelSimple
     * @throws IOException
     *             if the JSON string is invalid with respect to MailLabelSimple
     */
    public static MailLabelSimple fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MailLabelSimple.class);
    }

    /**
     * Convert an instance of MailLabelSimple to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
