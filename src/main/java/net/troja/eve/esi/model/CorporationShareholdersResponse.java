/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CorporationShareholdersResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_SHARE_COUNT = "share_count";
    @SerializedName(SERIALIZED_NAME_SHARE_COUNT)
    private Long shareCount;

    public static final String SERIALIZED_NAME_SHAREHOLDER_ID = "shareholder_id";
    @SerializedName(SERIALIZED_NAME_SHAREHOLDER_ID)
    private Integer shareholderId;

    /**
     * shareholder_type string
     */
    @JsonAdapter(ShareholderTypeEnum.Adapter.class)
    public enum ShareholderTypeEnum {
        CHARACTER("character"),

        CORPORATION("corporation");

        private String value;

        ShareholderTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ShareholderTypeEnum fromValue(String value) {
            for (ShareholderTypeEnum b : ShareholderTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ShareholderTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ShareholderTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ShareholderTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ShareholderTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_SHAREHOLDER_TYPE = "shareholder_type";
    @SerializedName(SERIALIZED_NAME_SHAREHOLDER_TYPE)
    private String shareholderType;
    private ShareholderTypeEnum shareholderTypeEnum;

    public CorporationShareholdersResponse() {
    }

    public CorporationShareholdersResponse shareCount(Long shareCount) {

        this.shareCount = shareCount;
        return this;
    }

    /**
     * share_count integer
     * 
     * @return shareCount
     **/
    @javax.annotation.Nonnull
    public Long getShareCount() {
        return shareCount;
    }

    public void setShareCount(Long shareCount) {
        this.shareCount = shareCount;
    }

    public CorporationShareholdersResponse shareholderId(Integer shareholderId) {

        this.shareholderId = shareholderId;
        return this;
    }

    /**
     * shareholder_id integer
     * 
     * @return shareholderId
     **/
    @javax.annotation.Nonnull
    public Integer getShareholderId() {
        return shareholderId;
    }

    public void setShareholderId(Integer shareholderId) {
        this.shareholderId = shareholderId;
    }

    public CorporationShareholdersResponse shareholderTypeString(String shareholderType) {

        this.shareholderType = shareholderType;
        return this;
    }

    public CorporationShareholdersResponse shareholderType(ShareholderTypeEnum shareholderTypeEnum) {

        this.shareholderTypeEnum = shareholderTypeEnum;
        return this;
    }

    /**
     * shareholder_type string
     * 
     * @return shareholderType
     **/
    @javax.annotation.Nonnull
    public ShareholderTypeEnum getShareholderType() {
        if (shareholderTypeEnum == null) {
            shareholderTypeEnum = ShareholderTypeEnum.fromValue(shareholderType);
        }
        return shareholderTypeEnum;
    }

    public String getShareholderTypeString() {
        return shareholderType;
    }

    public void setShareholderType(ShareholderTypeEnum shareholderTypeEnum) {
        this.shareholderTypeEnum = shareholderTypeEnum;
    }

    public void setShareholderTypeString(String shareholderType) {
        this.shareholderType = shareholderType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationShareholdersResponse corporationShareholdersResponse = (CorporationShareholdersResponse) o;
        return Objects.equals(this.shareCount, corporationShareholdersResponse.shareCount)
                && Objects.equals(this.shareholderId, corporationShareholdersResponse.shareholderId)
                && Objects.equals(this.shareholderType, corporationShareholdersResponse.shareholderType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(shareCount, shareholderId, shareholderType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationShareholdersResponse {\n");
        sb.append("    shareCount: ").append(toIndentedString(shareCount)).append("\n");
        sb.append("    shareholderId: ").append(toIndentedString(shareholderId)).append("\n");
        sb.append("    shareholderType: ").append(toIndentedString(shareholderType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("share_count");
        openapiFields.add("shareholder_id");
        openapiFields.add("shareholder_type");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("share_count");
        openapiRequiredFields.add("shareholder_id");
        openapiRequiredFields.add("shareholder_type");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CorporationShareholdersResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CorporationShareholdersResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                    // required
                                                                                    // fields
                                                                                    // but
                                                                                    // JSON
                                                                                    // object
                                                                                    // is
                                                                                    // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CorporationShareholdersResponse is not found in the empty JSON string",
                                CorporationShareholdersResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CorporationShareholdersResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationShareholdersResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CorporationShareholdersResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (!jsonObj.get("shareholder_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `shareholder_type` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("shareholder_type").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationShareholdersResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationShareholdersResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationShareholdersResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationShareholdersResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationShareholdersResponse>() {
                @Override
                public void write(JsonWriter out, CorporationShareholdersResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationShareholdersResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationShareholdersResponse given an JSON
     * string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationShareholdersResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationShareholdersResponse
     */
    public static CorporationShareholdersResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationShareholdersResponse.class);
    }

    /**
     * Convert an instance of CorporationShareholdersResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
