/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CharacterResearchAgentsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_AGENT_ID = "agent_id";
    @SerializedName(SERIALIZED_NAME_AGENT_ID)
    private Integer agentId;

    public static final String SERIALIZED_NAME_POINTS_PER_DAY = "points_per_day";
    @SerializedName(SERIALIZED_NAME_POINTS_PER_DAY)
    private Float pointsPerDay;

    public static final String SERIALIZED_NAME_REMAINDER_POINTS = "remainder_points";
    @SerializedName(SERIALIZED_NAME_REMAINDER_POINTS)
    private Float remainderPoints;

    public static final String SERIALIZED_NAME_SKILL_TYPE_ID = "skill_type_id";
    @SerializedName(SERIALIZED_NAME_SKILL_TYPE_ID)
    private Integer skillTypeId;

    public static final String SERIALIZED_NAME_STARTED_AT = "started_at";
    @SerializedName(SERIALIZED_NAME_STARTED_AT)
    private OffsetDateTime startedAt;

    public CharacterResearchAgentsResponse() {
    }

    public CharacterResearchAgentsResponse agentId(Integer agentId) {

        this.agentId = agentId;
        return this;
    }

    /**
     * agent_id integer
     * 
     * @return agentId
     **/
    @javax.annotation.Nonnull
    public Integer getAgentId() {
        return agentId;
    }

    public void setAgentId(Integer agentId) {
        this.agentId = agentId;
    }

    public CharacterResearchAgentsResponse pointsPerDay(Float pointsPerDay) {

        this.pointsPerDay = pointsPerDay;
        return this;
    }

    /**
     * points_per_day number
     * 
     * @return pointsPerDay
     **/
    @javax.annotation.Nonnull
    public Float getPointsPerDay() {
        return pointsPerDay;
    }

    public void setPointsPerDay(Float pointsPerDay) {
        this.pointsPerDay = pointsPerDay;
    }

    public CharacterResearchAgentsResponse remainderPoints(Float remainderPoints) {

        this.remainderPoints = remainderPoints;
        return this;
    }

    /**
     * remainder_points number
     * 
     * @return remainderPoints
     **/
    @javax.annotation.Nonnull
    public Float getRemainderPoints() {
        return remainderPoints;
    }

    public void setRemainderPoints(Float remainderPoints) {
        this.remainderPoints = remainderPoints;
    }

    public CharacterResearchAgentsResponse skillTypeId(Integer skillTypeId) {

        this.skillTypeId = skillTypeId;
        return this;
    }

    /**
     * skill_type_id integer
     * 
     * @return skillTypeId
     **/
    @javax.annotation.Nonnull
    public Integer getSkillTypeId() {
        return skillTypeId;
    }

    public void setSkillTypeId(Integer skillTypeId) {
        this.skillTypeId = skillTypeId;
    }

    public CharacterResearchAgentsResponse startedAt(OffsetDateTime startedAt) {

        this.startedAt = startedAt;
        return this;
    }

    /**
     * started_at string
     * 
     * @return startedAt
     **/
    @javax.annotation.Nonnull
    public OffsetDateTime getStartedAt() {
        return startedAt;
    }

    public void setStartedAt(OffsetDateTime startedAt) {
        this.startedAt = startedAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterResearchAgentsResponse characterResearchAgentsResponse = (CharacterResearchAgentsResponse) o;
        return Objects.equals(this.agentId, characterResearchAgentsResponse.agentId)
                && Objects.equals(this.pointsPerDay, characterResearchAgentsResponse.pointsPerDay)
                && Objects.equals(this.remainderPoints, characterResearchAgentsResponse.remainderPoints)
                && Objects.equals(this.skillTypeId, characterResearchAgentsResponse.skillTypeId)
                && Objects.equals(this.startedAt, characterResearchAgentsResponse.startedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(agentId, pointsPerDay, remainderPoints, skillTypeId, startedAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterResearchAgentsResponse {\n");
        sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
        sb.append("    pointsPerDay: ").append(toIndentedString(pointsPerDay)).append("\n");
        sb.append("    remainderPoints: ").append(toIndentedString(remainderPoints)).append("\n");
        sb.append("    skillTypeId: ").append(toIndentedString(skillTypeId)).append("\n");
        sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("agent_id");
        openapiFields.add("points_per_day");
        openapiFields.add("remainder_points");
        openapiFields.add("skill_type_id");
        openapiFields.add("started_at");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("agent_id");
        openapiRequiredFields.add("points_per_day");
        openapiRequiredFields.add("remainder_points");
        openapiRequiredFields.add("skill_type_id");
        openapiRequiredFields.add("started_at");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CharacterResearchAgentsResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CharacterResearchAgentsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                    // required
                                                                                    // fields
                                                                                    // but
                                                                                    // JSON
                                                                                    // object
                                                                                    // is
                                                                                    // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CharacterResearchAgentsResponse is not found in the empty JSON string",
                                CharacterResearchAgentsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CharacterResearchAgentsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterResearchAgentsResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterResearchAgentsResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterResearchAgentsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterResearchAgentsResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterResearchAgentsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterResearchAgentsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterResearchAgentsResponse>() {
                @Override
                public void write(JsonWriter out, CharacterResearchAgentsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterResearchAgentsResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterResearchAgentsResponse given an JSON
     * string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterResearchAgentsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterResearchAgentsResponse
     */
    public static CharacterResearchAgentsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterResearchAgentsResponse.class);
    }

    /**
     * Convert an instance of CharacterResearchAgentsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
