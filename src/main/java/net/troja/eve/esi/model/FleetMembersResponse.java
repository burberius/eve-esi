/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FleetMembersResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CHARACTER_ID = "character_id";
    @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
    private Integer characterId;

    public static final String SERIALIZED_NAME_JOIN_TIME = "join_time";
    @SerializedName(SERIALIZED_NAME_JOIN_TIME)
    private OffsetDateTime joinTime;

    /**
     * Member’s role in fleet
     */
    @JsonAdapter(RoleEnum.Adapter.class)
    public enum RoleEnum {
        FLEET_COMMANDER("fleet_commander"),

        WING_COMMANDER("wing_commander"),

        SQUAD_COMMANDER("squad_commander"),

        SQUAD_MEMBER("squad_member");

        private String value;

        RoleEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RoleEnum fromValue(String value) {
            for (RoleEnum b : RoleEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RoleEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RoleEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RoleEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ROLE = "role";
    @SerializedName(SERIALIZED_NAME_ROLE)
    private String role;
    private RoleEnum roleEnum;

    public static final String SERIALIZED_NAME_ROLE_NAME = "role_name";
    @SerializedName(SERIALIZED_NAME_ROLE_NAME)
    private String roleName;

    public static final String SERIALIZED_NAME_SHIP_TYPE_ID = "ship_type_id";
    @SerializedName(SERIALIZED_NAME_SHIP_TYPE_ID)
    private Integer shipTypeId;

    public static final String SERIALIZED_NAME_SOLAR_SYSTEM_ID = "solar_system_id";
    @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM_ID)
    private Integer solarSystemId;

    public static final String SERIALIZED_NAME_SQUAD_ID = "squad_id";
    @SerializedName(SERIALIZED_NAME_SQUAD_ID)
    private Long squadId;

    public static final String SERIALIZED_NAME_STATION_ID = "station_id";
    @SerializedName(SERIALIZED_NAME_STATION_ID)
    private Long stationId;

    public static final String SERIALIZED_NAME_TAKES_FLEET_WARP = "takes_fleet_warp";
    @SerializedName(SERIALIZED_NAME_TAKES_FLEET_WARP)
    private Boolean takesFleetWarp;

    public static final String SERIALIZED_NAME_WING_ID = "wing_id";
    @SerializedName(SERIALIZED_NAME_WING_ID)
    private Long wingId;

    public FleetMembersResponse() {
    }

    public FleetMembersResponse characterId(Integer characterId) {

        this.characterId = characterId;
        return this;
    }

    /**
     * character_id integer
     * 
     * @return characterId
     **/
    @javax.annotation.Nonnull
    public Integer getCharacterId() {
        return characterId;
    }

    public void setCharacterId(Integer characterId) {
        this.characterId = characterId;
    }

    public FleetMembersResponse joinTime(OffsetDateTime joinTime) {

        this.joinTime = joinTime;
        return this;
    }

    /**
     * join_time string
     * 
     * @return joinTime
     **/
    @javax.annotation.Nonnull
    public OffsetDateTime getJoinTime() {
        return joinTime;
    }

    public void setJoinTime(OffsetDateTime joinTime) {
        this.joinTime = joinTime;
    }

    public FleetMembersResponse roleString(String role) {

        this.role = role;
        return this;
    }

    public FleetMembersResponse role(RoleEnum roleEnum) {

        this.roleEnum = roleEnum;
        return this;
    }

    /**
     * Member’s role in fleet
     * 
     * @return role
     **/
    @javax.annotation.Nonnull
    public RoleEnum getRole() {
        if (roleEnum == null) {
            roleEnum = RoleEnum.fromValue(role);
        }
        return roleEnum;
    }

    public String getRoleString() {
        return role;
    }

    public void setRole(RoleEnum roleEnum) {
        this.roleEnum = roleEnum;
    }

    public void setRoleString(String role) {
        this.role = role;
    }

    public FleetMembersResponse roleName(String roleName) {

        this.roleName = roleName;
        return this;
    }

    /**
     * Localized role names
     * 
     * @return roleName
     **/
    @javax.annotation.Nonnull
    public String getRoleName() {
        return roleName;
    }

    public void setRoleName(String roleName) {
        this.roleName = roleName;
    }

    public FleetMembersResponse shipTypeId(Integer shipTypeId) {

        this.shipTypeId = shipTypeId;
        return this;
    }

    /**
     * ship_type_id integer
     * 
     * @return shipTypeId
     **/
    @javax.annotation.Nonnull
    public Integer getShipTypeId() {
        return shipTypeId;
    }

    public void setShipTypeId(Integer shipTypeId) {
        this.shipTypeId = shipTypeId;
    }

    public FleetMembersResponse solarSystemId(Integer solarSystemId) {

        this.solarSystemId = solarSystemId;
        return this;
    }

    /**
     * Solar system the member is located in
     * 
     * @return solarSystemId
     **/
    @javax.annotation.Nonnull
    public Integer getSolarSystemId() {
        return solarSystemId;
    }

    public void setSolarSystemId(Integer solarSystemId) {
        this.solarSystemId = solarSystemId;
    }

    public FleetMembersResponse squadId(Long squadId) {

        this.squadId = squadId;
        return this;
    }

    /**
     * ID of the squad the member is in. If not applicable, will be set to -1
     * 
     * @return squadId
     **/
    @javax.annotation.Nonnull
    public Long getSquadId() {
        return squadId;
    }

    public void setSquadId(Long squadId) {
        this.squadId = squadId;
    }

    public FleetMembersResponse stationId(Long stationId) {

        this.stationId = stationId;
        return this;
    }

    /**
     * Station in which the member is docked in, if applicable
     * 
     * @return stationId
     **/
    @javax.annotation.Nullable
    public Long getStationId() {
        return stationId;
    }

    public void setStationId(Long stationId) {
        this.stationId = stationId;
    }

    public FleetMembersResponse takesFleetWarp(Boolean takesFleetWarp) {

        this.takesFleetWarp = takesFleetWarp;
        return this;
    }

    /**
     * Whether the member take fleet warps
     * 
     * @return takesFleetWarp
     **/
    @javax.annotation.Nonnull
    public Boolean getTakesFleetWarp() {
        return takesFleetWarp;
    }

    public void setTakesFleetWarp(Boolean takesFleetWarp) {
        this.takesFleetWarp = takesFleetWarp;
    }

    public FleetMembersResponse wingId(Long wingId) {

        this.wingId = wingId;
        return this;
    }

    /**
     * ID of the wing the member is in. If not applicable, will be set to -1
     * 
     * @return wingId
     **/
    @javax.annotation.Nonnull
    public Long getWingId() {
        return wingId;
    }

    public void setWingId(Long wingId) {
        this.wingId = wingId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FleetMembersResponse fleetMembersResponse = (FleetMembersResponse) o;
        return Objects.equals(this.characterId, fleetMembersResponse.characterId)
                && Objects.equals(this.joinTime, fleetMembersResponse.joinTime)
                && Objects.equals(this.role, fleetMembersResponse.role)
                && Objects.equals(this.roleName, fleetMembersResponse.roleName)
                && Objects.equals(this.shipTypeId, fleetMembersResponse.shipTypeId)
                && Objects.equals(this.solarSystemId, fleetMembersResponse.solarSystemId)
                && Objects.equals(this.squadId, fleetMembersResponse.squadId)
                && Objects.equals(this.stationId, fleetMembersResponse.stationId)
                && Objects.equals(this.takesFleetWarp, fleetMembersResponse.takesFleetWarp)
                && Objects.equals(this.wingId, fleetMembersResponse.wingId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(characterId, joinTime, role, roleName, shipTypeId, solarSystemId, squadId, stationId,
                takesFleetWarp, wingId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FleetMembersResponse {\n");
        sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
        sb.append("    joinTime: ").append(toIndentedString(joinTime)).append("\n");
        sb.append("    role: ").append(toIndentedString(role)).append("\n");
        sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
        sb.append("    shipTypeId: ").append(toIndentedString(shipTypeId)).append("\n");
        sb.append("    solarSystemId: ").append(toIndentedString(solarSystemId)).append("\n");
        sb.append("    squadId: ").append(toIndentedString(squadId)).append("\n");
        sb.append("    stationId: ").append(toIndentedString(stationId)).append("\n");
        sb.append("    takesFleetWarp: ").append(toIndentedString(takesFleetWarp)).append("\n");
        sb.append("    wingId: ").append(toIndentedString(wingId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("character_id");
        openapiFields.add("join_time");
        openapiFields.add("role");
        openapiFields.add("role_name");
        openapiFields.add("ship_type_id");
        openapiFields.add("solar_system_id");
        openapiFields.add("squad_id");
        openapiFields.add("station_id");
        openapiFields.add("takes_fleet_warp");
        openapiFields.add("wing_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("character_id");
        openapiRequiredFields.add("join_time");
        openapiRequiredFields.add("role");
        openapiRequiredFields.add("role_name");
        openapiRequiredFields.add("ship_type_id");
        openapiRequiredFields.add("solar_system_id");
        openapiRequiredFields.add("squad_id");
        openapiRequiredFields.add("takes_fleet_warp");
        openapiRequiredFields.add("wing_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             FleetMembersResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FleetMembersResponse.openapiRequiredFields.isEmpty()) { // has
                                                                         // required
                                                                         // fields
                                                                         // but
                                                                         // JSON
                                                                         // object
                                                                         // is
                                                                         // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in FleetMembersResponse is not found in the empty JSON string",
                        FleetMembersResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FleetMembersResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `FleetMembersResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : FleetMembersResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (!jsonObj.get("role").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `role` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("role").toString()));
        }
        if (!jsonObj.get("role_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `role_name` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("role_name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FleetMembersResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'FleetMembersResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FleetMembersResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(FleetMembersResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<FleetMembersResponse>() {
                @Override
                public void write(JsonWriter out, FleetMembersResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public FleetMembersResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of FleetMembersResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of FleetMembersResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             FleetMembersResponse
     */
    public static FleetMembersResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FleetMembersResponse.class);
    }

    /**
     * Convert an instance of FleetMembersResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
