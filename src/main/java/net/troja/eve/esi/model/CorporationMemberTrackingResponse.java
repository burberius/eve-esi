/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CorporationMemberTrackingResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_BASE_ID = "base_id";
    @SerializedName(SERIALIZED_NAME_BASE_ID)
    private Integer baseId;

    public static final String SERIALIZED_NAME_CHARACTER_ID = "character_id";
    @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
    private Integer characterId;

    public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
    @SerializedName(SERIALIZED_NAME_LOCATION_ID)
    private Long locationId;

    public static final String SERIALIZED_NAME_LOGOFF_DATE = "logoff_date";
    @SerializedName(SERIALIZED_NAME_LOGOFF_DATE)
    private OffsetDateTime logoffDate;

    public static final String SERIALIZED_NAME_LOGON_DATE = "logon_date";
    @SerializedName(SERIALIZED_NAME_LOGON_DATE)
    private OffsetDateTime logonDate;

    public static final String SERIALIZED_NAME_SHIP_TYPE_ID = "ship_type_id";
    @SerializedName(SERIALIZED_NAME_SHIP_TYPE_ID)
    private Integer shipTypeId;

    public static final String SERIALIZED_NAME_START_DATE = "start_date";
    @SerializedName(SERIALIZED_NAME_START_DATE)
    private OffsetDateTime startDate;

    public CorporationMemberTrackingResponse() {
    }

    public CorporationMemberTrackingResponse baseId(Integer baseId) {

        this.baseId = baseId;
        return this;
    }

    /**
     * base_id integer
     * 
     * @return baseId
     **/
    @javax.annotation.Nullable
    public Integer getBaseId() {
        return baseId;
    }

    public void setBaseId(Integer baseId) {
        this.baseId = baseId;
    }

    public CorporationMemberTrackingResponse characterId(Integer characterId) {

        this.characterId = characterId;
        return this;
    }

    /**
     * character_id integer
     * 
     * @return characterId
     **/
    @javax.annotation.Nonnull
    public Integer getCharacterId() {
        return characterId;
    }

    public void setCharacterId(Integer characterId) {
        this.characterId = characterId;
    }

    public CorporationMemberTrackingResponse locationId(Long locationId) {

        this.locationId = locationId;
        return this;
    }

    /**
     * location_id integer
     * 
     * @return locationId
     **/
    @javax.annotation.Nullable
    public Long getLocationId() {
        return locationId;
    }

    public void setLocationId(Long locationId) {
        this.locationId = locationId;
    }

    public CorporationMemberTrackingResponse logoffDate(OffsetDateTime logoffDate) {

        this.logoffDate = logoffDate;
        return this;
    }

    /**
     * logoff_date string
     * 
     * @return logoffDate
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getLogoffDate() {
        return logoffDate;
    }

    public void setLogoffDate(OffsetDateTime logoffDate) {
        this.logoffDate = logoffDate;
    }

    public CorporationMemberTrackingResponse logonDate(OffsetDateTime logonDate) {

        this.logonDate = logonDate;
        return this;
    }

    /**
     * logon_date string
     * 
     * @return logonDate
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getLogonDate() {
        return logonDate;
    }

    public void setLogonDate(OffsetDateTime logonDate) {
        this.logonDate = logonDate;
    }

    public CorporationMemberTrackingResponse shipTypeId(Integer shipTypeId) {

        this.shipTypeId = shipTypeId;
        return this;
    }

    /**
     * ship_type_id integer
     * 
     * @return shipTypeId
     **/
    @javax.annotation.Nullable
    public Integer getShipTypeId() {
        return shipTypeId;
    }

    public void setShipTypeId(Integer shipTypeId) {
        this.shipTypeId = shipTypeId;
    }

    public CorporationMemberTrackingResponse startDate(OffsetDateTime startDate) {

        this.startDate = startDate;
        return this;
    }

    /**
     * start_date string
     * 
     * @return startDate
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getStartDate() {
        return startDate;
    }

    public void setStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationMemberTrackingResponse corporationMemberTrackingResponse = (CorporationMemberTrackingResponse) o;
        return Objects.equals(this.baseId, corporationMemberTrackingResponse.baseId)
                && Objects.equals(this.characterId, corporationMemberTrackingResponse.characterId)
                && Objects.equals(this.locationId, corporationMemberTrackingResponse.locationId)
                && Objects.equals(this.logoffDate, corporationMemberTrackingResponse.logoffDate)
                && Objects.equals(this.logonDate, corporationMemberTrackingResponse.logonDate)
                && Objects.equals(this.shipTypeId, corporationMemberTrackingResponse.shipTypeId)
                && Objects.equals(this.startDate, corporationMemberTrackingResponse.startDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(baseId, characterId, locationId, logoffDate, logonDate, shipTypeId, startDate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationMemberTrackingResponse {\n");
        sb.append("    baseId: ").append(toIndentedString(baseId)).append("\n");
        sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
        sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
        sb.append("    logoffDate: ").append(toIndentedString(logoffDate)).append("\n");
        sb.append("    logonDate: ").append(toIndentedString(logonDate)).append("\n");
        sb.append("    shipTypeId: ").append(toIndentedString(shipTypeId)).append("\n");
        sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("base_id");
        openapiFields.add("character_id");
        openapiFields.add("location_id");
        openapiFields.add("logoff_date");
        openapiFields.add("logon_date");
        openapiFields.add("ship_type_id");
        openapiFields.add("start_date");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("character_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CorporationMemberTrackingResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CorporationMemberTrackingResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                      // required
                                                                                      // fields
                                                                                      // but
                                                                                      // JSON
                                                                                      // object
                                                                                      // is
                                                                                      // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CorporationMemberTrackingResponse is not found in the empty JSON string",
                                CorporationMemberTrackingResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CorporationMemberTrackingResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationMemberTrackingResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CorporationMemberTrackingResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationMemberTrackingResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationMemberTrackingResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationMemberTrackingResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationMemberTrackingResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationMemberTrackingResponse>() {
                @Override
                public void write(JsonWriter out, CorporationMemberTrackingResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationMemberTrackingResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationMemberTrackingResponse given an JSON
     * string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationMemberTrackingResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationMemberTrackingResponse
     */
    public static CorporationMemberTrackingResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationMemberTrackingResponse.class);
    }

    /**
     * Convert an instance of CorporationMemberTrackingResponse to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
