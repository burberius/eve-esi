/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.KillmailAttacker;
import net.troja.eve.esi.model.KillmailVictim;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KillmailResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ATTACKERS = "attackers";
    @SerializedName(SERIALIZED_NAME_ATTACKERS)
    private List<KillmailAttacker> attackers = new ArrayList<>();

    public static final String SERIALIZED_NAME_KILLMAIL_ID = "killmail_id";
    @SerializedName(SERIALIZED_NAME_KILLMAIL_ID)
    private Integer killmailId;

    public static final String SERIALIZED_NAME_KILLMAIL_TIME = "killmail_time";
    @SerializedName(SERIALIZED_NAME_KILLMAIL_TIME)
    private OffsetDateTime killmailTime;

    public static final String SERIALIZED_NAME_MOON_ID = "moon_id";
    @SerializedName(SERIALIZED_NAME_MOON_ID)
    private Integer moonId;

    public static final String SERIALIZED_NAME_SOLAR_SYSTEM_ID = "solar_system_id";
    @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM_ID)
    private Integer solarSystemId;

    public static final String SERIALIZED_NAME_VICTIM = "victim";
    @SerializedName(SERIALIZED_NAME_VICTIM)
    private KillmailVictim victim;

    public static final String SERIALIZED_NAME_WAR_ID = "war_id";
    @SerializedName(SERIALIZED_NAME_WAR_ID)
    private Integer warId;

    public KillmailResponse() {
    }

    public KillmailResponse attackers(List<KillmailAttacker> attackers) {

        this.attackers = attackers;
        return this;
    }

    public KillmailResponse addAttackersItem(KillmailAttacker attackersItem) {
        if (this.attackers == null) {
            this.attackers = new ArrayList<>();
        }
        this.attackers.add(attackersItem);
        return this;
    }

    /**
     * attackers array
     * 
     * @return attackers
     **/
    @javax.annotation.Nonnull
    public List<KillmailAttacker> getAttackers() {
        return attackers;
    }

    public void setAttackers(List<KillmailAttacker> attackers) {
        this.attackers = attackers;
    }

    public KillmailResponse killmailId(Integer killmailId) {

        this.killmailId = killmailId;
        return this;
    }

    /**
     * ID of the killmail
     * 
     * @return killmailId
     **/
    @javax.annotation.Nonnull
    public Integer getKillmailId() {
        return killmailId;
    }

    public void setKillmailId(Integer killmailId) {
        this.killmailId = killmailId;
    }

    public KillmailResponse killmailTime(OffsetDateTime killmailTime) {

        this.killmailTime = killmailTime;
        return this;
    }

    /**
     * Time that the victim was killed and the killmail generated
     * 
     * @return killmailTime
     **/
    @javax.annotation.Nonnull
    public OffsetDateTime getKillmailTime() {
        return killmailTime;
    }

    public void setKillmailTime(OffsetDateTime killmailTime) {
        this.killmailTime = killmailTime;
    }

    public KillmailResponse moonId(Integer moonId) {

        this.moonId = moonId;
        return this;
    }

    /**
     * Moon if the kill took place at one
     * 
     * @return moonId
     **/
    @javax.annotation.Nullable
    public Integer getMoonId() {
        return moonId;
    }

    public void setMoonId(Integer moonId) {
        this.moonId = moonId;
    }

    public KillmailResponse solarSystemId(Integer solarSystemId) {

        this.solarSystemId = solarSystemId;
        return this;
    }

    /**
     * Solar system that the kill took place in
     * 
     * @return solarSystemId
     **/
    @javax.annotation.Nonnull
    public Integer getSolarSystemId() {
        return solarSystemId;
    }

    public void setSolarSystemId(Integer solarSystemId) {
        this.solarSystemId = solarSystemId;
    }

    public KillmailResponse victim(KillmailVictim victim) {

        this.victim = victim;
        return this;
    }

    /**
     * Get victim
     * 
     * @return victim
     **/
    @javax.annotation.Nonnull
    public KillmailVictim getVictim() {
        return victim;
    }

    public void setVictim(KillmailVictim victim) {
        this.victim = victim;
    }

    public KillmailResponse warId(Integer warId) {

        this.warId = warId;
        return this;
    }

    /**
     * War if the killmail is generated in relation to an official war
     * 
     * @return warId
     **/
    @javax.annotation.Nullable
    public Integer getWarId() {
        return warId;
    }

    public void setWarId(Integer warId) {
        this.warId = warId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KillmailResponse killmailResponse = (KillmailResponse) o;
        return Objects.equals(this.attackers, killmailResponse.attackers)
                && Objects.equals(this.killmailId, killmailResponse.killmailId)
                && Objects.equals(this.killmailTime, killmailResponse.killmailTime)
                && Objects.equals(this.moonId, killmailResponse.moonId)
                && Objects.equals(this.solarSystemId, killmailResponse.solarSystemId)
                && Objects.equals(this.victim, killmailResponse.victim)
                && Objects.equals(this.warId, killmailResponse.warId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attackers, killmailId, killmailTime, moonId, solarSystemId, victim, warId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KillmailResponse {\n");
        sb.append("    attackers: ").append(toIndentedString(attackers)).append("\n");
        sb.append("    killmailId: ").append(toIndentedString(killmailId)).append("\n");
        sb.append("    killmailTime: ").append(toIndentedString(killmailTime)).append("\n");
        sb.append("    moonId: ").append(toIndentedString(moonId)).append("\n");
        sb.append("    solarSystemId: ").append(toIndentedString(solarSystemId)).append("\n");
        sb.append("    victim: ").append(toIndentedString(victim)).append("\n");
        sb.append("    warId: ").append(toIndentedString(warId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("attackers");
        openapiFields.add("killmail_id");
        openapiFields.add("killmail_time");
        openapiFields.add("moon_id");
        openapiFields.add("solar_system_id");
        openapiFields.add("victim");
        openapiFields.add("war_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("attackers");
        openapiRequiredFields.add("killmail_id");
        openapiRequiredFields.add("killmail_time");
        openapiRequiredFields.add("solar_system_id");
        openapiRequiredFields.add("victim");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             KillmailResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!KillmailResponse.openapiRequiredFields.isEmpty()) { // has
                                                                     // required
                                                                     // fields
                                                                     // but JSON
                                                                     // object
                                                                     // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in KillmailResponse is not found in the empty JSON string",
                        KillmailResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!KillmailResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `KillmailResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : KillmailResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        // ensure the json data is an array
        if (!jsonObj.get("attackers").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `attackers` to be an array in the JSON string but got `%s`",
                    jsonObj.get("attackers").toString()));
        }

        JsonArray jsonArrayattackers = jsonObj.getAsJsonArray("attackers");
        // validate the required field `attackers` (array)
        for (int i = 0; i < jsonArrayattackers.size(); i++) {
            KillmailAttacker.validateJsonObject(jsonArrayattackers.get(i).getAsJsonObject());
        };
        // validate the required field `victim`
        KillmailVictim.validateJsonObject(jsonObj.getAsJsonObject("victim"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!KillmailResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'KillmailResponse'
                             // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<KillmailResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(KillmailResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<KillmailResponse>() {
                @Override
                public void write(JsonWriter out, KillmailResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public KillmailResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of KillmailResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of KillmailResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             KillmailResponse
     */
    public static KillmailResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, KillmailResponse.class);
    }

    /**
     * Convert an instance of KillmailResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
