/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.FactionWarfareLeaderboardActiveTotalVictoryPoints;
import net.troja.eve.esi.model.FactionWarfareLeaderboardLastWeekVictoryPoints;
import net.troja.eve.esi.model.FactionWarfareLeaderboardYesterdayVictoryPoints;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * Top 4 rankings of factions by victory points from yesterday, last week and in
 * total
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FactionWarfareLeaderboardVictoryPoints implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ACTIVE_TOTAL = "active_total";
    @SerializedName(SERIALIZED_NAME_ACTIVE_TOTAL)
    private List<FactionWarfareLeaderboardActiveTotalVictoryPoints> activeTotal = new ArrayList<>();

    public static final String SERIALIZED_NAME_LAST_WEEK = "last_week";
    @SerializedName(SERIALIZED_NAME_LAST_WEEK)
    private List<FactionWarfareLeaderboardLastWeekVictoryPoints> lastWeek = new ArrayList<>();

    public static final String SERIALIZED_NAME_YESTERDAY = "yesterday";
    @SerializedName(SERIALIZED_NAME_YESTERDAY)
    private List<FactionWarfareLeaderboardYesterdayVictoryPoints> yesterday = new ArrayList<>();

    public FactionWarfareLeaderboardVictoryPoints() {
    }

    public FactionWarfareLeaderboardVictoryPoints activeTotal(
            List<FactionWarfareLeaderboardActiveTotalVictoryPoints> activeTotal) {

        this.activeTotal = activeTotal;
        return this;
    }

    public FactionWarfareLeaderboardVictoryPoints addActiveTotalItem(
            FactionWarfareLeaderboardActiveTotalVictoryPoints activeTotalItem) {
        if (this.activeTotal == null) {
            this.activeTotal = new ArrayList<>();
        }
        this.activeTotal.add(activeTotalItem);
        return this;
    }

    /**
     * Top 4 ranking of factions active in faction warfare by total victory
     * points. A faction is considered \&quot;active\&quot; if they have
     * participated in faction warfare in the past 14 days
     * 
     * @return activeTotal
     **/
    @javax.annotation.Nonnull
    public List<FactionWarfareLeaderboardActiveTotalVictoryPoints> getActiveTotal() {
        return activeTotal;
    }

    public void setActiveTotal(List<FactionWarfareLeaderboardActiveTotalVictoryPoints> activeTotal) {
        this.activeTotal = activeTotal;
    }

    public FactionWarfareLeaderboardVictoryPoints lastWeek(List<FactionWarfareLeaderboardLastWeekVictoryPoints> lastWeek) {

        this.lastWeek = lastWeek;
        return this;
    }

    public FactionWarfareLeaderboardVictoryPoints addLastWeekItem(
            FactionWarfareLeaderboardLastWeekVictoryPoints lastWeekItem) {
        if (this.lastWeek == null) {
            this.lastWeek = new ArrayList<>();
        }
        this.lastWeek.add(lastWeekItem);
        return this;
    }

    /**
     * Top 4 ranking of factions by victory points in the past week
     * 
     * @return lastWeek
     **/
    @javax.annotation.Nonnull
    public List<FactionWarfareLeaderboardLastWeekVictoryPoints> getLastWeek() {
        return lastWeek;
    }

    public void setLastWeek(List<FactionWarfareLeaderboardLastWeekVictoryPoints> lastWeek) {
        this.lastWeek = lastWeek;
    }

    public FactionWarfareLeaderboardVictoryPoints yesterday(
            List<FactionWarfareLeaderboardYesterdayVictoryPoints> yesterday) {

        this.yesterday = yesterday;
        return this;
    }

    public FactionWarfareLeaderboardVictoryPoints addYesterdayItem(
            FactionWarfareLeaderboardYesterdayVictoryPoints yesterdayItem) {
        if (this.yesterday == null) {
            this.yesterday = new ArrayList<>();
        }
        this.yesterday.add(yesterdayItem);
        return this;
    }

    /**
     * Top 4 ranking of factions by victory points in the past day
     * 
     * @return yesterday
     **/
    @javax.annotation.Nonnull
    public List<FactionWarfareLeaderboardYesterdayVictoryPoints> getYesterday() {
        return yesterday;
    }

    public void setYesterday(List<FactionWarfareLeaderboardYesterdayVictoryPoints> yesterday) {
        this.yesterday = yesterday;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FactionWarfareLeaderboardVictoryPoints factionWarfareLeaderboardVictoryPoints = (FactionWarfareLeaderboardVictoryPoints) o;
        return Objects.equals(this.activeTotal, factionWarfareLeaderboardVictoryPoints.activeTotal)
                && Objects.equals(this.lastWeek, factionWarfareLeaderboardVictoryPoints.lastWeek)
                && Objects.equals(this.yesterday, factionWarfareLeaderboardVictoryPoints.yesterday);
    }

    @Override
    public int hashCode() {
        return Objects.hash(activeTotal, lastWeek, yesterday);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FactionWarfareLeaderboardVictoryPoints {\n");
        sb.append("    activeTotal: ").append(toIndentedString(activeTotal)).append("\n");
        sb.append("    lastWeek: ").append(toIndentedString(lastWeek)).append("\n");
        sb.append("    yesterday: ").append(toIndentedString(yesterday)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("active_total");
        openapiFields.add("last_week");
        openapiFields.add("yesterday");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("active_total");
        openapiRequiredFields.add("last_week");
        openapiRequiredFields.add("yesterday");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             FactionWarfareLeaderboardVictoryPoints
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FactionWarfareLeaderboardVictoryPoints.openapiRequiredFields.isEmpty()) { // has
                                                                                           // required
                                                                                           // fields
                                                                                           // but
                                                                                           // JSON
                                                                                           // object
                                                                                           // is
                                                                                           // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FactionWarfareLeaderboardVictoryPoints is not found in the empty JSON string",
                                FactionWarfareLeaderboardVictoryPoints.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FactionWarfareLeaderboardVictoryPoints.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `FactionWarfareLeaderboardVictoryPoints` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : FactionWarfareLeaderboardVictoryPoints.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        // ensure the json data is an array
        if (!jsonObj.get("active_total").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `active_total` to be an array in the JSON string but got `%s`",
                    jsonObj.get("active_total").toString()));
        }

        JsonArray jsonArrayactiveTotal = jsonObj.getAsJsonArray("active_total");
        // validate the required field `active_total` (array)
        for (int i = 0; i < jsonArrayactiveTotal.size(); i++) {
            FactionWarfareLeaderboardActiveTotalVictoryPoints.validateJsonObject(jsonArrayactiveTotal.get(i)
                    .getAsJsonObject());
        };
        // ensure the json data is an array
        if (!jsonObj.get("last_week").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `last_week` to be an array in the JSON string but got `%s`",
                    jsonObj.get("last_week").toString()));
        }

        JsonArray jsonArraylastWeek = jsonObj.getAsJsonArray("last_week");
        // validate the required field `last_week` (array)
        for (int i = 0; i < jsonArraylastWeek.size(); i++) {
            FactionWarfareLeaderboardLastWeekVictoryPoints.validateJsonObject(jsonArraylastWeek.get(i)
                    .getAsJsonObject());
        };
        // ensure the json data is an array
        if (!jsonObj.get("yesterday").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `yesterday` to be an array in the JSON string but got `%s`",
                    jsonObj.get("yesterday").toString()));
        }

        JsonArray jsonArrayyesterday = jsonObj.getAsJsonArray("yesterday");
        // validate the required field `yesterday` (array)
        for (int i = 0; i < jsonArrayyesterday.size(); i++) {
            FactionWarfareLeaderboardYesterdayVictoryPoints.validateJsonObject(jsonArrayyesterday.get(i)
                    .getAsJsonObject());
        };
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FactionWarfareLeaderboardVictoryPoints.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'FactionWarfareLeaderboardVictoryPoints' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FactionWarfareLeaderboardVictoryPoints> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(FactionWarfareLeaderboardVictoryPoints.class));

            return (TypeAdapter<T>) new TypeAdapter<FactionWarfareLeaderboardVictoryPoints>() {
                @Override
                public void write(JsonWriter out, FactionWarfareLeaderboardVictoryPoints value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public FactionWarfareLeaderboardVictoryPoints read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of FactionWarfareLeaderboardVictoryPoints given an
     * JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of FactionWarfareLeaderboardVictoryPoints
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             FactionWarfareLeaderboardVictoryPoints
     */
    public static FactionWarfareLeaderboardVictoryPoints fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FactionWarfareLeaderboardVictoryPoints.class);
    }

    /**
     * Convert an instance of FactionWarfareLeaderboardVictoryPoints to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
