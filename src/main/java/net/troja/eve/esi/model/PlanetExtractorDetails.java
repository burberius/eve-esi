/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.troja.eve.esi.model.PlanetHead;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * extractor_details object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PlanetExtractorDetails implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CYCLE_TIME = "cycle_time";
    @SerializedName(SERIALIZED_NAME_CYCLE_TIME)
    private Integer cycleTime;

    public static final String SERIALIZED_NAME_HEAD_RADIUS = "head_radius";
    @SerializedName(SERIALIZED_NAME_HEAD_RADIUS)
    private Float headRadius;

    public static final String SERIALIZED_NAME_HEADS = "heads";
    @SerializedName(SERIALIZED_NAME_HEADS)
    private List<PlanetHead> heads = new ArrayList<>();

    public static final String SERIALIZED_NAME_PRODUCT_TYPE_ID = "product_type_id";
    @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_ID)
    private Integer productTypeId;

    public static final String SERIALIZED_NAME_QTY_PER_CYCLE = "qty_per_cycle";
    @SerializedName(SERIALIZED_NAME_QTY_PER_CYCLE)
    private Integer qtyPerCycle;

    public PlanetExtractorDetails() {
    }

    public PlanetExtractorDetails cycleTime(Integer cycleTime) {

        this.cycleTime = cycleTime;
        return this;
    }

    /**
     * in seconds
     * 
     * @return cycleTime
     **/
    @javax.annotation.Nullable
    public Integer getCycleTime() {
        return cycleTime;
    }

    public void setCycleTime(Integer cycleTime) {
        this.cycleTime = cycleTime;
    }

    public PlanetExtractorDetails headRadius(Float headRadius) {

        this.headRadius = headRadius;
        return this;
    }

    /**
     * head_radius number
     * 
     * @return headRadius
     **/
    @javax.annotation.Nullable
    public Float getHeadRadius() {
        return headRadius;
    }

    public void setHeadRadius(Float headRadius) {
        this.headRadius = headRadius;
    }

    public PlanetExtractorDetails heads(List<PlanetHead> heads) {

        this.heads = heads;
        return this;
    }

    public PlanetExtractorDetails addHeadsItem(PlanetHead headsItem) {
        if (this.heads == null) {
            this.heads = new ArrayList<>();
        }
        this.heads.add(headsItem);
        return this;
    }

    /**
     * heads array
     * 
     * @return heads
     **/
    @javax.annotation.Nonnull
    public List<PlanetHead> getHeads() {
        return heads;
    }

    public void setHeads(List<PlanetHead> heads) {
        this.heads = heads;
    }

    public PlanetExtractorDetails productTypeId(Integer productTypeId) {

        this.productTypeId = productTypeId;
        return this;
    }

    /**
     * product_type_id integer
     * 
     * @return productTypeId
     **/
    @javax.annotation.Nullable
    public Integer getProductTypeId() {
        return productTypeId;
    }

    public void setProductTypeId(Integer productTypeId) {
        this.productTypeId = productTypeId;
    }

    public PlanetExtractorDetails qtyPerCycle(Integer qtyPerCycle) {

        this.qtyPerCycle = qtyPerCycle;
        return this;
    }

    /**
     * qty_per_cycle integer
     * 
     * @return qtyPerCycle
     **/
    @javax.annotation.Nullable
    public Integer getQtyPerCycle() {
        return qtyPerCycle;
    }

    public void setQtyPerCycle(Integer qtyPerCycle) {
        this.qtyPerCycle = qtyPerCycle;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PlanetExtractorDetails planetExtractorDetails = (PlanetExtractorDetails) o;
        return Objects.equals(this.cycleTime, planetExtractorDetails.cycleTime)
                && Objects.equals(this.headRadius, planetExtractorDetails.headRadius)
                && Objects.equals(this.heads, planetExtractorDetails.heads)
                && Objects.equals(this.productTypeId, planetExtractorDetails.productTypeId)
                && Objects.equals(this.qtyPerCycle, planetExtractorDetails.qtyPerCycle);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cycleTime, headRadius, heads, productTypeId, qtyPerCycle);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PlanetExtractorDetails {\n");
        sb.append("    cycleTime: ").append(toIndentedString(cycleTime)).append("\n");
        sb.append("    headRadius: ").append(toIndentedString(headRadius)).append("\n");
        sb.append("    heads: ").append(toIndentedString(heads)).append("\n");
        sb.append("    productTypeId: ").append(toIndentedString(productTypeId)).append("\n");
        sb.append("    qtyPerCycle: ").append(toIndentedString(qtyPerCycle)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("cycle_time");
        openapiFields.add("head_radius");
        openapiFields.add("heads");
        openapiFields.add("product_type_id");
        openapiFields.add("qty_per_cycle");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("heads");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             PlanetExtractorDetails
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!PlanetExtractorDetails.openapiRequiredFields.isEmpty()) { // has
                                                                           // required
                                                                           // fields
                                                                           // but
                                                                           // JSON
                                                                           // object
                                                                           // is
                                                                           // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in PlanetExtractorDetails is not found in the empty JSON string",
                        PlanetExtractorDetails.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!PlanetExtractorDetails.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `PlanetExtractorDetails` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : PlanetExtractorDetails.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        // ensure the json data is an array
        if (!jsonObj.get("heads").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `heads` to be an array in the JSON string but got `%s`", jsonObj.get("heads")
                            .toString()));
        }

        JsonArray jsonArrayheads = jsonObj.getAsJsonArray("heads");
        // validate the required field `heads` (array)
        for (int i = 0; i < jsonArrayheads.size(); i++) {
            PlanetHead.validateJsonObject(jsonArrayheads.get(i).getAsJsonObject());
        };
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PlanetExtractorDetails.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'PlanetExtractorDetails' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PlanetExtractorDetails> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(PlanetExtractorDetails.class));

            return (TypeAdapter<T>) new TypeAdapter<PlanetExtractorDetails>() {
                @Override
                public void write(JsonWriter out, PlanetExtractorDetails value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public PlanetExtractorDetails read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of PlanetExtractorDetails given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of PlanetExtractorDetails
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             PlanetExtractorDetails
     */
    public static PlanetExtractorDetails fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PlanetExtractorDetails.class);
    }

    /**
     * Convert an instance of PlanetExtractorDetails to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
