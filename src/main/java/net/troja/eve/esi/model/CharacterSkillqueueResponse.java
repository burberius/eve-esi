/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CharacterSkillqueueResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_FINISH_DATE = "finish_date";
    @SerializedName(SERIALIZED_NAME_FINISH_DATE)
    private OffsetDateTime finishDate;

    public static final String SERIALIZED_NAME_FINISHED_LEVEL = "finished_level";
    @SerializedName(SERIALIZED_NAME_FINISHED_LEVEL)
    private Integer finishedLevel;

    public static final String SERIALIZED_NAME_LEVEL_END_SP = "level_end_sp";
    @SerializedName(SERIALIZED_NAME_LEVEL_END_SP)
    private Integer levelEndSp;

    public static final String SERIALIZED_NAME_LEVEL_START_SP = "level_start_sp";
    @SerializedName(SERIALIZED_NAME_LEVEL_START_SP)
    private Integer levelStartSp;

    public static final String SERIALIZED_NAME_QUEUE_POSITION = "queue_position";
    @SerializedName(SERIALIZED_NAME_QUEUE_POSITION)
    private Integer queuePosition;

    public static final String SERIALIZED_NAME_SKILL_ID = "skill_id";
    @SerializedName(SERIALIZED_NAME_SKILL_ID)
    private Integer skillId;

    public static final String SERIALIZED_NAME_START_DATE = "start_date";
    @SerializedName(SERIALIZED_NAME_START_DATE)
    private OffsetDateTime startDate;

    public static final String SERIALIZED_NAME_TRAINING_START_SP = "training_start_sp";
    @SerializedName(SERIALIZED_NAME_TRAINING_START_SP)
    private Integer trainingStartSp;

    public CharacterSkillqueueResponse() {
    }

    public CharacterSkillqueueResponse finishDate(OffsetDateTime finishDate) {

        this.finishDate = finishDate;
        return this;
    }

    /**
     * Date on which training of the skill will complete. Omitted if the skill
     * queue is paused.
     * 
     * @return finishDate
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getFinishDate() {
        return finishDate;
    }

    public void setFinishDate(OffsetDateTime finishDate) {
        this.finishDate = finishDate;
    }

    public CharacterSkillqueueResponse finishedLevel(Integer finishedLevel) {

        this.finishedLevel = finishedLevel;
        return this;
    }

    /**
     * finished_level integer minimum: 0 maximum: 5
     * 
     * @return finishedLevel
     **/
    @javax.annotation.Nonnull
    public Integer getFinishedLevel() {
        return finishedLevel;
    }

    public void setFinishedLevel(Integer finishedLevel) {
        this.finishedLevel = finishedLevel;
    }

    public CharacterSkillqueueResponse levelEndSp(Integer levelEndSp) {

        this.levelEndSp = levelEndSp;
        return this;
    }

    /**
     * level_end_sp integer
     * 
     * @return levelEndSp
     **/
    @javax.annotation.Nullable
    public Integer getLevelEndSp() {
        return levelEndSp;
    }

    public void setLevelEndSp(Integer levelEndSp) {
        this.levelEndSp = levelEndSp;
    }

    public CharacterSkillqueueResponse levelStartSp(Integer levelStartSp) {

        this.levelStartSp = levelStartSp;
        return this;
    }

    /**
     * Amount of SP that was in the skill when it started training it&#39;s
     * current level. Used to calculate % of current level complete.
     * 
     * @return levelStartSp
     **/
    @javax.annotation.Nullable
    public Integer getLevelStartSp() {
        return levelStartSp;
    }

    public void setLevelStartSp(Integer levelStartSp) {
        this.levelStartSp = levelStartSp;
    }

    public CharacterSkillqueueResponse queuePosition(Integer queuePosition) {

        this.queuePosition = queuePosition;
        return this;
    }

    /**
     * queue_position integer
     * 
     * @return queuePosition
     **/
    @javax.annotation.Nonnull
    public Integer getQueuePosition() {
        return queuePosition;
    }

    public void setQueuePosition(Integer queuePosition) {
        this.queuePosition = queuePosition;
    }

    public CharacterSkillqueueResponse skillId(Integer skillId) {

        this.skillId = skillId;
        return this;
    }

    /**
     * skill_id integer
     * 
     * @return skillId
     **/
    @javax.annotation.Nonnull
    public Integer getSkillId() {
        return skillId;
    }

    public void setSkillId(Integer skillId) {
        this.skillId = skillId;
    }

    public CharacterSkillqueueResponse startDate(OffsetDateTime startDate) {

        this.startDate = startDate;
        return this;
    }

    /**
     * start_date string
     * 
     * @return startDate
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getStartDate() {
        return startDate;
    }

    public void setStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
    }

    public CharacterSkillqueueResponse trainingStartSp(Integer trainingStartSp) {

        this.trainingStartSp = trainingStartSp;
        return this;
    }

    /**
     * training_start_sp integer
     * 
     * @return trainingStartSp
     **/
    @javax.annotation.Nullable
    public Integer getTrainingStartSp() {
        return trainingStartSp;
    }

    public void setTrainingStartSp(Integer trainingStartSp) {
        this.trainingStartSp = trainingStartSp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterSkillqueueResponse characterSkillqueueResponse = (CharacterSkillqueueResponse) o;
        return Objects.equals(this.finishDate, characterSkillqueueResponse.finishDate)
                && Objects.equals(this.finishedLevel, characterSkillqueueResponse.finishedLevel)
                && Objects.equals(this.levelEndSp, characterSkillqueueResponse.levelEndSp)
                && Objects.equals(this.levelStartSp, characterSkillqueueResponse.levelStartSp)
                && Objects.equals(this.queuePosition, characterSkillqueueResponse.queuePosition)
                && Objects.equals(this.skillId, characterSkillqueueResponse.skillId)
                && Objects.equals(this.startDate, characterSkillqueueResponse.startDate)
                && Objects.equals(this.trainingStartSp, characterSkillqueueResponse.trainingStartSp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(finishDate, finishedLevel, levelEndSp, levelStartSp, queuePosition, skillId, startDate,
                trainingStartSp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterSkillqueueResponse {\n");
        sb.append("    finishDate: ").append(toIndentedString(finishDate)).append("\n");
        sb.append("    finishedLevel: ").append(toIndentedString(finishedLevel)).append("\n");
        sb.append("    levelEndSp: ").append(toIndentedString(levelEndSp)).append("\n");
        sb.append("    levelStartSp: ").append(toIndentedString(levelStartSp)).append("\n");
        sb.append("    queuePosition: ").append(toIndentedString(queuePosition)).append("\n");
        sb.append("    skillId: ").append(toIndentedString(skillId)).append("\n");
        sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
        sb.append("    trainingStartSp: ").append(toIndentedString(trainingStartSp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("finish_date");
        openapiFields.add("finished_level");
        openapiFields.add("level_end_sp");
        openapiFields.add("level_start_sp");
        openapiFields.add("queue_position");
        openapiFields.add("skill_id");
        openapiFields.add("start_date");
        openapiFields.add("training_start_sp");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("finished_level");
        openapiRequiredFields.add("queue_position");
        openapiRequiredFields.add("skill_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CharacterSkillqueueResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CharacterSkillqueueResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                // required
                                                                                // fields
                                                                                // but
                                                                                // JSON
                                                                                // object
                                                                                // is
                                                                                // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CharacterSkillqueueResponse is not found in the empty JSON string",
                                CharacterSkillqueueResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CharacterSkillqueueResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterSkillqueueResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterSkillqueueResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterSkillqueueResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterSkillqueueResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterSkillqueueResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterSkillqueueResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterSkillqueueResponse>() {
                @Override
                public void write(JsonWriter out, CharacterSkillqueueResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterSkillqueueResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterSkillqueueResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterSkillqueueResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterSkillqueueResponse
     */
    public static CharacterSkillqueueResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterSkillqueueResponse.class);
    }

    /**
     * Convert an instance of CharacterSkillqueueResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
