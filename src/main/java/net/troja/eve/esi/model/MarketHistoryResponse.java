/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarketHistoryResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_AVERAGE = "average";
    @SerializedName(SERIALIZED_NAME_AVERAGE)
    private Double average;

    public static final String SERIALIZED_NAME_DATE = "date";
    @SerializedName(SERIALIZED_NAME_DATE)
    private LocalDate date;

    public static final String SERIALIZED_NAME_HIGHEST = "highest";
    @SerializedName(SERIALIZED_NAME_HIGHEST)
    private Double highest;

    public static final String SERIALIZED_NAME_LOWEST = "lowest";
    @SerializedName(SERIALIZED_NAME_LOWEST)
    private Double lowest;

    public static final String SERIALIZED_NAME_ORDER_COUNT = "order_count";
    @SerializedName(SERIALIZED_NAME_ORDER_COUNT)
    private Long orderCount;

    public static final String SERIALIZED_NAME_VOLUME = "volume";
    @SerializedName(SERIALIZED_NAME_VOLUME)
    private Long volume;

    public MarketHistoryResponse() {
    }

    public MarketHistoryResponse average(Double average) {

        this.average = average;
        return this;
    }

    /**
     * average number
     * 
     * @return average
     **/
    @javax.annotation.Nonnull
    public Double getAverage() {
        return average;
    }

    public void setAverage(Double average) {
        this.average = average;
    }

    public MarketHistoryResponse date(LocalDate date) {

        this.date = date;
        return this;
    }

    /**
     * The date of this historical statistic entry
     * 
     * @return date
     **/
    @javax.annotation.Nonnull
    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public MarketHistoryResponse highest(Double highest) {

        this.highest = highest;
        return this;
    }

    /**
     * highest number
     * 
     * @return highest
     **/
    @javax.annotation.Nonnull
    public Double getHighest() {
        return highest;
    }

    public void setHighest(Double highest) {
        this.highest = highest;
    }

    public MarketHistoryResponse lowest(Double lowest) {

        this.lowest = lowest;
        return this;
    }

    /**
     * lowest number
     * 
     * @return lowest
     **/
    @javax.annotation.Nonnull
    public Double getLowest() {
        return lowest;
    }

    public void setLowest(Double lowest) {
        this.lowest = lowest;
    }

    public MarketHistoryResponse orderCount(Long orderCount) {

        this.orderCount = orderCount;
        return this;
    }

    /**
     * Total number of orders happened that day
     * 
     * @return orderCount
     **/
    @javax.annotation.Nonnull
    public Long getOrderCount() {
        return orderCount;
    }

    public void setOrderCount(Long orderCount) {
        this.orderCount = orderCount;
    }

    public MarketHistoryResponse volume(Long volume) {

        this.volume = volume;
        return this;
    }

    /**
     * Total
     * 
     * @return volume
     **/
    @javax.annotation.Nonnull
    public Long getVolume() {
        return volume;
    }

    public void setVolume(Long volume) {
        this.volume = volume;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MarketHistoryResponse marketHistoryResponse = (MarketHistoryResponse) o;
        return Objects.equals(this.average, marketHistoryResponse.average)
                && Objects.equals(this.date, marketHistoryResponse.date)
                && Objects.equals(this.highest, marketHistoryResponse.highest)
                && Objects.equals(this.lowest, marketHistoryResponse.lowest)
                && Objects.equals(this.orderCount, marketHistoryResponse.orderCount)
                && Objects.equals(this.volume, marketHistoryResponse.volume);
    }

    @Override
    public int hashCode() {
        return Objects.hash(average, date, highest, lowest, orderCount, volume);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MarketHistoryResponse {\n");
        sb.append("    average: ").append(toIndentedString(average)).append("\n");
        sb.append("    date: ").append(toIndentedString(date)).append("\n");
        sb.append("    highest: ").append(toIndentedString(highest)).append("\n");
        sb.append("    lowest: ").append(toIndentedString(lowest)).append("\n");
        sb.append("    orderCount: ").append(toIndentedString(orderCount)).append("\n");
        sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("average");
        openapiFields.add("date");
        openapiFields.add("highest");
        openapiFields.add("lowest");
        openapiFields.add("order_count");
        openapiFields.add("volume");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("average");
        openapiRequiredFields.add("date");
        openapiRequiredFields.add("highest");
        openapiRequiredFields.add("lowest");
        openapiRequiredFields.add("order_count");
        openapiRequiredFields.add("volume");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             MarketHistoryResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!MarketHistoryResponse.openapiRequiredFields.isEmpty()) { // has
                                                                          // required
                                                                          // fields
                                                                          // but
                                                                          // JSON
                                                                          // object
                                                                          // is
                                                                          // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in MarketHistoryResponse is not found in the empty JSON string",
                        MarketHistoryResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!MarketHistoryResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `MarketHistoryResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : MarketHistoryResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MarketHistoryResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'MarketHistoryResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MarketHistoryResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(MarketHistoryResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<MarketHistoryResponse>() {
                @Override
                public void write(JsonWriter out, MarketHistoryResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public MarketHistoryResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of MarketHistoryResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of MarketHistoryResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             MarketHistoryResponse
     */
    public static MarketHistoryResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MarketHistoryResponse.class);
    }

    /**
     * Convert an instance of MarketHistoryResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
