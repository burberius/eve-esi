/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import net.troja.eve.esi.model.CharacterFwStatsKills;
import net.troja.eve.esi.model.CharacterFwStatsVictoryPoints;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CharacterFwStatsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CURRENT_RANK = "current_rank";
    @SerializedName(SERIALIZED_NAME_CURRENT_RANK)
    private Integer currentRank;

    public static final String SERIALIZED_NAME_ENLISTED_ON = "enlisted_on";
    @SerializedName(SERIALIZED_NAME_ENLISTED_ON)
    private OffsetDateTime enlistedOn;

    public static final String SERIALIZED_NAME_FACTION_ID = "faction_id";
    @SerializedName(SERIALIZED_NAME_FACTION_ID)
    private Integer factionId;

    public static final String SERIALIZED_NAME_HIGHEST_RANK = "highest_rank";
    @SerializedName(SERIALIZED_NAME_HIGHEST_RANK)
    private Integer highestRank;

    public static final String SERIALIZED_NAME_KILLS = "kills";
    @SerializedName(SERIALIZED_NAME_KILLS)
    private CharacterFwStatsKills kills;

    public static final String SERIALIZED_NAME_VICTORY_POINTS = "victory_points";
    @SerializedName(SERIALIZED_NAME_VICTORY_POINTS)
    private CharacterFwStatsVictoryPoints victoryPoints;

    public CharacterFwStatsResponse() {
    }

    public CharacterFwStatsResponse currentRank(Integer currentRank) {

        this.currentRank = currentRank;
        return this;
    }

    /**
     * The given character&#39;s current faction rank minimum: 0 maximum: 9
     * 
     * @return currentRank
     **/
    @javax.annotation.Nullable
    public Integer getCurrentRank() {
        return currentRank;
    }

    public void setCurrentRank(Integer currentRank) {
        this.currentRank = currentRank;
    }

    public CharacterFwStatsResponse enlistedOn(OffsetDateTime enlistedOn) {

        this.enlistedOn = enlistedOn;
        return this;
    }

    /**
     * The enlistment date of the given character into faction warfare. Will not
     * be included if character is not enlisted in faction warfare
     * 
     * @return enlistedOn
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getEnlistedOn() {
        return enlistedOn;
    }

    public void setEnlistedOn(OffsetDateTime enlistedOn) {
        this.enlistedOn = enlistedOn;
    }

    public CharacterFwStatsResponse factionId(Integer factionId) {

        this.factionId = factionId;
        return this;
    }

    /**
     * The faction the given character is enlisted to fight for. Will not be
     * included if character is not enlisted in faction warfare
     * 
     * @return factionId
     **/
    @javax.annotation.Nullable
    public Integer getFactionId() {
        return factionId;
    }

    public void setFactionId(Integer factionId) {
        this.factionId = factionId;
    }

    public CharacterFwStatsResponse highestRank(Integer highestRank) {

        this.highestRank = highestRank;
        return this;
    }

    /**
     * The given character&#39;s highest faction rank achieved minimum: 0
     * maximum: 9
     * 
     * @return highestRank
     **/
    @javax.annotation.Nullable
    public Integer getHighestRank() {
        return highestRank;
    }

    public void setHighestRank(Integer highestRank) {
        this.highestRank = highestRank;
    }

    public CharacterFwStatsResponse kills(CharacterFwStatsKills kills) {

        this.kills = kills;
        return this;
    }

    /**
     * Get kills
     * 
     * @return kills
     **/
    @javax.annotation.Nonnull
    public CharacterFwStatsKills getKills() {
        return kills;
    }

    public void setKills(CharacterFwStatsKills kills) {
        this.kills = kills;
    }

    public CharacterFwStatsResponse victoryPoints(CharacterFwStatsVictoryPoints victoryPoints) {

        this.victoryPoints = victoryPoints;
        return this;
    }

    /**
     * Get victoryPoints
     * 
     * @return victoryPoints
     **/
    @javax.annotation.Nonnull
    public CharacterFwStatsVictoryPoints getVictoryPoints() {
        return victoryPoints;
    }

    public void setVictoryPoints(CharacterFwStatsVictoryPoints victoryPoints) {
        this.victoryPoints = victoryPoints;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterFwStatsResponse characterFwStatsResponse = (CharacterFwStatsResponse) o;
        return Objects.equals(this.currentRank, characterFwStatsResponse.currentRank)
                && Objects.equals(this.enlistedOn, characterFwStatsResponse.enlistedOn)
                && Objects.equals(this.factionId, characterFwStatsResponse.factionId)
                && Objects.equals(this.highestRank, characterFwStatsResponse.highestRank)
                && Objects.equals(this.kills, characterFwStatsResponse.kills)
                && Objects.equals(this.victoryPoints, characterFwStatsResponse.victoryPoints);
    }

    @Override
    public int hashCode() {
        return Objects.hash(currentRank, enlistedOn, factionId, highestRank, kills, victoryPoints);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterFwStatsResponse {\n");
        sb.append("    currentRank: ").append(toIndentedString(currentRank)).append("\n");
        sb.append("    enlistedOn: ").append(toIndentedString(enlistedOn)).append("\n");
        sb.append("    factionId: ").append(toIndentedString(factionId)).append("\n");
        sb.append("    highestRank: ").append(toIndentedString(highestRank)).append("\n");
        sb.append("    kills: ").append(toIndentedString(kills)).append("\n");
        sb.append("    victoryPoints: ").append(toIndentedString(victoryPoints)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("current_rank");
        openapiFields.add("enlisted_on");
        openapiFields.add("faction_id");
        openapiFields.add("highest_rank");
        openapiFields.add("kills");
        openapiFields.add("victory_points");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("kills");
        openapiRequiredFields.add("victory_points");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CharacterFwStatsResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CharacterFwStatsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                             // required
                                                                             // fields
                                                                             // but
                                                                             // JSON
                                                                             // object
                                                                             // is
                                                                             // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CharacterFwStatsResponse is not found in the empty JSON string",
                        CharacterFwStatsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CharacterFwStatsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterFwStatsResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterFwStatsResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        // validate the required field `kills`
        CharacterFwStatsKills.validateJsonObject(jsonObj.getAsJsonObject("kills"));
        // validate the required field `victory_points`
        CharacterFwStatsVictoryPoints.validateJsonObject(jsonObj.getAsJsonObject("victory_points"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterFwStatsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterFwStatsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterFwStatsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterFwStatsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterFwStatsResponse>() {
                @Override
                public void write(JsonWriter out, CharacterFwStatsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterFwStatsResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterFwStatsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterFwStatsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterFwStatsResponse
     */
    public static CharacterFwStatsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterFwStatsResponse.class);
    }

    /**
     * Convert an instance of CharacterFwStatsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
