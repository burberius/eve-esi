/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CorporationResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ALLIANCE_ID = "alliance_id";
    @SerializedName(SERIALIZED_NAME_ALLIANCE_ID)
    private Integer allianceId;

    public static final String SERIALIZED_NAME_CEO_ID = "ceo_id";
    @SerializedName(SERIALIZED_NAME_CEO_ID)
    private Integer ceoId;

    public static final String SERIALIZED_NAME_CREATOR_ID = "creator_id";
    @SerializedName(SERIALIZED_NAME_CREATOR_ID)
    private Integer creatorId;

    public static final String SERIALIZED_NAME_DATE_FOUNDED = "date_founded";
    @SerializedName(SERIALIZED_NAME_DATE_FOUNDED)
    private OffsetDateTime dateFounded;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_FACTION_ID = "faction_id";
    @SerializedName(SERIALIZED_NAME_FACTION_ID)
    private Integer factionId;

    public static final String SERIALIZED_NAME_HOME_STATION_ID = "home_station_id";
    @SerializedName(SERIALIZED_NAME_HOME_STATION_ID)
    private Integer homeStationId;

    public static final String SERIALIZED_NAME_MEMBER_COUNT = "member_count";
    @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
    private Integer memberCount;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_SHARES = "shares";
    @SerializedName(SERIALIZED_NAME_SHARES)
    private Long shares;

    public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
    @SerializedName(SERIALIZED_NAME_TAX_RATE)
    private Float taxRate;

    public static final String SERIALIZED_NAME_TICKER = "ticker";
    @SerializedName(SERIALIZED_NAME_TICKER)
    private String ticker;

    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private String url;

    public static final String SERIALIZED_NAME_WAR_ELIGIBLE = "war_eligible";
    @SerializedName(SERIALIZED_NAME_WAR_ELIGIBLE)
    private Boolean warEligible;

    public CorporationResponse() {
    }

    public CorporationResponse allianceId(Integer allianceId) {

        this.allianceId = allianceId;
        return this;
    }

    /**
     * ID of the alliance that corporation is a member of, if any
     * 
     * @return allianceId
     **/
    @javax.annotation.Nullable
    public Integer getAllianceId() {
        return allianceId;
    }

    public void setAllianceId(Integer allianceId) {
        this.allianceId = allianceId;
    }

    public CorporationResponse ceoId(Integer ceoId) {

        this.ceoId = ceoId;
        return this;
    }

    /**
     * ceo_id integer
     * 
     * @return ceoId
     **/
    @javax.annotation.Nonnull
    public Integer getCeoId() {
        return ceoId;
    }

    public void setCeoId(Integer ceoId) {
        this.ceoId = ceoId;
    }

    public CorporationResponse creatorId(Integer creatorId) {

        this.creatorId = creatorId;
        return this;
    }

    /**
     * creator_id integer
     * 
     * @return creatorId
     **/
    @javax.annotation.Nonnull
    public Integer getCreatorId() {
        return creatorId;
    }

    public void setCreatorId(Integer creatorId) {
        this.creatorId = creatorId;
    }

    public CorporationResponse dateFounded(OffsetDateTime dateFounded) {

        this.dateFounded = dateFounded;
        return this;
    }

    /**
     * date_founded string
     * 
     * @return dateFounded
     **/
    @javax.annotation.Nullable
    public OffsetDateTime getDateFounded() {
        return dateFounded;
    }

    public void setDateFounded(OffsetDateTime dateFounded) {
        this.dateFounded = dateFounded;
    }

    public CorporationResponse description(String description) {

        this.description = description;
        return this;
    }

    /**
     * description string
     * 
     * @return description
     **/
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public CorporationResponse factionId(Integer factionId) {

        this.factionId = factionId;
        return this;
    }

    /**
     * faction_id integer
     * 
     * @return factionId
     **/
    @javax.annotation.Nullable
    public Integer getFactionId() {
        return factionId;
    }

    public void setFactionId(Integer factionId) {
        this.factionId = factionId;
    }

    public CorporationResponse homeStationId(Integer homeStationId) {

        this.homeStationId = homeStationId;
        return this;
    }

    /**
     * home_station_id integer
     * 
     * @return homeStationId
     **/
    @javax.annotation.Nullable
    public Integer getHomeStationId() {
        return homeStationId;
    }

    public void setHomeStationId(Integer homeStationId) {
        this.homeStationId = homeStationId;
    }

    public CorporationResponse memberCount(Integer memberCount) {

        this.memberCount = memberCount;
        return this;
    }

    /**
     * member_count integer
     * 
     * @return memberCount
     **/
    @javax.annotation.Nonnull
    public Integer getMemberCount() {
        return memberCount;
    }

    public void setMemberCount(Integer memberCount) {
        this.memberCount = memberCount;
    }

    public CorporationResponse name(String name) {

        this.name = name;
        return this;
    }

    /**
     * the full name of the corporation
     * 
     * @return name
     **/
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CorporationResponse shares(Long shares) {

        this.shares = shares;
        return this;
    }

    /**
     * shares integer
     * 
     * @return shares
     **/
    @javax.annotation.Nullable
    public Long getShares() {
        return shares;
    }

    public void setShares(Long shares) {
        this.shares = shares;
    }

    public CorporationResponse taxRate(Float taxRate) {

        this.taxRate = taxRate;
        return this;
    }

    /**
     * tax_rate number minimum: 0 maximum: 1
     * 
     * @return taxRate
     **/
    @javax.annotation.Nonnull
    public Float getTaxRate() {
        return taxRate;
    }

    public void setTaxRate(Float taxRate) {
        this.taxRate = taxRate;
    }

    public CorporationResponse ticker(String ticker) {

        this.ticker = ticker;
        return this;
    }

    /**
     * the short name of the corporation
     * 
     * @return ticker
     **/
    @javax.annotation.Nonnull
    public String getTicker() {
        return ticker;
    }

    public void setTicker(String ticker) {
        this.ticker = ticker;
    }

    public CorporationResponse url(String url) {

        this.url = url;
        return this;
    }

    /**
     * url string
     * 
     * @return url
     **/
    @javax.annotation.Nullable
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public CorporationResponse warEligible(Boolean warEligible) {

        this.warEligible = warEligible;
        return this;
    }

    /**
     * war_eligible boolean
     * 
     * @return warEligible
     **/
    @javax.annotation.Nullable
    public Boolean getWarEligible() {
        return warEligible;
    }

    public void setWarEligible(Boolean warEligible) {
        this.warEligible = warEligible;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationResponse corporationResponse = (CorporationResponse) o;
        return Objects.equals(this.allianceId, corporationResponse.allianceId)
                && Objects.equals(this.ceoId, corporationResponse.ceoId)
                && Objects.equals(this.creatorId, corporationResponse.creatorId)
                && Objects.equals(this.dateFounded, corporationResponse.dateFounded)
                && Objects.equals(this.description, corporationResponse.description)
                && Objects.equals(this.factionId, corporationResponse.factionId)
                && Objects.equals(this.homeStationId, corporationResponse.homeStationId)
                && Objects.equals(this.memberCount, corporationResponse.memberCount)
                && Objects.equals(this.name, corporationResponse.name)
                && Objects.equals(this.shares, corporationResponse.shares)
                && Objects.equals(this.taxRate, corporationResponse.taxRate)
                && Objects.equals(this.ticker, corporationResponse.ticker)
                && Objects.equals(this.url, corporationResponse.url)
                && Objects.equals(this.warEligible, corporationResponse.warEligible);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allianceId, ceoId, creatorId, dateFounded, description, factionId, homeStationId,
                memberCount, name, shares, taxRate, ticker, url, warEligible);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationResponse {\n");
        sb.append("    allianceId: ").append(toIndentedString(allianceId)).append("\n");
        sb.append("    ceoId: ").append(toIndentedString(ceoId)).append("\n");
        sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
        sb.append("    dateFounded: ").append(toIndentedString(dateFounded)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    factionId: ").append(toIndentedString(factionId)).append("\n");
        sb.append("    homeStationId: ").append(toIndentedString(homeStationId)).append("\n");
        sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    shares: ").append(toIndentedString(shares)).append("\n");
        sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
        sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    warEligible: ").append(toIndentedString(warEligible)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("alliance_id");
        openapiFields.add("ceo_id");
        openapiFields.add("creator_id");
        openapiFields.add("date_founded");
        openapiFields.add("description");
        openapiFields.add("faction_id");
        openapiFields.add("home_station_id");
        openapiFields.add("member_count");
        openapiFields.add("name");
        openapiFields.add("shares");
        openapiFields.add("tax_rate");
        openapiFields.add("ticker");
        openapiFields.add("url");
        openapiFields.add("war_eligible");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("ceo_id");
        openapiRequiredFields.add("creator_id");
        openapiRequiredFields.add("member_count");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("tax_rate");
        openapiRequiredFields.add("ticker");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CorporationResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CorporationResponse.openapiRequiredFields.isEmpty()) { // has
                                                                        // required
                                                                        // fields
                                                                        // but
                                                                        // JSON
                                                                        // object
                                                                        // is
                                                                        // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CorporationResponse is not found in the empty JSON string",
                        CorporationResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CorporationResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CorporationResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("description").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("ticker").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `ticker` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("ticker").toString()));
        }
        if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `url` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("url").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CorporationResponse'
                             // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationResponse>() {
                @Override
                public void write(JsonWriter out, CorporationResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationResponse
     */
    public static CorporationResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationResponse.class);
    }

    /**
     * Convert an instance of CorporationResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
