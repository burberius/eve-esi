/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.api;

import net.troja.eve.esi.ApiCallback;
import net.troja.eve.esi.ApiClient;
import net.troja.eve.esi.ApiException;
import net.troja.eve.esi.ApiResponse;
import net.troja.eve.esi.Configuration;
import net.troja.eve.esi.Pair;
import net.troja.eve.esi.ProgressRequestBody;
import net.troja.eve.esi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoutesApi {
    private ApiClient localVarApiClient;

    public RoutesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoutesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getRouteOriginDestination
     * 
     * @param destination
     *            destination solar system ID (required)
     * @param origin
     *            origin solar system ID (required)
     * @param avoid
     *            avoid solar system ID(s) (optional)
     * @param connections
     *            connected solar system pairs (optional)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param flag
     *            route security preference (optional, default to shortest)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param _callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public okhttp3.Call getRouteOriginDestinationCall(Integer destination, Integer origin, List<Integer> avoid,
            List<List<Integer>> connections, String datasource, String flag, String ifNoneMatch,
            final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/route/{origin}/{destination}/".replaceAll("\\{" + "destination" + "\\}",
                localVarApiClient.escapeString(destination.toString())).replaceAll("\\{" + "origin" + "\\}",
                localVarApiClient.escapeString(origin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (avoid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "avoid", avoid));
        }

        if (connections != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "connections", connections));
        }

        if (datasource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datasource", datasource));
        }

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteOriginDestinationValidateBeforeCall(Integer destination, Integer origin,
            List<Integer> avoid, List<List<Integer>> connections, String datasource, String flag, String ifNoneMatch,
            final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException(
                    "Missing the required parameter 'destination' when calling getRouteOriginDestination(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException(
                    "Missing the required parameter 'origin' when calling getRouteOriginDestination(Async)");
        }

        okhttp3.Call localVarCall = getRouteOriginDestinationCall(destination, origin, avoid, connections, datasource,
                flag, ifNoneMatch, _callback);
        return localVarCall;

    }

    /**
     * Get route Get the systems between origin and destination --- This route
     * is cached for up to 86400 seconds
     * 
     * @param destination
     *            destination solar system ID (required)
     * @param origin
     *            origin solar system ID (required)
     * @param avoid
     *            avoid solar system ID(s) (optional)
     * @param connections
     *            connected solar system pairs (optional)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param flag
     *            route security preference (optional, default to shortest)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<Integer> getRouteOriginDestination(Integer destination, Integer origin, List<Integer> avoid,
            List<List<Integer>> connections, String datasource, String flag, String ifNoneMatch) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = getRouteOriginDestinationWithHttpInfo(destination, origin, avoid,
                connections, datasource, flag, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Get route Get the systems between origin and destination --- This route
     * is cached for up to 86400 seconds
     * 
     * @param destination
     *            destination solar system ID (required)
     * @param origin
     *            origin solar system ID (required)
     * @param avoid
     *            avoid solar system ID(s) (optional)
     * @param connections
     *            connected solar system pairs (optional)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param flag
     *            route security preference (optional, default to shortest)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<Integer>> getRouteOriginDestinationWithHttpInfo(Integer destination, Integer origin,
            List<Integer> avoid, List<List<Integer>> connections, String datasource, String flag, String ifNoneMatch)
            throws ApiException {
        okhttp3.Call localVarCall = getRouteOriginDestinationValidateBeforeCall(destination, origin, avoid,
                connections, datasource, flag, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<List<Integer>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get route (asynchronously) Get the systems between origin and destination
     * --- This route is cached for up to 86400 seconds
     * 
     * @param destination
     *            destination solar system ID (required)
     * @param origin
     *            origin solar system ID (required)
     * @param avoid
     *            avoid solar system ID(s) (optional)
     * @param connections
     *            connected solar system pairs (optional)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param flag
     *            route security preference (optional, default to shortest)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param _callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public okhttp3.Call getRouteOriginDestinationAsync(Integer destination, Integer origin, List<Integer> avoid,
            List<List<Integer>> connections, String datasource, String flag, String ifNoneMatch,
            final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteOriginDestinationValidateBeforeCall(destination, origin, avoid,
                connections, datasource, flag, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
