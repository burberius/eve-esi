/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.api;

import net.troja.eve.esi.ApiCallback;
import net.troja.eve.esi.ApiClient;
import net.troja.eve.esi.ApiException;
import net.troja.eve.esi.ApiResponse;
import net.troja.eve.esi.Configuration;
import net.troja.eve.esi.Pair;
import net.troja.eve.esi.ProgressRequestBody;
import net.troja.eve.esi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import net.troja.eve.esi.model.CharacterContractsBidsResponse;
import net.troja.eve.esi.model.CharacterContractsItemsResponse;
import net.troja.eve.esi.model.CharacterContractsResponse;
import net.troja.eve.esi.model.CorporationContractsBidsResponse;
import net.troja.eve.esi.model.CorporationContractsItemsResponse;
import net.troja.eve.esi.model.CorporationContractsResponse;
import net.troja.eve.esi.model.PublicContractsBidsResponse;
import net.troja.eve.esi.model.PublicContractsItemsResponse;
import net.troja.eve.esi.model.PublicContractsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContractsApi {
    private ApiClient apiClient;

    public ContractsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContractsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCharactersCharacterIdContracts
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCharactersCharacterIdContractsCall(Integer characterId, String datasource,
            String ifNoneMatch, Integer page, String token, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/characters/{character_id}/contracts/".replaceAll("\\{" + "character_id" + "\\}",
                apiClient.escapeString(characterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datasource != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datasource", datasource));
        }

        if (page != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        }

        if (token != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "evesso" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCharactersCharacterIdContractsValidateBeforeCall(Integer characterId,
            String datasource, String ifNoneMatch, Integer page, String token, final ApiCallback callback)
            throws ApiException {

        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException(
                    "Missing the required parameter 'characterId' when calling getCharactersCharacterIdContracts(Async)");
        }

        com.squareup.okhttp.Call call = getCharactersCharacterIdContractsCall(characterId, datasource, ifNoneMatch,
                page, token, callback);
        return call;

    }

    /**
     * Get contracts Returns contracts available to a character, only if the
     * character is issuer, acceptor or assignee. Only returns contracts no
     * older than 30 days, or if the status is \&quot;in_progress\&quot;. ---
     * This route is cached for up to 300 seconds
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return List&lt;CharacterContractsResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<CharacterContractsResponse> getCharactersCharacterIdContracts(Integer characterId, String datasource,
            String ifNoneMatch, Integer page, String token) throws ApiException {
        ApiResponse<List<CharacterContractsResponse>> resp = getCharactersCharacterIdContractsWithHttpInfo(characterId,
                datasource, ifNoneMatch, page, token);
        return resp.getData();
    }

    /**
     * Get contracts Returns contracts available to a character, only if the
     * character is issuer, acceptor or assignee. Only returns contracts no
     * older than 30 days, or if the status is \&quot;in_progress\&quot;. ---
     * This route is cached for up to 300 seconds
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return ApiResponse&lt;List&lt;CharacterContractsResponse&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<CharacterContractsResponse>> getCharactersCharacterIdContractsWithHttpInfo(
            Integer characterId, String datasource, String ifNoneMatch, Integer page, String token) throws ApiException {
        com.squareup.okhttp.Call call = getCharactersCharacterIdContractsValidateBeforeCall(characterId, datasource,
                ifNoneMatch, page, token, null);
        Type localVarReturnType = new TypeToken<List<CharacterContractsResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contracts (asynchronously) Returns contracts available to a
     * character, only if the character is issuer, acceptor or assignee. Only
     * returns contracts no older than 30 days, or if the status is
     * \&quot;in_progress\&quot;. --- This route is cached for up to 300 seconds
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call getCharactersCharacterIdContractsAsync(Integer characterId, String datasource,
            String ifNoneMatch, Integer page, String token, final ApiCallback<List<CharacterContractsResponse>> callback)
            throws ApiException {

        com.squareup.okhttp.Call call = getCharactersCharacterIdContractsValidateBeforeCall(characterId, datasource,
                ifNoneMatch, page, token, callback);
        Type localVarReturnType = new TypeToken<List<CharacterContractsResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getCharactersCharacterIdContractsContractIdBids
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCharactersCharacterIdContractsContractIdBidsCall(Integer characterId,
            Integer contractId, String datasource, String ifNoneMatch, String token, final ApiCallback callback)
            throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/characters/{character_id}/contracts/{contract_id}/bids/".replaceAll(
                "\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString())).replaceAll(
                "\\{" + "contract_id" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datasource != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datasource", datasource));
        }

        if (token != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "evesso" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCharactersCharacterIdContractsContractIdBidsValidateBeforeCall(
            Integer characterId, Integer contractId, String datasource, String ifNoneMatch, String token,
            final ApiCallback callback) throws ApiException {

        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException(
                    "Missing the required parameter 'characterId' when calling getCharactersCharacterIdContractsContractIdBids(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException(
                    "Missing the required parameter 'contractId' when calling getCharactersCharacterIdContractsContractIdBids(Async)");
        }

        com.squareup.okhttp.Call call = getCharactersCharacterIdContractsContractIdBidsCall(characterId, contractId,
                datasource, ifNoneMatch, token, callback);
        return call;

    }

    /**
     * Get contract bids Lists bids on a particular auction contract --- This
     * route is cached for up to 300 seconds SSO Scope:
     * esi-contracts.read_character_contracts.v1
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return List&lt;CharacterContractsBidsResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<CharacterContractsBidsResponse> getCharactersCharacterIdContractsContractIdBids(Integer characterId,
            Integer contractId, String datasource, String ifNoneMatch, String token) throws ApiException {
        ApiResponse<List<CharacterContractsBidsResponse>> resp = getCharactersCharacterIdContractsContractIdBidsWithHttpInfo(
                characterId, contractId, datasource, ifNoneMatch, token);
        return resp.getData();
    }

    /**
     * Get contract bids Lists bids on a particular auction contract --- This
     * route is cached for up to 300 seconds SSO Scope:
     * esi-contracts.read_character_contracts.v1
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return ApiResponse&lt;List&lt;CharacterContractsBidsResponse&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<CharacterContractsBidsResponse>> getCharactersCharacterIdContractsContractIdBidsWithHttpInfo(
            Integer characterId, Integer contractId, String datasource, String ifNoneMatch, String token)
            throws ApiException {
        com.squareup.okhttp.Call call = getCharactersCharacterIdContractsContractIdBidsValidateBeforeCall(characterId,
                contractId, datasource, ifNoneMatch, token, null);
        Type localVarReturnType = new TypeToken<List<CharacterContractsBidsResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contract bids (asynchronously) Lists bids on a particular auction
     * contract --- This route is cached for up to 300 seconds SSO Scope:
     * esi-contracts.read_character_contracts.v1
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call getCharactersCharacterIdContractsContractIdBidsAsync(Integer characterId,
            Integer contractId, String datasource, String ifNoneMatch, String token,
            final ApiCallback<List<CharacterContractsBidsResponse>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCharactersCharacterIdContractsContractIdBidsValidateBeforeCall(characterId,
                contractId, datasource, ifNoneMatch, token, callback);
        Type localVarReturnType = new TypeToken<List<CharacterContractsBidsResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getCharactersCharacterIdContractsContractIdItems
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCharactersCharacterIdContractsContractIdItemsCall(Integer characterId,
            Integer contractId, String datasource, String ifNoneMatch, String token, final ApiCallback callback)
            throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/characters/{character_id}/contracts/{contract_id}/items/".replaceAll(
                "\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString())).replaceAll(
                "\\{" + "contract_id" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datasource != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datasource", datasource));
        }

        if (token != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "evesso" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCharactersCharacterIdContractsContractIdItemsValidateBeforeCall(
            Integer characterId, Integer contractId, String datasource, String ifNoneMatch, String token,
            final ApiCallback callback) throws ApiException {

        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException(
                    "Missing the required parameter 'characterId' when calling getCharactersCharacterIdContractsContractIdItems(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException(
                    "Missing the required parameter 'contractId' when calling getCharactersCharacterIdContractsContractIdItems(Async)");
        }

        com.squareup.okhttp.Call call = getCharactersCharacterIdContractsContractIdItemsCall(characterId, contractId,
                datasource, ifNoneMatch, token, callback);
        return call;

    }

    /**
     * Get contract items Lists items of a particular contract --- This route is
     * cached for up to 3600 seconds SSO Scope:
     * esi-contracts.read_corporation_contracts.v1 SSO Scope:
     * esi-contracts.read_character_contracts.v1
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return List&lt;CharacterContractsItemsResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<CharacterContractsItemsResponse> getCharactersCharacterIdContractsContractIdItems(Integer characterId,
            Integer contractId, String datasource, String ifNoneMatch, String token) throws ApiException {
        ApiResponse<List<CharacterContractsItemsResponse>> resp = getCharactersCharacterIdContractsContractIdItemsWithHttpInfo(
                characterId, contractId, datasource, ifNoneMatch, token);
        return resp.getData();
    }

    /**
     * Get contract items Lists items of a particular contract --- This route is
     * cached for up to 3600 seconds SSO Scope:
     * esi-contracts.read_corporation_contracts.v1 SSO Scope:
     * esi-contracts.read_character_contracts.v1
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return ApiResponse&lt;List&lt;CharacterContractsItemsResponse&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<CharacterContractsItemsResponse>> getCharactersCharacterIdContractsContractIdItemsWithHttpInfo(
            Integer characterId, Integer contractId, String datasource, String ifNoneMatch, String token)
            throws ApiException {
        com.squareup.okhttp.Call call = getCharactersCharacterIdContractsContractIdItemsValidateBeforeCall(characterId,
                contractId, datasource, ifNoneMatch, token, null);
        Type localVarReturnType = new TypeToken<List<CharacterContractsItemsResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contract items (asynchronously) Lists items of a particular contract
     * --- This route is cached for up to 3600 seconds SSO Scope:
     * esi-contracts.read_corporation_contracts.v1 SSO Scope:
     * esi-contracts.read_character_contracts.v1
     * 
     * @param characterId
     *            An EVE character ID (required)
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call getCharactersCharacterIdContractsContractIdItemsAsync(Integer characterId,
            Integer contractId, String datasource, String ifNoneMatch, String token,
            final ApiCallback<List<CharacterContractsItemsResponse>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCharactersCharacterIdContractsContractIdItemsValidateBeforeCall(characterId,
                contractId, datasource, ifNoneMatch, token, callback);
        Type localVarReturnType = new TypeToken<List<CharacterContractsItemsResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getContractsPublicBidsContractId
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContractsPublicBidsContractIdCall(Integer contractId, String datasource,
            String ifNoneMatch, Integer page, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/contracts/public/bids/{contract_id}/".replaceAll("\\{" + "contract_id" + "\\}",
                apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datasource != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datasource", datasource));
        }

        if (page != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractsPublicBidsContractIdValidateBeforeCall(Integer contractId,
            String datasource, String ifNoneMatch, Integer page, final ApiCallback callback) throws ApiException {

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException(
                    "Missing the required parameter 'contractId' when calling getContractsPublicBidsContractId(Async)");
        }

        com.squareup.okhttp.Call call = getContractsPublicBidsContractIdCall(contractId, datasource, ifNoneMatch, page,
                callback);
        return call;

    }

    /**
     * Get public contract bids Lists bids on a public auction contract --- This
     * route is cached for up to 300 seconds
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @return List&lt;PublicContractsBidsResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<PublicContractsBidsResponse> getContractsPublicBidsContractId(Integer contractId, String datasource,
            String ifNoneMatch, Integer page) throws ApiException {
        ApiResponse<List<PublicContractsBidsResponse>> resp = getContractsPublicBidsContractIdWithHttpInfo(contractId,
                datasource, ifNoneMatch, page);
        return resp.getData();
    }

    /**
     * Get public contract bids Lists bids on a public auction contract --- This
     * route is cached for up to 300 seconds
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @return ApiResponse&lt;List&lt;PublicContractsBidsResponse&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<PublicContractsBidsResponse>> getContractsPublicBidsContractIdWithHttpInfo(
            Integer contractId, String datasource, String ifNoneMatch, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getContractsPublicBidsContractIdValidateBeforeCall(contractId, datasource,
                ifNoneMatch, page, null);
        Type localVarReturnType = new TypeToken<List<PublicContractsBidsResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get public contract bids (asynchronously) Lists bids on a public auction
     * contract --- This route is cached for up to 300 seconds
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call getContractsPublicBidsContractIdAsync(Integer contractId, String datasource,
            String ifNoneMatch, Integer page, final ApiCallback<List<PublicContractsBidsResponse>> callback)
            throws ApiException {

        com.squareup.okhttp.Call call = getContractsPublicBidsContractIdValidateBeforeCall(contractId, datasource,
                ifNoneMatch, page, callback);
        Type localVarReturnType = new TypeToken<List<PublicContractsBidsResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getContractsPublicItemsContractId
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContractsPublicItemsContractIdCall(Integer contractId, String datasource,
            String ifNoneMatch, Integer page, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/contracts/public/items/{contract_id}/".replaceAll("\\{" + "contract_id" + "\\}",
                apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datasource != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datasource", datasource));
        }

        if (page != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractsPublicItemsContractIdValidateBeforeCall(Integer contractId,
            String datasource, String ifNoneMatch, Integer page, final ApiCallback callback) throws ApiException {

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException(
                    "Missing the required parameter 'contractId' when calling getContractsPublicItemsContractId(Async)");
        }

        com.squareup.okhttp.Call call = getContractsPublicItemsContractIdCall(contractId, datasource, ifNoneMatch,
                page, callback);
        return call;

    }

    /**
     * Get public contract items Lists items of a public contract --- This route
     * is cached for up to 3600 seconds
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @return List&lt;PublicContractsItemsResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<PublicContractsItemsResponse> getContractsPublicItemsContractId(Integer contractId, String datasource,
            String ifNoneMatch, Integer page) throws ApiException {
        ApiResponse<List<PublicContractsItemsResponse>> resp = getContractsPublicItemsContractIdWithHttpInfo(
                contractId, datasource, ifNoneMatch, page);
        return resp.getData();
    }

    /**
     * Get public contract items Lists items of a public contract --- This route
     * is cached for up to 3600 seconds
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @return ApiResponse&lt;List&lt;PublicContractsItemsResponse&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<PublicContractsItemsResponse>> getContractsPublicItemsContractIdWithHttpInfo(
            Integer contractId, String datasource, String ifNoneMatch, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getContractsPublicItemsContractIdValidateBeforeCall(contractId, datasource,
                ifNoneMatch, page, null);
        Type localVarReturnType = new TypeToken<List<PublicContractsItemsResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get public contract items (asynchronously) Lists items of a public
     * contract --- This route is cached for up to 3600 seconds
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call getContractsPublicItemsContractIdAsync(Integer contractId, String datasource,
            String ifNoneMatch, Integer page, final ApiCallback<List<PublicContractsItemsResponse>> callback)
            throws ApiException {

        com.squareup.okhttp.Call call = getContractsPublicItemsContractIdValidateBeforeCall(contractId, datasource,
                ifNoneMatch, page, callback);
        Type localVarReturnType = new TypeToken<List<PublicContractsItemsResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getContractsPublicRegionId
     * 
     * @param regionId
     *            An EVE region id (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContractsPublicRegionIdCall(Integer regionId, String datasource,
            String ifNoneMatch, Integer page, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/contracts/public/{region_id}/".replaceAll("\\{" + "region_id" + "\\}",
                apiClient.escapeString(regionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datasource != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datasource", datasource));
        }

        if (page != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractsPublicRegionIdValidateBeforeCall(Integer regionId, String datasource,
            String ifNoneMatch, Integer page, final ApiCallback callback) throws ApiException {

        // verify the required parameter 'regionId' is set
        if (regionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'regionId' when calling getContractsPublicRegionId(Async)");
        }

        com.squareup.okhttp.Call call = getContractsPublicRegionIdCall(regionId, datasource, ifNoneMatch, page,
                callback);
        return call;

    }

    /**
     * Get public contracts Returns a paginated list of all public contracts in
     * the given region --- This route is cached for up to 1800 seconds
     * 
     * @param regionId
     *            An EVE region id (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @return List&lt;PublicContractsResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<PublicContractsResponse> getContractsPublicRegionId(Integer regionId, String datasource,
            String ifNoneMatch, Integer page) throws ApiException {
        ApiResponse<List<PublicContractsResponse>> resp = getContractsPublicRegionIdWithHttpInfo(regionId, datasource,
                ifNoneMatch, page);
        return resp.getData();
    }

    /**
     * Get public contracts Returns a paginated list of all public contracts in
     * the given region --- This route is cached for up to 1800 seconds
     * 
     * @param regionId
     *            An EVE region id (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @return ApiResponse&lt;List&lt;PublicContractsResponse&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<PublicContractsResponse>> getContractsPublicRegionIdWithHttpInfo(Integer regionId,
            String datasource, String ifNoneMatch, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getContractsPublicRegionIdValidateBeforeCall(regionId, datasource, ifNoneMatch,
                page, null);
        Type localVarReturnType = new TypeToken<List<PublicContractsResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get public contracts (asynchronously) Returns a paginated list of all
     * public contracts in the given region --- This route is cached for up to
     * 1800 seconds
     * 
     * @param regionId
     *            An EVE region id (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call getContractsPublicRegionIdAsync(Integer regionId, String datasource,
            String ifNoneMatch, Integer page, final ApiCallback<List<PublicContractsResponse>> callback)
            throws ApiException {

        com.squareup.okhttp.Call call = getContractsPublicRegionIdValidateBeforeCall(regionId, datasource, ifNoneMatch,
                page, callback);
        Type localVarReturnType = new TypeToken<List<PublicContractsResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getCorporationsCorporationIdContracts
     * 
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCorporationsCorporationIdContractsCall(Integer corporationId, String datasource,
            String ifNoneMatch, Integer page, String token, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/corporations/{corporation_id}/contracts/".replaceAll("\\{" + "corporation_id"
                + "\\}", apiClient.escapeString(corporationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datasource != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datasource", datasource));
        }

        if (page != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        }

        if (token != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "evesso" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCorporationsCorporationIdContractsValidateBeforeCall(Integer corporationId,
            String datasource, String ifNoneMatch, Integer page, String token, final ApiCallback callback)
            throws ApiException {

        // verify the required parameter 'corporationId' is set
        if (corporationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdContracts(Async)");
        }

        com.squareup.okhttp.Call call = getCorporationsCorporationIdContractsCall(corporationId, datasource,
                ifNoneMatch, page, token, callback);
        return call;

    }

    /**
     * Get corporation contracts Returns contracts available to a corporation,
     * only if the corporation is issuer, acceptor or assignee. Only returns
     * contracts no older than 30 days, or if the status is
     * \&quot;in_progress\&quot;. --- This route is cached for up to 300 seconds
     * 
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return List&lt;CorporationContractsResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<CorporationContractsResponse> getCorporationsCorporationIdContracts(Integer corporationId,
            String datasource, String ifNoneMatch, Integer page, String token) throws ApiException {
        ApiResponse<List<CorporationContractsResponse>> resp = getCorporationsCorporationIdContractsWithHttpInfo(
                corporationId, datasource, ifNoneMatch, page, token);
        return resp.getData();
    }

    /**
     * Get corporation contracts Returns contracts available to a corporation,
     * only if the corporation is issuer, acceptor or assignee. Only returns
     * contracts no older than 30 days, or if the status is
     * \&quot;in_progress\&quot;. --- This route is cached for up to 300 seconds
     * 
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return ApiResponse&lt;List&lt;CorporationContractsResponse&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<CorporationContractsResponse>> getCorporationsCorporationIdContractsWithHttpInfo(
            Integer corporationId, String datasource, String ifNoneMatch, Integer page, String token)
            throws ApiException {
        com.squareup.okhttp.Call call = getCorporationsCorporationIdContractsValidateBeforeCall(corporationId,
                datasource, ifNoneMatch, page, token, null);
        Type localVarReturnType = new TypeToken<List<CorporationContractsResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get corporation contracts (asynchronously) Returns contracts available to
     * a corporation, only if the corporation is issuer, acceptor or assignee.
     * Only returns contracts no older than 30 days, or if the status is
     * \&quot;in_progress\&quot;. --- This route is cached for up to 300 seconds
     * 
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call getCorporationsCorporationIdContractsAsync(Integer corporationId,
            String datasource, String ifNoneMatch, Integer page, String token,
            final ApiCallback<List<CorporationContractsResponse>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCorporationsCorporationIdContractsValidateBeforeCall(corporationId,
                datasource, ifNoneMatch, page, token, callback);
        Type localVarReturnType = new TypeToken<List<CorporationContractsResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getCorporationsCorporationIdContractsContractIdBids
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCorporationsCorporationIdContractsContractIdBidsCall(Integer contractId,
            Integer corporationId, String datasource, String ifNoneMatch, Integer page, String token,
            final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/".replaceAll(
                "\\{" + "contract_id" + "\\}", apiClient.escapeString(contractId.toString())).replaceAll(
                "\\{" + "corporation_id" + "\\}", apiClient.escapeString(corporationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datasource != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datasource", datasource));
        }

        if (page != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        }

        if (token != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "evesso" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCorporationsCorporationIdContractsContractIdBidsValidateBeforeCall(
            Integer contractId, Integer corporationId, String datasource, String ifNoneMatch, Integer page,
            String token, final ApiCallback callback) throws ApiException {

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException(
                    "Missing the required parameter 'contractId' when calling getCorporationsCorporationIdContractsContractIdBids(Async)");
        }

        // verify the required parameter 'corporationId' is set
        if (corporationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdContractsContractIdBids(Async)");
        }

        com.squareup.okhttp.Call call = getCorporationsCorporationIdContractsContractIdBidsCall(contractId,
                corporationId, datasource, ifNoneMatch, page, token, callback);
        return call;

    }

    /**
     * Get corporation contract bids Lists bids on a particular auction contract
     * --- This route is cached for up to 3600 seconds SSO Scope:
     * esi-contracts.read_corporation_contracts.v1
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return List&lt;CorporationContractsBidsResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<CorporationContractsBidsResponse> getCorporationsCorporationIdContractsContractIdBids(
            Integer contractId, Integer corporationId, String datasource, String ifNoneMatch, Integer page, String token)
            throws ApiException {
        ApiResponse<List<CorporationContractsBidsResponse>> resp = getCorporationsCorporationIdContractsContractIdBidsWithHttpInfo(
                contractId, corporationId, datasource, ifNoneMatch, page, token);
        return resp.getData();
    }

    /**
     * Get corporation contract bids Lists bids on a particular auction contract
     * --- This route is cached for up to 3600 seconds SSO Scope:
     * esi-contracts.read_corporation_contracts.v1
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return ApiResponse&lt;List&lt;CorporationContractsBidsResponse&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<CorporationContractsBidsResponse>> getCorporationsCorporationIdContractsContractIdBidsWithHttpInfo(
            Integer contractId, Integer corporationId, String datasource, String ifNoneMatch, Integer page, String token)
            throws ApiException {
        com.squareup.okhttp.Call call = getCorporationsCorporationIdContractsContractIdBidsValidateBeforeCall(
                contractId, corporationId, datasource, ifNoneMatch, page, token, null);
        Type localVarReturnType = new TypeToken<List<CorporationContractsBidsResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get corporation contract bids (asynchronously) Lists bids on a particular
     * auction contract --- This route is cached for up to 3600 seconds SSO
     * Scope: esi-contracts.read_corporation_contracts.v1
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param page
     *            Which page of results to return (optional, default to 1)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call getCorporationsCorporationIdContractsContractIdBidsAsync(Integer contractId,
            Integer corporationId, String datasource, String ifNoneMatch, Integer page, String token,
            final ApiCallback<List<CorporationContractsBidsResponse>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCorporationsCorporationIdContractsContractIdBidsValidateBeforeCall(
                contractId, corporationId, datasource, ifNoneMatch, page, token, callback);
        Type localVarReturnType = new TypeToken<List<CorporationContractsBidsResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getCorporationsCorporationIdContractsContractIdItems
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCorporationsCorporationIdContractsContractIdItemsCall(Integer contractId,
            Integer corporationId, String datasource, String ifNoneMatch, String token, final ApiCallback callback)
            throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/corporations/{corporation_id}/contracts/{contract_id}/items/".replaceAll(
                "\\{" + "contract_id" + "\\}", apiClient.escapeString(contractId.toString())).replaceAll(
                "\\{" + "corporation_id" + "\\}", apiClient.escapeString(corporationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datasource != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datasource", datasource));
        }

        if (token != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "evesso" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCorporationsCorporationIdContractsContractIdItemsValidateBeforeCall(
            Integer contractId, Integer corporationId, String datasource, String ifNoneMatch, String token,
            final ApiCallback callback) throws ApiException {

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException(
                    "Missing the required parameter 'contractId' when calling getCorporationsCorporationIdContractsContractIdItems(Async)");
        }

        // verify the required parameter 'corporationId' is set
        if (corporationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdContractsContractIdItems(Async)");
        }

        com.squareup.okhttp.Call call = getCorporationsCorporationIdContractsContractIdItemsCall(contractId,
                corporationId, datasource, ifNoneMatch, token, callback);
        return call;

    }

    /**
     * Get corporation contract items Lists items of a particular contract ---
     * This route is cached for up to 3600 seconds SSO Scope:
     * esi-contracts.read_corporation_contracts.v1 SSO Scope:
     * esi-contracts.read_character_contracts.v1
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return List&lt;CorporationContractsItemsResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<CorporationContractsItemsResponse> getCorporationsCorporationIdContractsContractIdItems(
            Integer contractId, Integer corporationId, String datasource, String ifNoneMatch, String token)
            throws ApiException {
        ApiResponse<List<CorporationContractsItemsResponse>> resp = getCorporationsCorporationIdContractsContractIdItemsWithHttpInfo(
                contractId, corporationId, datasource, ifNoneMatch, token);
        return resp.getData();
    }

    /**
     * Get corporation contract items Lists items of a particular contract ---
     * This route is cached for up to 3600 seconds SSO Scope:
     * esi-contracts.read_corporation_contracts.v1 SSO Scope:
     * esi-contracts.read_character_contracts.v1
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @return ApiResponse&lt;List&lt;CorporationContractsItemsResponse&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<CorporationContractsItemsResponse>> getCorporationsCorporationIdContractsContractIdItemsWithHttpInfo(
            Integer contractId, Integer corporationId, String datasource, String ifNoneMatch, String token)
            throws ApiException {
        com.squareup.okhttp.Call call = getCorporationsCorporationIdContractsContractIdItemsValidateBeforeCall(
                contractId, corporationId, datasource, ifNoneMatch, token, null);
        Type localVarReturnType = new TypeToken<List<CorporationContractsItemsResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get corporation contract items (asynchronously) Lists items of a
     * particular contract --- This route is cached for up to 3600 seconds SSO
     * Scope: esi-contracts.read_corporation_contracts.v1 SSO Scope:
     * esi-contracts.read_character_contracts.v1
     * 
     * @param contractId
     *            ID of a contract (required)
     * @param corporationId
     *            An EVE corporation ID (required)
     * @param datasource
     *            The server name you would like data from (optional, default to
     *            tranquility)
     * @param ifNoneMatch
     *            ETag from a previous request. A 304 will be returned if this
     *            matches the current ETag (optional)
     * @param token
     *            Access token to use if unable to set a header (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call getCorporationsCorporationIdContractsContractIdItemsAsync(Integer contractId,
            Integer corporationId, String datasource, String ifNoneMatch, String token,
            final ApiCallback<List<CorporationContractsItemsResponse>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCorporationsCorporationIdContractsContractIdItemsValidateBeforeCall(
                contractId, corporationId, datasource, ifNoneMatch, token, callback);
        Type localVarReturnType = new TypeToken<List<CorporationContractsItemsResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
